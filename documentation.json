{
    "pipes": [],
    "interfaces": [
        {
            "name": "ApiRespone",
            "id": "interface-ApiRespone-66643179314ce6d167daed8f89f65e9a",
            "file": "src/app/core/models/api.model.ts",
            "type": "interface",
            "sourceCode": "import { Team } from './team.model';\nimport { Squad } from './squad.model';\n// import { Competition } from './competition.model';\nimport { Fixtures } from './matches.model';\n\nexport interface ApiRespone {\n  teams: Clubs;\n  [unusedProperties: string]: any;\n\n}\n\n// interface to get teams in a competion\nexport interface Teams {\n  count: number;\n  filters: any;\n  competition: any;\n  season: any;\n  teams: Team[];\n}\n\nexport interface TeamDetails {\n  id: number;\n  area: {\n    id: number,\n    name: string\n  };\n  name: string;\n  shortName: string;\n  tla: string;\n  crestUrl: string;\n  address: string;\n  phone: string;\n  website: string;\n  email: string;\n  founded: number;\n  clubColors: string;\n  venue: string;\n  lastUpdated: string;\n  squad: Squad[];\n}\n\n// interface to get matches in a competion\n// export interface Match{\n//   filters?: any;\n//   competition?: Competition;\n//   matches: Matches[];\n// }\n\n// export interface Comp {\n//   counts?: any;\n//   filters?: any;\n//   competition?: Competition;\n// }\n\n// export interface Standing {\n//   stage: string;\n//   type: string;\n//   group: string;\n//   table: Team[];\n// }\n\nexport interface Clubs {\n  id: number;\n  position: string;\n  dateOfBirth: string;\n  countryOfBirth: string;\n  nationality: string;\n  shirtNumber: null;\n  role: string;\n  name: string;\n  crestUrl: string;\n  address: string;\n  website: string;\n  email: string;\n  founded: string;\n  clubColors: string;\n  venue: string;\n  squad: Squad[];\n}\n",
            "properties": [
                {
                    "name": "teams",
                    "type": "Clubs",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-66643179314ce6d167daed8f89f65e9a",
                    "args": [
                        {
                            "name": "unusedProperties",
                            "type": "string"
                        }
                    ],
                    "returnType": "any",
                    "line": 7
                }
            ],
            "kind": 159,
            "methods": []
        },
        {
            "name": "AppSettings",
            "id": "interface-AppSettings-70758b87eda9fd4b75b0fe4c92271fc3",
            "file": "src/app/core/settings.ts",
            "type": "interface",
            "sourceCode": "export interface AppSettings {\n  navPos?: 'side' | 'top';\n  dir?: 'ltr' | 'rtl';\n  theme?: 'light' | 'dark';\n  showHeader?: boolean;\n  headerPos?: 'fixed' | 'static' | 'above';\n  showUserPanel?: boolean;\n  sidenavOpened?: boolean;\n  sidenavCollapsed?: boolean;\n  language?: string;\n}\n\nexport const defaults: AppSettings = {\n  navPos: 'side',\n  dir: 'ltr',\n  theme: 'light',\n  showHeader: true,\n  headerPos: 'fixed',\n  showUserPanel: true,\n  sidenavOpened: true,\n  sidenavCollapsed: false,\n  language: 'en-US',\n};\n",
            "properties": [
                {
                    "name": "dir",
                    "type": "\"ltr\" | \"rtl\"",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "headerPos",
                    "type": "\"fixed\" | \"static\" | \"above\"",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "language",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "navPos",
                    "type": "\"side\" | \"top\"",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "showHeader",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "showUserPanel",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "sidenavCollapsed",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "sidenavOpened",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "theme",
                    "type": "\"light\" | \"dark\"",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Clubs",
            "id": "interface-Clubs-66643179314ce6d167daed8f89f65e9a",
            "file": "src/app/core/models/api.model.ts",
            "type": "interface",
            "sourceCode": "import { Team } from './team.model';\nimport { Squad } from './squad.model';\n// import { Competition } from './competition.model';\nimport { Fixtures } from './matches.model';\n\nexport interface ApiRespone {\n  teams: Clubs;\n  [unusedProperties: string]: any;\n\n}\n\n// interface to get teams in a competion\nexport interface Teams {\n  count: number;\n  filters: any;\n  competition: any;\n  season: any;\n  teams: Team[];\n}\n\nexport interface TeamDetails {\n  id: number;\n  area: {\n    id: number,\n    name: string\n  };\n  name: string;\n  shortName: string;\n  tla: string;\n  crestUrl: string;\n  address: string;\n  phone: string;\n  website: string;\n  email: string;\n  founded: number;\n  clubColors: string;\n  venue: string;\n  lastUpdated: string;\n  squad: Squad[];\n}\n\n// interface to get matches in a competion\n// export interface Match{\n//   filters?: any;\n//   competition?: Competition;\n//   matches: Matches[];\n// }\n\n// export interface Comp {\n//   counts?: any;\n//   filters?: any;\n//   competition?: Competition;\n// }\n\n// export interface Standing {\n//   stage: string;\n//   type: string;\n//   group: string;\n//   table: Team[];\n// }\n\nexport interface Clubs {\n  id: number;\n  position: string;\n  dateOfBirth: string;\n  countryOfBirth: string;\n  nationality: string;\n  shirtNumber: null;\n  role: string;\n  name: string;\n  crestUrl: string;\n  address: string;\n  website: string;\n  email: string;\n  founded: string;\n  clubColors: string;\n  venue: string;\n  squad: Squad[];\n}\n",
            "properties": [
                {
                    "name": "address",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "clubColors",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "countryOfBirth",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "crestUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "dateOfBirth",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "founded",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "nationality",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "position",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "role",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "shirtNumber",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "squad",
                    "type": "Squad[]",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "venue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "website",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 73
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Competition",
            "id": "interface-Competition-b06bc653e773322c15c6211bfb732f19",
            "file": "src/app/core/models/matches.model.ts",
            "type": "interface",
            "sourceCode": "export class Imatches {\n  count: number;\n  competition?: Competition;\n  matches: Fixtures[];\n  [unusedProperties: string]: any;\n}\n\n// export interface Fixtures {\n//   count: number;\n//   competition?: Competition;\n//   matches: Matches[];\n// }\n\nexport interface Competition {\n  id: number;\n  area: {\n    id: number;\n    name: string\n  };\n  name: string;\n  code: string;\n  plan: string;\n  lastUpdated: string;\n}\n\nexport interface Fixtures{\n  id: number;\n  awayTeam: {\n    id: number,\n    name: string\n  };\n  homeTeam: {\n    id: number,\n    name: string\n  };\n  lastUpdated: string;\n  matchday: number;\n  season: {\n    id: number,\n    startDate: string,\n    endDate: string,\n    currentMatchday: number\n  };\n  score: {\n    winner: string;\n    duration: string;\n    fullTime: {\n      homeTeam: number,\n        awayTeam: number\n    },\n    halfTime: {\n      homeTeam: number,\n        awayTeam: number\n    }\n  };\n  stage: string;\n  status: string;\n  utcDate: string;\n}\n// export interface Matches {\n//   id: number;\n//   season: {\n//     id: number,\n//     startDate: string,\n//     endDate: string,\n//     currentMatchday: number\n//   };\n//   utcDate: string;\n//   status: string;\n//   matchday: number;\n//   stage: string;\n//   group: string;\n//   lastUpdated: string;\n//   score: {\n//     winner: string;\n//     duration: string;\n//     fullTime: {\n//       homeTeam: number,\n//       awayTeam: number\n//     },\n//     halfTime: {\n//       homeTeam: number,\n//       awayTeam: number\n//     }\n//   };\n//   homeTeam: {\n//     id: number,\n//     name: string\n//   };\n//   awayTeam: {\n//     id: number,\n//     name: string\n//   };\n// }\n\n",
            "properties": [
                {
                    "name": "area",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "code",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "lastUpdated",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "plan",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Fixtures",
            "id": "interface-Fixtures-b06bc653e773322c15c6211bfb732f19",
            "file": "src/app/core/models/matches.model.ts",
            "type": "interface",
            "sourceCode": "export class Imatches {\n  count: number;\n  competition?: Competition;\n  matches: Fixtures[];\n  [unusedProperties: string]: any;\n}\n\n// export interface Fixtures {\n//   count: number;\n//   competition?: Competition;\n//   matches: Matches[];\n// }\n\nexport interface Competition {\n  id: number;\n  area: {\n    id: number;\n    name: string\n  };\n  name: string;\n  code: string;\n  plan: string;\n  lastUpdated: string;\n}\n\nexport interface Fixtures{\n  id: number;\n  awayTeam: {\n    id: number,\n    name: string\n  };\n  homeTeam: {\n    id: number,\n    name: string\n  };\n  lastUpdated: string;\n  matchday: number;\n  season: {\n    id: number,\n    startDate: string,\n    endDate: string,\n    currentMatchday: number\n  };\n  score: {\n    winner: string;\n    duration: string;\n    fullTime: {\n      homeTeam: number,\n        awayTeam: number\n    },\n    halfTime: {\n      homeTeam: number,\n        awayTeam: number\n    }\n  };\n  stage: string;\n  status: string;\n  utcDate: string;\n}\n// export interface Matches {\n//   id: number;\n//   season: {\n//     id: number,\n//     startDate: string,\n//     endDate: string,\n//     currentMatchday: number\n//   };\n//   utcDate: string;\n//   status: string;\n//   matchday: number;\n//   stage: string;\n//   group: string;\n//   lastUpdated: string;\n//   score: {\n//     winner: string;\n//     duration: string;\n//     fullTime: {\n//       homeTeam: number,\n//       awayTeam: number\n//     },\n//     halfTime: {\n//       homeTeam: number,\n//       awayTeam: number\n//     }\n//   };\n//   homeTeam: {\n//     id: number,\n//     name: string\n//   };\n//   awayTeam: {\n//     id: number,\n//     name: string\n//   };\n// }\n\n",
            "properties": [
                {
                    "name": "awayTeam",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "homeTeam",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "lastUpdated",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "matchday",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "score",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "season",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "stage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "status",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "utcDate",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IStanding",
            "id": "interface-IStanding-2049613f059637dcf103dbd5dff195f4",
            "file": "src/app/core/models/standings.model.ts",
            "type": "interface",
            "sourceCode": "export interface IStanding {\n  matchday: number;\n  standings: Standing[];\n  [unusedProperties: string]: any;\n}\n\nexport interface Standing {\n  stage: string;\n  type: string;\n  group: string;\n  table: Table[];\n}\n\nexport interface Table {\n  position: number;\n  team: {\n      id: number;\n      name: string;\n      crestUrl: string;\n  };\n  playedGames: number;\n  won: number;\n  draw: number;\n  lost: number;\n  points: number;\n  goalsFor: number;\n  goalsAgainst: number;\n  goalDifference: number;\n}\n",
            "properties": [
                {
                    "name": "matchday",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "standings",
                    "type": "Standing[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-2049613f059637dcf103dbd5dff195f4",
                    "args": [
                        {
                            "name": "unusedProperties",
                            "type": "string"
                        }
                    ],
                    "returnType": "any",
                    "line": 4
                }
            ],
            "kind": 159,
            "methods": []
        },
        {
            "name": "Menu",
            "id": "interface-Menu-ceb03882f950c4abd4fc428195c2d9c5",
            "file": "src/app/core/services/menu.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nexport interface MenuTag {\n  color: string; // background color\n  value: string;\n}\n\nexport interface MenuChildrenItem {\n  route: string;\n  name: string;\n  type: 'link' | 'sub' | 'extLink' | 'extTabLink';\n  children?: MenuChildrenItem[];\n}\n\nexport interface Menu {\n  route: string;\n  name: string;\n  type: 'link' | 'sub' | 'extLink' | 'extTabLink';\n  icon: string;\n  label?: MenuTag;\n  badge?: MenuTag;\n  children?: MenuChildrenItem[];\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MenuService {\n  private menu$: BehaviorSubject<Menu[]> = new BehaviorSubject<Menu[]>([]);\n\n  getAll(): Observable<Menu[]> {\n    return this.menu$.asObservable();\n  }\n\n  set(menu: Menu[]): Observable<Menu[]> {\n    this.menu$.next(menu);\n    return this.menu$.asObservable();\n  }\n\n  add(menu: Menu) {\n    const tmpMenu = this.menu$.value;\n    tmpMenu.push(menu);\n    this.menu$.next(tmpMenu);\n  }\n\n  reset() {\n    this.menu$.next([]);\n  }\n\n  // Delete empty values and rebuild route\n  buildRoute(routeArr: string[]): string {\n    let route = '';\n    routeArr.forEach(item => {\n      if (item && item.trim()) {\n        route += '/' + item.replace(/^\\/+|\\/+$/g, '');\n      }\n    });\n    return route;\n  }\n\n  getMenuItemName(routeArr: string[]): string {\n    return this.getMenuLevel(routeArr)[routeArr.length - 1];\n  }\n\n  /** Menu level */\n\n  private isLeafItem(item: MenuChildrenItem): boolean {\n    const cond0 = item.route === undefined;\n    const cond1 = item.children === undefined;\n    const cond2 = !cond1 && item.children.length === 0;\n    return cond0 || cond1 || cond2;\n  }\n\n  // Deep clone object could be jsonized\n  private deepClone(obj: any): any {\n    return JSON.parse(JSON.stringify(obj));\n  }\n\n  // Whether two objects could be jsonized equal\n  private isJsonObjEqual(obj0: any, obj1: any): boolean {\n    return JSON.stringify(obj0) === JSON.stringify(obj1);\n  }\n\n  // Whether routeArr equals realRouteArr (after remove empty route element)\n  private isRouteEqual(routeArr: Array<string>, realRouteArr: Array<string>): boolean {\n    realRouteArr = this.deepClone(realRouteArr);\n    realRouteArr = realRouteArr.filter(r => r !== '');\n    return this.isJsonObjEqual(routeArr, realRouteArr);\n  }\n\n  getMenuLevel(routeArr: string[]): string[] {\n    let tmpArr = [];\n    this.menu$.value.forEach(item => {\n      // breadth first traverse modified\n      let unhandledLayer = [{ item, parentNamePathList: [], realRouteArr: [] }];\n      while (unhandledLayer.length > 0) {\n        let nextUnhandledLayer = [];\n        for (const ele of unhandledLayer) {\n          const eachItem = ele.item;\n          const currentNamePathList = this.deepClone(ele.parentNamePathList).concat(eachItem.name);\n          const currentRealRouteArr = this.deepClone(ele.realRouteArr).concat(eachItem.route);\n          // compare the full Array for expandable\n          if (this.isRouteEqual(routeArr, currentRealRouteArr)) {\n            tmpArr = currentNamePathList;\n            break;\n          }\n          if (!this.isLeafItem(eachItem)) {\n            const wrappedChildren = eachItem.children.map(child => ({\n              item: child,\n              parentNamePathList: currentNamePathList,\n              realRouteArr: currentRealRouteArr,\n            }));\n            nextUnhandledLayer = nextUnhandledLayer.concat(wrappedChildren);\n          }\n        }\n        unhandledLayer = nextUnhandledLayer;\n      }\n    });\n    return tmpArr;\n  }\n}\n",
            "properties": [
                {
                    "name": "badge",
                    "type": "MenuTag",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "children",
                    "type": "MenuChildrenItem[]",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "icon",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "label",
                    "type": "MenuTag",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "route",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "type",
                    "type": "\"link\" | \"sub\" | \"extLink\" | \"extTabLink\"",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "MenuChildrenItem",
            "id": "interface-MenuChildrenItem-ceb03882f950c4abd4fc428195c2d9c5",
            "file": "src/app/core/services/menu.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nexport interface MenuTag {\n  color: string; // background color\n  value: string;\n}\n\nexport interface MenuChildrenItem {\n  route: string;\n  name: string;\n  type: 'link' | 'sub' | 'extLink' | 'extTabLink';\n  children?: MenuChildrenItem[];\n}\n\nexport interface Menu {\n  route: string;\n  name: string;\n  type: 'link' | 'sub' | 'extLink' | 'extTabLink';\n  icon: string;\n  label?: MenuTag;\n  badge?: MenuTag;\n  children?: MenuChildrenItem[];\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MenuService {\n  private menu$: BehaviorSubject<Menu[]> = new BehaviorSubject<Menu[]>([]);\n\n  getAll(): Observable<Menu[]> {\n    return this.menu$.asObservable();\n  }\n\n  set(menu: Menu[]): Observable<Menu[]> {\n    this.menu$.next(menu);\n    return this.menu$.asObservable();\n  }\n\n  add(menu: Menu) {\n    const tmpMenu = this.menu$.value;\n    tmpMenu.push(menu);\n    this.menu$.next(tmpMenu);\n  }\n\n  reset() {\n    this.menu$.next([]);\n  }\n\n  // Delete empty values and rebuild route\n  buildRoute(routeArr: string[]): string {\n    let route = '';\n    routeArr.forEach(item => {\n      if (item && item.trim()) {\n        route += '/' + item.replace(/^\\/+|\\/+$/g, '');\n      }\n    });\n    return route;\n  }\n\n  getMenuItemName(routeArr: string[]): string {\n    return this.getMenuLevel(routeArr)[routeArr.length - 1];\n  }\n\n  /** Menu level */\n\n  private isLeafItem(item: MenuChildrenItem): boolean {\n    const cond0 = item.route === undefined;\n    const cond1 = item.children === undefined;\n    const cond2 = !cond1 && item.children.length === 0;\n    return cond0 || cond1 || cond2;\n  }\n\n  // Deep clone object could be jsonized\n  private deepClone(obj: any): any {\n    return JSON.parse(JSON.stringify(obj));\n  }\n\n  // Whether two objects could be jsonized equal\n  private isJsonObjEqual(obj0: any, obj1: any): boolean {\n    return JSON.stringify(obj0) === JSON.stringify(obj1);\n  }\n\n  // Whether routeArr equals realRouteArr (after remove empty route element)\n  private isRouteEqual(routeArr: Array<string>, realRouteArr: Array<string>): boolean {\n    realRouteArr = this.deepClone(realRouteArr);\n    realRouteArr = realRouteArr.filter(r => r !== '');\n    return this.isJsonObjEqual(routeArr, realRouteArr);\n  }\n\n  getMenuLevel(routeArr: string[]): string[] {\n    let tmpArr = [];\n    this.menu$.value.forEach(item => {\n      // breadth first traverse modified\n      let unhandledLayer = [{ item, parentNamePathList: [], realRouteArr: [] }];\n      while (unhandledLayer.length > 0) {\n        let nextUnhandledLayer = [];\n        for (const ele of unhandledLayer) {\n          const eachItem = ele.item;\n          const currentNamePathList = this.deepClone(ele.parentNamePathList).concat(eachItem.name);\n          const currentRealRouteArr = this.deepClone(ele.realRouteArr).concat(eachItem.route);\n          // compare the full Array for expandable\n          if (this.isRouteEqual(routeArr, currentRealRouteArr)) {\n            tmpArr = currentNamePathList;\n            break;\n          }\n          if (!this.isLeafItem(eachItem)) {\n            const wrappedChildren = eachItem.children.map(child => ({\n              item: child,\n              parentNamePathList: currentNamePathList,\n              realRouteArr: currentRealRouteArr,\n            }));\n            nextUnhandledLayer = nextUnhandledLayer.concat(wrappedChildren);\n          }\n        }\n        unhandledLayer = nextUnhandledLayer;\n      }\n    });\n    return tmpArr;\n  }\n}\n",
            "properties": [
                {
                    "name": "children",
                    "type": "MenuChildrenItem[]",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "route",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "type",
                    "type": "\"link\" | \"sub\" | \"extLink\" | \"extTabLink\"",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "MenuTag",
            "id": "interface-MenuTag-ceb03882f950c4abd4fc428195c2d9c5",
            "file": "src/app/core/services/menu.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nexport interface MenuTag {\n  color: string; // background color\n  value: string;\n}\n\nexport interface MenuChildrenItem {\n  route: string;\n  name: string;\n  type: 'link' | 'sub' | 'extLink' | 'extTabLink';\n  children?: MenuChildrenItem[];\n}\n\nexport interface Menu {\n  route: string;\n  name: string;\n  type: 'link' | 'sub' | 'extLink' | 'extTabLink';\n  icon: string;\n  label?: MenuTag;\n  badge?: MenuTag;\n  children?: MenuChildrenItem[];\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MenuService {\n  private menu$: BehaviorSubject<Menu[]> = new BehaviorSubject<Menu[]>([]);\n\n  getAll(): Observable<Menu[]> {\n    return this.menu$.asObservable();\n  }\n\n  set(menu: Menu[]): Observable<Menu[]> {\n    this.menu$.next(menu);\n    return this.menu$.asObservable();\n  }\n\n  add(menu: Menu) {\n    const tmpMenu = this.menu$.value;\n    tmpMenu.push(menu);\n    this.menu$.next(tmpMenu);\n  }\n\n  reset() {\n    this.menu$.next([]);\n  }\n\n  // Delete empty values and rebuild route\n  buildRoute(routeArr: string[]): string {\n    let route = '';\n    routeArr.forEach(item => {\n      if (item && item.trim()) {\n        route += '/' + item.replace(/^\\/+|\\/+$/g, '');\n      }\n    });\n    return route;\n  }\n\n  getMenuItemName(routeArr: string[]): string {\n    return this.getMenuLevel(routeArr)[routeArr.length - 1];\n  }\n\n  /** Menu level */\n\n  private isLeafItem(item: MenuChildrenItem): boolean {\n    const cond0 = item.route === undefined;\n    const cond1 = item.children === undefined;\n    const cond2 = !cond1 && item.children.length === 0;\n    return cond0 || cond1 || cond2;\n  }\n\n  // Deep clone object could be jsonized\n  private deepClone(obj: any): any {\n    return JSON.parse(JSON.stringify(obj));\n  }\n\n  // Whether two objects could be jsonized equal\n  private isJsonObjEqual(obj0: any, obj1: any): boolean {\n    return JSON.stringify(obj0) === JSON.stringify(obj1);\n  }\n\n  // Whether routeArr equals realRouteArr (after remove empty route element)\n  private isRouteEqual(routeArr: Array<string>, realRouteArr: Array<string>): boolean {\n    realRouteArr = this.deepClone(realRouteArr);\n    realRouteArr = realRouteArr.filter(r => r !== '');\n    return this.isJsonObjEqual(routeArr, realRouteArr);\n  }\n\n  getMenuLevel(routeArr: string[]): string[] {\n    let tmpArr = [];\n    this.menu$.value.forEach(item => {\n      // breadth first traverse modified\n      let unhandledLayer = [{ item, parentNamePathList: [], realRouteArr: [] }];\n      while (unhandledLayer.length > 0) {\n        let nextUnhandledLayer = [];\n        for (const ele of unhandledLayer) {\n          const eachItem = ele.item;\n          const currentNamePathList = this.deepClone(ele.parentNamePathList).concat(eachItem.name);\n          const currentRealRouteArr = this.deepClone(ele.realRouteArr).concat(eachItem.route);\n          // compare the full Array for expandable\n          if (this.isRouteEqual(routeArr, currentRealRouteArr)) {\n            tmpArr = currentNamePathList;\n            break;\n          }\n          if (!this.isLeafItem(eachItem)) {\n            const wrappedChildren = eachItem.children.map(child => ({\n              item: child,\n              parentNamePathList: currentNamePathList,\n              realRouteArr: currentRealRouteArr,\n            }));\n            nextUnhandledLayer = nextUnhandledLayer.concat(wrappedChildren);\n          }\n        }\n        unhandledLayer = nextUnhandledLayer;\n      }\n    });\n    return tmpArr;\n  }\n}\n",
            "properties": [
                {
                    "name": "color",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PlayerElement",
            "id": "interface-PlayerElement-b7013cfb258b84f80190149a6189e27e",
            "file": "src/app/modules/players/players.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, Input, OnChanges } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\n\n@Component({\n  selector: 'app-players',\n  templateUrl: './players.component.html',\n  styleUrls: ['./players.component.css'],\n  animations: [\n    trigger('detailExpand', [\n      state('collapsed', style({ height: '0px', minHeight: '0' })),\n      state('expanded', style({ height: '*' })),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\n    ]),\n  ],\n})\nexport class PlayersComponent implements OnInit, OnChanges {\n  @Input() players;\n  // doesDataExist = false;\n  columnsToDisplay = ['name', 'position', 'nationality', 'role'];\n  expandedElement: PlayerElement | null;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  ngOnChanges() {\n    // Check if the data exists before using it\n    // if (this.players) {\n    //   this.doesDataExist = true;\n    // }\n  }\n\n  getAge(dateString) {\n    const today = new Date();\n    const birthDate = new Date(dateString);\n    let age = today.getFullYear() - birthDate.getFullYear();\n    const m = today.getMonth() - birthDate.getMonth();\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n      age--;\n    }\n    return age;\n  }\n}\n\nexport interface PlayerElement {\n  name: string;\n  position: number;\n  nationality: number;\n  role: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "nationality",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "position",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "role",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Squad",
            "id": "interface-Squad-cefc21740d5a241bb54550fc0637012d",
            "file": "src/app/core/models/squad.model.ts",
            "type": "interface",
            "sourceCode": "export interface Squad {\n  name: string;\n  id: number;\n  position: string;\n  dateOfBirth: string;\n  countryOfBirth: string;\n  nationality: string;\n  shirtNumber: null;\n  role: string;\n\n}\n",
            "properties": [
                {
                    "name": "countryOfBirth",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "dateOfBirth",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "nationality",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "position",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "role",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "shirtNumber",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Standing",
            "id": "interface-Standing-2049613f059637dcf103dbd5dff195f4",
            "file": "src/app/core/models/standings.model.ts",
            "type": "interface",
            "sourceCode": "export interface IStanding {\n  matchday: number;\n  standings: Standing[];\n  [unusedProperties: string]: any;\n}\n\nexport interface Standing {\n  stage: string;\n  type: string;\n  group: string;\n  table: Table[];\n}\n\nexport interface Table {\n  position: number;\n  team: {\n      id: number;\n      name: string;\n      crestUrl: string;\n  };\n  playedGames: number;\n  won: number;\n  draw: number;\n  lost: number;\n  points: number;\n  goalsFor: number;\n  goalsAgainst: number;\n  goalDifference: number;\n}\n",
            "properties": [
                {
                    "name": "group",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "stage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "table",
                    "type": "Table[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Table",
            "id": "interface-Table-2049613f059637dcf103dbd5dff195f4",
            "file": "src/app/core/models/standings.model.ts",
            "type": "interface",
            "sourceCode": "export interface IStanding {\n  matchday: number;\n  standings: Standing[];\n  [unusedProperties: string]: any;\n}\n\nexport interface Standing {\n  stage: string;\n  type: string;\n  group: string;\n  table: Table[];\n}\n\nexport interface Table {\n  position: number;\n  team: {\n      id: number;\n      name: string;\n      crestUrl: string;\n  };\n  playedGames: number;\n  won: number;\n  draw: number;\n  lost: number;\n  points: number;\n  goalsFor: number;\n  goalsAgainst: number;\n  goalDifference: number;\n}\n",
            "properties": [
                {
                    "name": "draw",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "goalDifference",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "goalsAgainst",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "goalsFor",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "lost",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "playedGames",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "points",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "position",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "team",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "won",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Team",
            "id": "interface-Team-5e9d209ab319341eb86693865ca8be28",
            "file": "src/app/core/models/team.model.ts",
            "type": "interface",
            "sourceCode": "export interface Team {\n  id: number;\n  area: {\n    id: number,\n    name: string\n  };\n  name: string;\n  shortName: string;\n  tla: string;\n  crestUrl: string;\n  address: string;\n  phone: string;\n  website: string;\n  email: string;\n  founded: number;\n  clubColors: string;\n  venue: string;\n  lastUpdated: string;\n}\n\n",
            "properties": [
                {
                    "name": "address",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "area",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "clubColors",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "crestUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "founded",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "lastUpdated",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "phone",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "shortName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "tla",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "venue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "website",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "TeamDetails",
            "id": "interface-TeamDetails-66643179314ce6d167daed8f89f65e9a",
            "file": "src/app/core/models/api.model.ts",
            "type": "interface",
            "sourceCode": "import { Team } from './team.model';\nimport { Squad } from './squad.model';\n// import { Competition } from './competition.model';\nimport { Fixtures } from './matches.model';\n\nexport interface ApiRespone {\n  teams: Clubs;\n  [unusedProperties: string]: any;\n\n}\n\n// interface to get teams in a competion\nexport interface Teams {\n  count: number;\n  filters: any;\n  competition: any;\n  season: any;\n  teams: Team[];\n}\n\nexport interface TeamDetails {\n  id: number;\n  area: {\n    id: number,\n    name: string\n  };\n  name: string;\n  shortName: string;\n  tla: string;\n  crestUrl: string;\n  address: string;\n  phone: string;\n  website: string;\n  email: string;\n  founded: number;\n  clubColors: string;\n  venue: string;\n  lastUpdated: string;\n  squad: Squad[];\n}\n\n// interface to get matches in a competion\n// export interface Match{\n//   filters?: any;\n//   competition?: Competition;\n//   matches: Matches[];\n// }\n\n// export interface Comp {\n//   counts?: any;\n//   filters?: any;\n//   competition?: Competition;\n// }\n\n// export interface Standing {\n//   stage: string;\n//   type: string;\n//   group: string;\n//   table: Team[];\n// }\n\nexport interface Clubs {\n  id: number;\n  position: string;\n  dateOfBirth: string;\n  countryOfBirth: string;\n  nationality: string;\n  shirtNumber: null;\n  role: string;\n  name: string;\n  crestUrl: string;\n  address: string;\n  website: string;\n  email: string;\n  founded: string;\n  clubColors: string;\n  venue: string;\n  squad: Squad[];\n}\n",
            "properties": [
                {
                    "name": "address",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "area",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "clubColors",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "crestUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "founded",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "lastUpdated",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "phone",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "shortName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "squad",
                    "type": "Squad[]",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "tla",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "venue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "website",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Teams",
            "id": "interface-Teams-66643179314ce6d167daed8f89f65e9a",
            "file": "src/app/core/models/api.model.ts",
            "type": "interface",
            "sourceCode": "import { Team } from './team.model';\nimport { Squad } from './squad.model';\n// import { Competition } from './competition.model';\nimport { Fixtures } from './matches.model';\n\nexport interface ApiRespone {\n  teams: Clubs;\n  [unusedProperties: string]: any;\n\n}\n\n// interface to get teams in a competion\nexport interface Teams {\n  count: number;\n  filters: any;\n  competition: any;\n  season: any;\n  teams: Team[];\n}\n\nexport interface TeamDetails {\n  id: number;\n  area: {\n    id: number,\n    name: string\n  };\n  name: string;\n  shortName: string;\n  tla: string;\n  crestUrl: string;\n  address: string;\n  phone: string;\n  website: string;\n  email: string;\n  founded: number;\n  clubColors: string;\n  venue: string;\n  lastUpdated: string;\n  squad: Squad[];\n}\n\n// interface to get matches in a competion\n// export interface Match{\n//   filters?: any;\n//   competition?: Competition;\n//   matches: Matches[];\n// }\n\n// export interface Comp {\n//   counts?: any;\n//   filters?: any;\n//   competition?: Competition;\n// }\n\n// export interface Standing {\n//   stage: string;\n//   type: string;\n//   group: string;\n//   table: Team[];\n// }\n\nexport interface Clubs {\n  id: number;\n  position: string;\n  dateOfBirth: string;\n  countryOfBirth: string;\n  nationality: string;\n  shirtNumber: null;\n  role: string;\n  name: string;\n  crestUrl: string;\n  address: string;\n  website: string;\n  email: string;\n  founded: string;\n  clubColors: string;\n  venue: string;\n  squad: Squad[];\n}\n",
            "properties": [
                {
                    "name": "competition",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "count",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "filters",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "season",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "teams",
                    "type": "Team[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-d89d6343b0819f73b3924ed177116c90",
            "file": "src/app/core/services/settings.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { AppSettings, defaults } from '../settings';\n\nexport const USER_KEY = 'usr';\n\nexport interface User {\n  id: number;\n  name?: string;\n  email?: string;\n  avatar?: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SettingsService {\n  constructor() { }\n\n  private options = defaults;\n\n  get notify(): Observable<any> {\n    return this.notify$.asObservable();\n  }\n  private notify$ = new BehaviorSubject<any>({});\n\n  setLayout(options?: AppSettings): AppSettings {\n    this.options = Object.assign(defaults, options);\n    return this.options;\n  }\n\n  setNavState(type: string, value: boolean) {\n    this.notify$.next({ type, value } as any);\n  }\n\n  getOptions(): AppSettings {\n    return this.options;\n  }\n}\n",
            "properties": [
                {
                    "name": "avatar",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "email",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "CompetitionService",
            "id": "injectable-CompetitionService-5bfbe6389989dfe342ae5d8f5cf9be06",
            "file": "src/app/shared/services/competition.service.ts",
            "properties": [
                {
                    "name": "_competition",
                    "defaultValue": "new BehaviorSubject<Competition>({} as any)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "competition",
                    "defaultValue": "this._competition.asObservable()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "dataStore",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getMatch",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "loadAllCompetition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Subject, BehaviorSubject, Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { environment } from '@env/environment';\nimport { Competition } from '@core/models/matches.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CompetitionService {\n  private _competition = new BehaviorSubject<Competition>({} as any);\n  private dataStore;\n  readonly competition = this._competition.asObservable();\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  getMatch() {\n    return this._competition.asObservable();\n  }\n\n  loadAllCompetition() {\n    this.http.get<Competition>(`${environment.apiURL}competitions/`).subscribe(\n      data => {\n        this.dataStore = data;\n        this._competition.next(data);\n      },\n      error => console.log('Could not load todos.')\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DataTransferService",
            "id": "injectable-DataTransferService-d179056beea972a4c415213fb6023a06",
            "file": "src/app/shared/services/data-transfer.service.ts",
            "properties": [
                {
                    "name": "data",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clearData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "getData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14
                },
                {
                    "name": "setData",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class DataTransferService {\n\n  constructor() { }\n\n  private data;\n\n  setData(data) {\n    this.data = data;\n  }\n\n  getData() {\n    const temp = this.data;\n    this.clearData();\n    return temp;\n  }\n\n  clearData() {\n    this.data = undefined;\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 4
            },
            "type": "injectable"
        },
        {
            "name": "MatchService",
            "id": "injectable-MatchService-c957dc9c2f0573f6aefc3091feb21027",
            "file": "src/app/shared/services/match.service.ts",
            "properties": [
                {
                    "name": "_matches",
                    "defaultValue": "new BehaviorSubject<Array<Fixtures>>([])",
                    "type": "Subject<Array<Fixtures>>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "matches",
                    "defaultValue": "this._matches.asObservable()",
                    "type": "Observable<Array<Fixtures>>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 79,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchMatches",
                    "args": [
                        {
                            "name": "leagueId",
                            "type": ""
                        },
                        {
                            "name": "matchdayId",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "leagueId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "matchdayId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 70,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFixtures",
                    "args": [
                        {
                            "name": "leagueId",
                            "type": ""
                        },
                        {
                            "name": "matchdayId",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Imatches>",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "leagueId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "matchdayId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMatch",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "operation",
                            "type": "string",
                            "defaultValue": "'operation'"
                        },
                        {
                            "name": "result",
                            "type": "T",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "(error: any) => any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 56,
                    "description": "<p>Handle Http operation that failed.\nLet the app continue.</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1803,
                                "end": 1812,
                                "flags": 0,
                                "escapedText": "operation"
                            },
                            "type": "string",
                            "defaultValue": "'operation'",
                            "tagName": {
                                "pos": 1797,
                                "end": 1802,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>name of the operation that failed</li>\n</ul>\n"
                        },
                        {
                            "name": {
                                "pos": 1861,
                                "end": 1867,
                                "flags": 0,
                                "escapedText": "result"
                            },
                            "type": "T",
                            "optional": true,
                            "tagName": {
                                "pos": 1855,
                                "end": 1860,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>optional value to return as the observable result</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "post",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "data",
                            "type": "any"
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 73,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "put",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "data",
                            "type": "any"
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 76,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Subject, BehaviorSubject, Observable, of } from 'rxjs';\nimport 'rxjs/add/operator/map';\nimport { environment } from '@env/environment';\n// import { Match } from '@core/models/api.model';\nimport { Imatches, Fixtures } from '@core/models/matches.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MatchService {\n  private _matches: Subject<Array<Fixtures>> = new BehaviorSubject<Array<Fixtures>>([]);\n  // private _matches = new BehaviorSubject<Array<Matches>>([]);\n  // readonly matches = this._matches.asObservable();\n  public readonly matches: Observable<Array<Fixtures>> = this._matches.asObservable();\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  getMatch() {\n    return this._matches.asObservable();\n  }\n\n  getFixtures(leagueId, matchdayId): Observable<Imatches> {\n    return this.http.get(`${environment.apiURL}competitions/${leagueId}/matches/?matchday=${matchdayId}`)\n      .map(res => res as Imatches);\n  }\n\n  fetchMatches(leagueId, matchdayId) {\n    this.http.get(`${environment.apiURL}competitions/${leagueId}/matches/?matchday=${matchdayId}`).subscribe(\n      (data: Imatches) => {\n        this._matches.next(data.matches);\n      },\n      error => console.log('Could not load todos.')\n    );\n  }\n  // return teams as an Observable\n  // public getMatches(leagueId, matchdayId): Observable<Match> {\n  //   return this.http.get<Match>(`${environment.apiURL}competitions/${leagueId}/matches/?matchday=${matchdayId}`)\n  //     .pipe(\n  //       tap(_ => console.log('fetched matches')),\n  //       catchError(this.handleError<Match>('getMatches'))\n  //     );\n  // }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      console.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  public get(url: string, options?: any) {\n    return this.http.get(url, options);\n  }\n  public post(url: string, data: any, options?: any) {\n    return this.http.post(url, data, options);\n  }\n  public put(url: string, data: any, options?: any) {\n    return this.http.put(url, data, options);\n  }\n  public delete(url: string, options?: any) {\n    return this.http.delete(url, options);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MenuService",
            "id": "injectable-MenuService-ceb03882f950c4abd4fc428195c2d9c5",
            "file": "src/app/core/services/menu.service.ts",
            "properties": [
                {
                    "name": "menu$",
                    "defaultValue": "new BehaviorSubject<Menu[]>([])",
                    "type": "BehaviorSubject<Menu[]>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "menu",
                            "type": "Menu"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "menu",
                            "type": "Menu",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "buildRoute",
                    "args": [
                        {
                            "name": "routeArr",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "routeArr",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deepClone",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 76,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Menu[]>",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "getMenuItemName",
                    "args": [
                        {
                            "name": "routeArr",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "jsdoctags": [
                        {
                            "name": "routeArr",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMenuLevel",
                    "args": [
                        {
                            "name": "routeArr",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "routeArr",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isJsonObjEqual",
                    "args": [
                        {
                            "name": "obj0",
                            "type": "any"
                        },
                        {
                            "name": "obj1",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj0",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "obj1",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isLeafItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "MenuChildrenItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 68,
                    "description": "<p>Menu level </p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "MenuChildrenItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isRouteEqual",
                    "args": [
                        {
                            "name": "routeArr",
                            "type": "Array<string>"
                        },
                        {
                            "name": "realRouteArr",
                            "type": "Array<string>"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 86,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "routeArr",
                            "type": "Array<string>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "realRouteArr",
                            "type": "Array<string>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "set",
                    "args": [
                        {
                            "name": "menu",
                            "type": "Menu[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Menu[]>",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "menu",
                            "type": "Menu[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nexport interface MenuTag {\n  color: string; // background color\n  value: string;\n}\n\nexport interface MenuChildrenItem {\n  route: string;\n  name: string;\n  type: 'link' | 'sub' | 'extLink' | 'extTabLink';\n  children?: MenuChildrenItem[];\n}\n\nexport interface Menu {\n  route: string;\n  name: string;\n  type: 'link' | 'sub' | 'extLink' | 'extTabLink';\n  icon: string;\n  label?: MenuTag;\n  badge?: MenuTag;\n  children?: MenuChildrenItem[];\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MenuService {\n  private menu$: BehaviorSubject<Menu[]> = new BehaviorSubject<Menu[]>([]);\n\n  getAll(): Observable<Menu[]> {\n    return this.menu$.asObservable();\n  }\n\n  set(menu: Menu[]): Observable<Menu[]> {\n    this.menu$.next(menu);\n    return this.menu$.asObservable();\n  }\n\n  add(menu: Menu) {\n    const tmpMenu = this.menu$.value;\n    tmpMenu.push(menu);\n    this.menu$.next(tmpMenu);\n  }\n\n  reset() {\n    this.menu$.next([]);\n  }\n\n  // Delete empty values and rebuild route\n  buildRoute(routeArr: string[]): string {\n    let route = '';\n    routeArr.forEach(item => {\n      if (item && item.trim()) {\n        route += '/' + item.replace(/^\\/+|\\/+$/g, '');\n      }\n    });\n    return route;\n  }\n\n  getMenuItemName(routeArr: string[]): string {\n    return this.getMenuLevel(routeArr)[routeArr.length - 1];\n  }\n\n  /** Menu level */\n\n  private isLeafItem(item: MenuChildrenItem): boolean {\n    const cond0 = item.route === undefined;\n    const cond1 = item.children === undefined;\n    const cond2 = !cond1 && item.children.length === 0;\n    return cond0 || cond1 || cond2;\n  }\n\n  // Deep clone object could be jsonized\n  private deepClone(obj: any): any {\n    return JSON.parse(JSON.stringify(obj));\n  }\n\n  // Whether two objects could be jsonized equal\n  private isJsonObjEqual(obj0: any, obj1: any): boolean {\n    return JSON.stringify(obj0) === JSON.stringify(obj1);\n  }\n\n  // Whether routeArr equals realRouteArr (after remove empty route element)\n  private isRouteEqual(routeArr: Array<string>, realRouteArr: Array<string>): boolean {\n    realRouteArr = this.deepClone(realRouteArr);\n    realRouteArr = realRouteArr.filter(r => r !== '');\n    return this.isJsonObjEqual(routeArr, realRouteArr);\n  }\n\n  getMenuLevel(routeArr: string[]): string[] {\n    let tmpArr = [];\n    this.menu$.value.forEach(item => {\n      // breadth first traverse modified\n      let unhandledLayer = [{ item, parentNamePathList: [], realRouteArr: [] }];\n      while (unhandledLayer.length > 0) {\n        let nextUnhandledLayer = [];\n        for (const ele of unhandledLayer) {\n          const eachItem = ele.item;\n          const currentNamePathList = this.deepClone(ele.parentNamePathList).concat(eachItem.name);\n          const currentRealRouteArr = this.deepClone(ele.realRouteArr).concat(eachItem.route);\n          // compare the full Array for expandable\n          if (this.isRouteEqual(routeArr, currentRealRouteArr)) {\n            tmpArr = currentNamePathList;\n            break;\n          }\n          if (!this.isLeafItem(eachItem)) {\n            const wrappedChildren = eachItem.children.map(child => ({\n              item: child,\n              parentNamePathList: currentNamePathList,\n              realRouteArr: currentRealRouteArr,\n            }));\n            nextUnhandledLayer = nextUnhandledLayer.concat(wrappedChildren);\n          }\n        }\n        unhandledLayer = nextUnhandledLayer;\n      }\n    });\n    return tmpArr;\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "PreloaderService",
            "id": "injectable-PreloaderService-fa6a0ad4c1feca0a324a2ff029f9515b",
            "file": "src/app/core/services/preloader.service.ts",
            "properties": [
                {
                    "name": "selector",
                    "defaultValue": "'globalLoader'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getElement",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PreloaderService {\n  private selector = 'globalLoader';\n\n  constructor() {}\n\n  private getElement() {\n    return document.getElementById(this.selector);\n  }\n\n  hide() {\n    const el = this.getElement();\n    if (el) {\n      el.addEventListener('transitionend', () => {\n        el.className = 'global-loader-hidden';\n      });\n\n      if (!el.className.includes('global-loader-hidden')) {\n        el.className += ' global-loader-fade-in';\n      }\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 7
            },
            "type": "injectable"
        },
        {
            "name": "ScoreService",
            "id": "injectable-ScoreService-c5f192cef0291c58c958aa9ac981f4c9",
            "file": "src/app/shared/services/scores.service.ts",
            "properties": [
                {
                    "name": "leagues",
                    "defaultValue": "{\n    BL1: 'BL1',\n    PL: 'PL',\n    SA: 'SA',\n    PD: 'PD'\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112,
                        132
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getFixtures",
                    "args": [
                        {
                            "name": "leagueId",
                            "type": "number"
                        },
                        {
                            "name": "matchDay",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Imatches>",
                    "typeParameters": [],
                    "line": 26,
                    "jsdoctags": [
                        {
                            "name": "leagueId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "matchDay",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTable",
                    "args": [
                        {
                            "name": "league",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IStanding>",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "league",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\n\nimport { environment } from '@env/environment';\nimport { Imatches } from '@core/models/matches.model';\nimport { IStanding } from '@core/models/standings.model';\n\n@Injectable()\nexport class ScoreService {\n\n  private readonly leagues = {\n    BL1: 'BL1',\n    PL: 'PL',\n    SA: 'SA',\n    PD: 'PD'\n  };\n\n  constructor(private http: HttpClient) { }\n\n  getTable(league: string): Observable<IStanding> {\n    return this.http.get(`${environment.apiURL}competitions/${this.leagues[league]}/standings`).map(res => res as IStanding);\n  }\n\n  getFixtures(leagueId: number, matchDay: number): Observable<Imatches> {\n    return this.http.get(`${environment.apiURL}competitions/${leagueId}/matches/?matchday=${matchDay}`)\n      .map(res => res as Imatches);\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SettingsService",
            "id": "injectable-SettingsService-d89d6343b0819f73b3924ed177116c90",
            "file": "src/app/core/services/settings.service.ts",
            "properties": [
                {
                    "name": "notify$",
                    "defaultValue": "new BehaviorSubject<any>({})",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "options",
                    "defaultValue": "defaults",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "AppSettings",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "setLayout",
                    "args": [
                        {
                            "name": "options",
                            "type": "AppSettings",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "AppSettings",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "AppSettings",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setNavState",
                    "args": [
                        {
                            "name": "type",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { AppSettings, defaults } from '../settings';\n\nexport const USER_KEY = 'usr';\n\nexport interface User {\n  id: number;\n  name?: string;\n  email?: string;\n  avatar?: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SettingsService {\n  constructor() { }\n\n  private options = defaults;\n\n  get notify(): Observable<any> {\n    return this.notify$.asObservable();\n  }\n  private notify$ = new BehaviorSubject<any>({});\n\n  setLayout(options?: AppSettings): AppSettings {\n    this.options = Object.assign(defaults, options);\n    return this.options;\n  }\n\n  setNavState(type: string, value: boolean) {\n    this.notify$.next({ type, value } as any);\n  }\n\n  getOptions(): AppSettings {\n    return this.options;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 17
            },
            "accessors": {
                "notify": {
                    "name": "notify",
                    "getSignature": {
                        "name": "notify",
                        "type": "",
                        "returnType": "Observable<any>",
                        "line": 22
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "SpinnerService",
            "id": "injectable-SpinnerService-030f966b837c994abdabe16fee3a4ec9",
            "file": "src/app/core/services/spinner.service.ts",
            "properties": [
                {
                    "name": "visibility",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SpinnerService {\n\n  visibility: BehaviorSubject<boolean>;\n\n  constructor() {\n    this.visibility = new BehaviorSubject(false);\n  }\n\n  show() {\n    this.visibility.next(true);\n  }\n\n  hide() {\n    this.visibility.next(false);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "StandingService",
            "id": "injectable-StandingService-c1628cd961ab97e9b81289adc405cb89",
            "file": "src/app/shared/services/standing.service.ts",
            "properties": [
                {
                    "name": "_teams",
                    "defaultValue": "new BehaviorSubject<Array<Table>>([])",
                    "type": "Subject<Array<Table>>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "leagues",
                    "defaultValue": "{\n    BL1: 'BL1',\n    PL: 'PL',\n    SA: 'SA',\n    PD: 'PD'\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "teams",
                    "defaultValue": "this._teams.asObservable()",
                    "type": "Observable<Array<Table>>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [
                {
                    "name": "fetchStandings",
                    "args": [
                        {
                            "name": "league",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "league",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Subject, BehaviorSubject, Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\n\nimport { environment } from '@env/environment';\nimport { IStanding, Table } from '@core/models/standings.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StandingService {\n  private _teams: Subject<Array<Table>> = new BehaviorSubject<Array<Table>>([]);\n  public readonly teams: Observable<Array<Table>> = this._teams.asObservable();\n\n  private readonly leagues = {\n    BL1: 'BL1',\n    PL: 'PL',\n    SA: 'SA',\n    PD: 'PD'\n  };\n\n  constructor(private http: HttpClient) { }\n\n  fetchStandings(league: string) {\n    this.http.get(`${environment.apiURL}competitions/${this.leagues[league]}/standings`).subscribe((response: IStanding) => {\n      this._teams.next(response.standings[0].table);\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StartupService",
            "id": "injectable-StartupService-ae4b8c825fac327d4f2ccc4b998d8100",
            "file": "src/app/core/services/startup.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "load",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { MenuService } from './menu.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StartupService {\n  constructor(\n    private menu: MenuService,\n    private http: HttpClient,\n  ) {}\n\n  load(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.http\n        .get('assets/data/menu.json?_t=' + Date.now())\n        .pipe(\n          catchError(res => {\n            resolve(null);\n            return throwError(res);\n          })\n        )\n        .subscribe(\n          (res: any) => {\n            this.menu.set(res.menu);\n          },\n          () => reject(),\n          () => resolve(null)\n        );\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "menu",
                        "type": "MenuService"
                    },
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "menu",
                        "type": "MenuService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TeamService",
            "id": "injectable-TeamService-b6e02e1e420b65618db8569c8d23c61e",
            "file": "src/app/shared/services/teams.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getTeam",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<TeamDetails>",
                    "typeParameters": [],
                    "line": 30,
                    "description": "<p>GET team by id </p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTeams",
                    "args": [
                        {
                            "name": "leagueId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Teams>",
                    "typeParameters": [],
                    "line": 20,
                    "jsdoctags": [
                        {
                            "name": "leagueId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "operation",
                            "type": "string",
                            "defaultValue": "'operation'"
                        },
                        {
                            "name": "result",
                            "type": "T",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "(error: any) => any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 45,
                    "description": "<p>Handle Http operation that failed.\nLet the app continue.</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1164,
                                "end": 1173,
                                "flags": 0,
                                "escapedText": "operation"
                            },
                            "type": "string",
                            "defaultValue": "'operation'",
                            "tagName": {
                                "pos": 1158,
                                "end": 1163,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>name of the operation that failed</li>\n</ul>\n"
                        },
                        {
                            "name": {
                                "pos": 1222,
                                "end": 1228,
                                "flags": 0,
                                "escapedText": "result"
                            },
                            "type": "T",
                            "optional": true,
                            "tagName": {
                                "pos": 1216,
                                "end": 1221,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>optional value to return as the observable result</li>\n</ul>\n"
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { environment } from '@env/environment';\nimport { Teams, TeamDetails } from '@core/models/api.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TeamService{\n  constructor(\n    private http: HttpClient\n  ){}\n\n  // return teams as an Observable\n  getTeams(leagueId: number): Observable<Teams> {\n    const url = `${environment.apiURL}competitions/${leagueId}/teams`;\n    return this.http.get<Teams>(url)\n      .pipe(\n        tap(_ => console.log('fetched teams')),\n      catchError(this.handleError<Teams>('getTeams'))\n      );\n  }\n\n  /** GET team by id */\n  getTeam(id: number): Observable<TeamDetails> {\n    const url = `${environment.apiURL}teams/${id}`;\n    return this.http.get<TeamDetails>(url).pipe(\n      tap(_ => console.log(`fetched team id=${id}`)),\n      catchError(this.handleError<TeamDetails>(`getTeam id=${id}`))\n    );\n  }\n\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      console.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "HttpErrorInterceptor",
            "id": "class-HttpErrorInterceptor-ab8191e13b79c582560b39349c8f256e",
            "file": "src/app/core/interceptors/error-handler.interceptor.ts",
            "type": "class",
            "sourceCode": "import { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nexport class HttpErrorInterceptor implements HttpInterceptor {\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(request)\n      .pipe(\n        catchError((error: HttpErrorResponse) => {\n          let errorMsg = '';\n          if (error.error instanceof ErrorEvent) {\n            console.log('this is client side error');\n            errorMsg = `Error: ${error.error.message}`;\n          }\n          else {\n            console.log('this is server side error');\n            errorMsg = `Error Code: ${error.status},  Message: ${error.message}`;\n          }\n          console.log(errorMsg);\n          return throwError(errorMsg);\n        })\n      );\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>"
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 6,
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "HttpInterceptor"
            ]
        },
        {
            "name": "Imatches",
            "id": "class-Imatches-b06bc653e773322c15c6211bfb732f19",
            "file": "src/app/core/models/matches.model.ts",
            "type": "class",
            "sourceCode": "export class Imatches {\n  count: number;\n  competition?: Competition;\n  matches: Fixtures[];\n  [unusedProperties: string]: any;\n}\n\n// export interface Fixtures {\n//   count: number;\n//   competition?: Competition;\n//   matches: Matches[];\n// }\n\nexport interface Competition {\n  id: number;\n  area: {\n    id: number;\n    name: string\n  };\n  name: string;\n  code: string;\n  plan: string;\n  lastUpdated: string;\n}\n\nexport interface Fixtures{\n  id: number;\n  awayTeam: {\n    id: number,\n    name: string\n  };\n  homeTeam: {\n    id: number,\n    name: string\n  };\n  lastUpdated: string;\n  matchday: number;\n  season: {\n    id: number,\n    startDate: string,\n    endDate: string,\n    currentMatchday: number\n  };\n  score: {\n    winner: string;\n    duration: string;\n    fullTime: {\n      homeTeam: number,\n        awayTeam: number\n    },\n    halfTime: {\n      homeTeam: number,\n        awayTeam: number\n    }\n  };\n  stage: string;\n  status: string;\n  utcDate: string;\n}\n// export interface Matches {\n//   id: number;\n//   season: {\n//     id: number,\n//     startDate: string,\n//     endDate: string,\n//     currentMatchday: number\n//   };\n//   utcDate: string;\n//   status: string;\n//   matchday: number;\n//   stage: string;\n//   group: string;\n//   lastUpdated: string;\n//   score: {\n//     winner: string;\n//     duration: string;\n//     fullTime: {\n//       homeTeam: number,\n//       awayTeam: number\n//     },\n//     halfTime: {\n//       homeTeam: number,\n//       awayTeam: number\n//     }\n//   };\n//   homeTeam: {\n//     id: number,\n//     name: string\n//   };\n//   awayTeam: {\n//     id: number,\n//     name: string\n//   };\n// }\n\n",
            "properties": [
                {
                    "name": "competition",
                    "type": "Competition",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "count",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "matches",
                    "type": "Fixtures[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-b06bc653e773322c15c6211bfb732f19",
                    "args": [
                        {
                            "name": "unusedProperties",
                            "type": "string"
                        }
                    ],
                    "returnType": "any",
                    "line": 4
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "AccordionAnchorDirective",
            "id": "directive-AccordionAnchorDirective-87b58f7b090a5256412a7ce5a98298dc",
            "file": "src/app/components/sidemenu/accordionanchor.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, HostListener, Inject } from '@angular/core';\n\nimport { AccordionItemDirective } from './accordionItem.directive';\n\n@Directive({\n  selector: '[appNavAccordionToggle]',\n})\nexport class AccordionAnchorDirective {\n  protected navlink: AccordionItemDirective;\n\n  constructor(@Inject(AccordionItemDirective) navlink: AccordionItemDirective) {\n    this.navlink = navlink;\n  }\n\n  @HostListener('click', ['$event'])\n  onClick(e: MouseEvent) {\n    this.navlink.toggle();\n  }\n}\n",
            "selector": "[appNavAccordionToggle]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "e",
                            "type": "MouseEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 16
                }
            ],
            "propertiesClass": [
                {
                    "name": "navlink",
                    "type": "AccordionItemDirective",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "navlink",
                        "type": "AccordionItemDirective"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "navlink",
                        "type": "AccordionItemDirective",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "AccordionDirective",
            "id": "directive-AccordionDirective-f4e807c5d56dec6fc563e0c980af2692",
            "file": "src/app/components/sidemenu/accordion.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { filter } from 'rxjs/operators';\nimport { AccordionItemDirective } from './accordionItem.directive';\n\n@Directive({\n  selector: '[appNavAccordion]',\n})\nexport class AccordionDirective {\n  protected navlinks: Array<AccordionItemDirective> = [];\n\n  constructor(private router: Router) {\n    // Fix: `ERROR Error: ExpressionChangedAfterItHasBeenCheckedError:\n    // Expression has changed after it was checked`.\n    setTimeout(() => this.checkOpenLinks());\n\n    this.router.events\n      .pipe(filter(event => event instanceof NavigationEnd))\n      .subscribe(() => this.checkOpenLinks());\n  }\n\n  addLink(link: AccordionItemDirective): void {\n    this.navlinks.push(link);\n  }\n\n  closeOtherLinks(openLink: AccordionItemDirective): void {\n    this.navlinks.forEach((link: AccordionItemDirective) => {\n      if (link !== openLink) {\n        link.open = false;\n      }\n    });\n  }\n\n  removeGroup(link: AccordionItemDirective): void {\n    const index = this.navlinks.indexOf(link);\n    if (index !== -1) {\n      this.navlinks.splice(index, 1);\n    }\n  }\n\n  checkOpenLinks() {\n    this.navlinks.forEach((link: AccordionItemDirective) => {\n      if (link.group) {\n        if (this.router.url.split('/').includes(link.group)) {\n          link.open = true;\n          this.closeOtherLinks(link);\n        }\n      }\n    });\n  }\n}\n",
            "selector": "[appNavAccordion]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "navlinks",
                    "defaultValue": "[]",
                    "type": "Array<AccordionItemDirective>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "AccordionItemDirective"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "AccordionItemDirective",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkOpenLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "closeOtherLinks",
                    "args": [
                        {
                            "name": "openLink",
                            "type": "AccordionItemDirective"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "jsdoctags": [
                        {
                            "name": "openLink",
                            "type": "AccordionItemDirective",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeGroup",
                    "args": [
                        {
                            "name": "link",
                            "type": "AccordionItemDirective"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "AccordionItemDirective",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "AccordionItemDirective",
            "id": "directive-AccordionItemDirective-7663161af3bdad2ed5d115e1d7b04ae3",
            "file": "src/app/components/sidemenu/accordionItem.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, HostBinding, Inject, Input, OnInit, OnDestroy } from '@angular/core';\n\nimport { AccordionDirective } from './accordion.directive';\n\n@Directive({\n  selector: '[appNavAccordionItem]',\n})\nexport class AccordionItemDirective implements OnInit, OnDestroy {\n  protected OPEN = false;\n  protected nav: AccordionDirective;\n\n  @Input() group: any;\n  @Input() type: 'link' | 'sub' | 'extLink' | 'extTabLink';\n\n  @HostBinding('class.open')\n  @Input()\n  get open(): boolean {\n    return this.OPEN;\n  }\n  set open(value: boolean) {\n    // Only sub menu can be open\n    this.OPEN = this.type === 'sub' && value;\n    if (value) {\n      this.nav.closeOtherLinks(this);\n    }\n  }\n\n  constructor(@Inject(AccordionDirective) nav: AccordionDirective) {\n    this.nav = nav;\n  }\n\n  ngOnInit(): any {\n    this.nav.addLink(this);\n  }\n\n  ngOnDestroy(): any {\n    this.nav.removeGroup(this);\n  }\n\n  toggle(): any {\n    this.open = !this.open;\n  }\n}\n",
            "selector": "[appNavAccordionItem]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "group",
                    "line": 12,
                    "type": "any"
                },
                {
                    "name": "open",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "type",
                    "line": 13,
                    "type": "\"link\" | \"sub\" | \"extLink\" | \"extTabLink\""
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "nav",
                    "type": "AccordionDirective",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "OPEN",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 40
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "nav",
                        "type": "AccordionDirective"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "nav",
                        "type": "AccordionDirective",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "open": {
                    "name": "open",
                    "setSignature": {
                        "name": "open",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 20,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "AdminLayoutComponent",
            "id": "component-AdminLayoutComponent-457b1d2d6e69bb3d30fc5d1a10cad8fa",
            "file": "src/app/shared/layout/admin-layout.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-admin-layout",
            "styleUrls": [
                "./admin-layout.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./admin-layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "type": "MatSidenavContent",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'content', {static: true}"
                        }
                    ]
                },
                {
                    "name": "isCollapsedWidthFixed",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "isContentWidthFixed",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "isMobileScreen",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "layoutChangesSubscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "options",
                    "defaultValue": "this.settings.getOptions()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "sidenav",
                    "type": "MatSidenav",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'sidenav', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72
                },
                {
                    "name": "resetCollapsedState",
                    "args": [
                        {
                            "name": "timer",
                            "type": "number",
                            "defaultValue": "400"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "jsdoctags": [
                        {
                            "name": "timer",
                            "type": "number",
                            "defaultValue": "400",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sidenavCloseStart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92
                },
                {
                    "name": "sidenavOpenedChange",
                    "args": [
                        {
                            "name": "isOpened",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "jsdoctags": [
                        {
                            "name": "isOpened",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleCollapsed",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80
                }
            ],
            "hostBindings": [
                {
                    "name": "class.matero-content-width-fix",
                    "line": 38
                },
                {
                    "name": "class.matero-sidenav-collapsed-fix",
                    "line": 48
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ViewChild,\n  HostBinding,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { BreakpointObserver } from '@angular/cdk/layout';\nimport { MatSidenav, MatSidenavContent } from '@angular/material/sidenav';\n\nimport { SettingsService } from '@core';\n\nconst MOBILE_MEDIAQUERY = 'screen and (max-width: 599px)';\nconst TABLET_MEDIAQUERY = 'screen and (min-width: 600px) and (max-width: 959px)';\nconst MONITOR_MEDIAQUERY = 'screen and (min-width: 960px)';\n\n@Component({\n  selector: 'app-admin-layout',\n  templateUrl: './admin-layout.component.html',\n  styleUrls: ['./admin-layout.component.css'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AdminLayoutComponent implements OnInit, OnDestroy {\n  @ViewChild('sidenav', { static: true }) sidenav: MatSidenav;\n  @ViewChild('content', { static: true }) content: MatSidenavContent;\n\n  options = this.settings.getOptions();\n\n  private layoutChangesSubscription: Subscription;\n\n  get isOver(): boolean {\n    return this.isMobileScreen;\n  }\n  private isMobileScreen = false;\n\n  @HostBinding('class.matero-content-width-fix') get contentWidthFix() {\n    return (\n      this.isContentWidthFixed &&\n      this.options.navPos === 'side' &&\n      this.options.sidenavOpened &&\n      !this.isOver\n    );\n  }\n  private isContentWidthFixed = true;\n\n  @HostBinding('class.matero-sidenav-collapsed-fix') get collapsedWidthFix() {\n    return (\n      this.isCollapsedWidthFixed &&\n      (this.options.navPos === 'top' || (this.options.sidenavOpened && this.isOver))\n    );\n  }\n  private isCollapsedWidthFixed = true;\n\n  constructor(\n    private breakpointObserver: BreakpointObserver,\n    private settings: SettingsService,\n  ) {\n    this.layoutChangesSubscription = this.breakpointObserver\n      .observe([MOBILE_MEDIAQUERY, TABLET_MEDIAQUERY, MONITOR_MEDIAQUERY])\n      .subscribe(state => {\n        // SidenavOpened must be reset true when layout changes\n        this.options.sidenavOpened = true;\n\n        this.isMobileScreen = state.breakpoints[MOBILE_MEDIAQUERY];\n        this.options.sidenavCollapsed = state.breakpoints[TABLET_MEDIAQUERY];\n        this.isContentWidthFixed = state.breakpoints[MONITOR_MEDIAQUERY];\n      });\n  }\n\n  ngOnInit() {\n    setTimeout(() => (this.isContentWidthFixed = this.isCollapsedWidthFixed = false));\n  }\n\n  ngOnDestroy() {\n    this.layoutChangesSubscription.unsubscribe();\n  }\n\n  toggleCollapsed() {\n    this.options.sidenavCollapsed = !this.options.sidenavCollapsed;\n    this.resetCollapsedState();\n  }\n\n  resetCollapsedState(timer = 400) {\n    // TODO: Trigger when transition end\n    setTimeout(() => {\n      this.settings.setNavState('collapsed', this.options.sidenavCollapsed);\n    }, timer);\n  }\n\n  sidenavCloseStart() {\n    this.isContentWidthFixed = false;\n  }\n\n  sidenavOpenedChange(isOpened: boolean) {\n    this.options.sidenavOpened = isOpened;\n    this.settings.setNavState('opened', isOpened);\n\n    this.isCollapsedWidthFixed = !this.isOver;\n    this.resetCollapsedState();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": " .matero-container-wrap,\n .matero-container {\n   height: 100%;\n }\n\n .matero-content {\n   position: relative;\n   padding: 16px;\n }\n\n .matero-sidenav {\n   position: absolute;\n   overflow-x: hidden;\n   transition: width .4s cubic-bezier(.25, .8, .25, 1);\n   box-shadow: 0 3px 1px -2px rgb(0 0 0 / 20%),\n   0 2px 2px 0 rgb(0 0 0 / 14%),\n   0 1px 5px 0 rgb(0 0 0 / 12%)\n }\n\n .matero-sidenav.mat-drawer-side {\n   border-width: 0;\n }\n\n .matero-header-above .matero-container {\n   height: calc(100% - 64px) !important;\n }\n\n .matero-header-above .matero-sidebar-main {\n   height: 100% !important;\n }\n\n .matero-sidenav-collapsed .matero-sidenav,\n .matero-sidenav-collapsed-fix .matero-sidenav {\n   width: 50px;\n }\n\n .matero-sidenav-collapsed .matero-sidenav .menu-name,\n .matero-sidenav-collapsed-fix .matero-sidenav .menu-name,\n .matero-sidenav-collapsed .matero-sidenav .menu-label,\n .matero-sidenav-collapsed-fix .matero-sidenav .menu-label,\n .matero-sidenav-collapsed .matero-sidenav .menu-badge,\n .matero-sidenav-collapsed-fix .matero-sidenav .menu-badge,\n .matero-sidenav-collapsed .matero-sidenav .menu-caret,\n .matero-sidenav-collapsed-fix .matero-sidenav .menu-caret,\n .matero-sidenav-collapsed .matero-sidenav .matero-user-panel-name,\n .matero-sidenav-collapsed-fix .matero-sidenav .matero-user-panel-name,\n .matero-sidenav-collapsed .matero-sidenav .matero-user-panel-email,\n .matero-sidenav-collapsed-fix .matero-sidenav .matero-user-panel-email,\n .matero-sidenav-collapsed .matero-sidenav .matero-user-panel-icons,\n .matero-sidenav-collapsed-fix .matero-sidenav .matero-user-panel-icons {\n   opacity: 0;\n }\n\n .matero-sidenav-collapsed .matero-sidenav .matero-user-panel-avatar,\n .matero-sidenav-collapsed-fix .matero-sidenav .matero-user-panel-avatar {\n   transform: scale(0.5);\n }\n\n .matero-sidenav-collapsed .matero-sidenav:hover,\n .matero-sidenav-collapsed-fix .matero-sidenav:hover {\n   width: 240px;\n }\n\n .matero-sidenav-collapsed .matero-sidenav:hover .menu-name,\n .matero-sidenav-collapsed-fix .matero-sidenav:hover .menu-name,\n .matero-sidenav-collapsed .matero-sidenav:hover .menu-label,\n .matero-sidenav-collapsed-fix .matero-sidenav:hover .menu-label,\n .matero-sidenav-collapsed .matero-sidenav:hover .menu-badge,\n .matero-sidenav-collapsed-fix .matero-sidenav:hover .menu-badge,\n .matero-sidenav-collapsed .matero-sidenav:hover .menu-caret,\n .matero-sidenav-collapsed-fix .matero-sidenav:hover .menu-caret,\n .matero-sidenav-collapsed .matero-sidenav:hover .matero-user-panel-name,\n .matero-sidenav-collapsed-fix .matero-sidenav:hover .matero-user-panel-name,\n .matero-sidenav-collapsed .matero-sidenav:hover .matero-user-panel-email,\n .matero-sidenav-collapsed-fix .matero-sidenav:hover .matero-user-panel-email,\n .matero-sidenav-collapsed .matero-sidenav:hover .matero-user-panel-icons,\n .matero-sidenav-collapsed-fix .matero-sidenav:hover .matero-user-panel-icons {\n   opacity: 1;\n }\n\n .matero-sidenav-collapsed .matero-sidenav:hover .matero-user-panel-avatar,\n .matero-sidenav-collapsed-fix .matero-sidenav:hover .matero-user-panel-avatar {\n   transform: scale(1);\n }\n\n .matero-sidenav-collapsed .matero-content-wrap {\n   margin-left: 50px !important;\n }\n\n [dir='rtl'] .matero-sidenav-collapsed .matero-content-wrap {\n   margin-left: auto !important;\n   margin-right: 50px !important;\n }\n\n .matero-sidenav-collapsed[dir='rtl'] .matero-content-wrap {\n   margin-left: auto !important;\n   margin-right: 50px !important;\n }\n\n .matero-navbar-top .matero-topmenu {\n   top: 0;\n }\n\n .matero-navbar-top .matero-branding {\n   margin-left: 16px;\n }\n\n [dir='rtl'] .matero-navbar-top .matero-branding {\n   margin-left: auto;\n   margin-right: 16px;\n }\n\n .matero-header-fixed .matero-header {\n   position: sticky;\n   top: 0;\n }\n\n .matero-header-fixed .matero-topmenu {\n   top: 64px;\n }\n\n .matero-header-fixed.matero-navbar-side .matero-toolbar {\n   border-bottom: unset;\n }\n\n .matero-content-width-fix .matero-content-wrap {\n   margin-left: 240pxp !important;\n }\n\n [dir='rtl'] .matero-content-width-fix .matero-content-wrap {\n   margin-left: auto !important;\n   margin-right: 240px !important;\n }\n\n .matero-header-white .matero-toolbar,\n .matero-header-white .matero-topmenu {\n   background-color: white;\n }",
                    "styleUrl": "./admin-layout.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver"
                    },
                    {
                        "name": "settings",
                        "type": "SettingsService"
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "settings",
                        "type": "SettingsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "isOver": {
                    "name": "isOver",
                    "getSignature": {
                        "name": "isOver",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 33
                    }
                }
            },
            "templateData": "<div class=\"matero-container-wrap\" [ngClass]=\"{'matero-header-fixed': options.headerPos === 'fixed'}\">\n  <ng-progress></ng-progress>\n\n  <mat-sidenav-container class=\"matero-container\" autosize autoFocus>\n    <mat-sidenav #sidenav class=\"matero-sidenav\" [mode]=\"isOver ? 'over' : 'side'\"\n      [opened]=\"options.navPos === 'side' && options.sidenavOpened && !isOver\"\n      (openedChange)=\"sidenavOpenedChange($event)\" (closedStart)=\"sidenavCloseStart()\">\n      <app-sidebar [showToggle]=\"!isOver\" [showUser]=\"options.showUserPanel\"\n        [showHeader]=\"options.headerPos !== 'above'\" (toggleCollapsed)=\"toggleCollapsed()\"\n        [toggleChecked]=\"options.sidenavCollapsed\">\n      </app-sidebar>\n    </mat-sidenav>\n\n    <mat-sidenav #sidenavNotice position=\"end\" mode=\"over\">\n      <app-sidebar-notice></app-sidebar-notice>\n    </mat-sidenav>\n\n    <mat-sidenav-content #content class=\"matero-content-wrap\">\n      <app-header *ngIf=\"options.showHeader && options.headerPos !== 'above'\"\n        [showToggle]=\"!options.sidenavCollapsed && options.navPos !== 'top'\" [showBranding]=\"options.navPos === 'top'\"\n        (toggleSidenav)=\"sidenav.toggle()\" (toggleSidenavNotice)=\"sidenavNotice.toggle()\">\n      </app-header>\n      <div class=\"matero-content\">\n        <router-outlet></router-outlet>\n      </div>\n    </mat-sidenav-content>\n  </mat-sidenav-container>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-34395c8736af7e5d011502ca45682e9b",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'EPL'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, AfterViewInit } from '@angular/core';\nimport { PreloaderService } from './core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit, AfterViewInit {\n  title = 'EPL';\n  constructor(private preloader: PreloaderService) { }\n\n  ngOnInit() { }\n\n  ngAfterViewInit() {\n    this.preloader.hide();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "preloader",
                        "type": "PreloaderService"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "preloader",
                        "type": "PreloaderService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "\n<router-outlet></router-outlet>\n"
        },
        {
            "name": "BrandingComponent",
            "id": "component-BrandingComponent-151c33814d472ada126b7bfc85bb4b91",
            "file": "src/app/components/header/widgets/branding.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-branding",
            "styleUrls": [],
            "styles": [],
            "template": "<a class=\"matero-branding\" href=\"/\">\n  <span class=\"matero-branding-name\">SOCCER SPACE</span>\n</a>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-branding',\n  template: `\n    <a class=\"matero-branding\" href=\"/\">\n      <span class=\"matero-branding-name\">SOCCER SPACE</span>\n    </a>\n  `,\n})\nexport class BrandingComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "BreadcrumbComponent",
            "id": "component-BreadcrumbComponent-cc5dba71bfa873f41475dbc540747c55",
            "file": "src/app/shared/components/breadcrumb/breadcrumb.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-breadcrumb",
            "styleUrls": [
                "./breadcrumb.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./breadcrumb.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "nav",
                    "defaultValue": "[]",
                    "line": 12,
                    "type": "string[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "genBreadcrumb",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "trackByNavlink",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        },
                        {
                            "name": "navlink",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "navlink",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewEncapsulation, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { MenuService } from '../../../core/services/menu.service';\n\n@Component({\n  selector: 'app-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  styleUrls: ['./breadcrumb.component.css'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class BreadcrumbComponent implements OnInit {\n  @Input() nav: string[] = [];\n\n  constructor(private router: Router, private menu: MenuService) {}\n\n  ngOnInit() {\n    this.nav = Array.isArray(this.nav) ? this.nav : [];\n\n    if (this.nav.length === 0) {\n      this.genBreadcrumb();\n    }\n  }\n\n  trackByNavlink(index: number, navlink: string): string {\n    return navlink;\n  }\n\n  genBreadcrumb() {\n    const routes = this.router.url.slice(1).split('/');\n    this.nav = this.menu.getMenuLevel(routes);\n    this.nav.unshift('home');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".matero-breadcrumb {\n  display: flex;\n  flex-wrap: wrap;\n  padding: 0;\n  margin-bottom: 1rem;\n  list-style: none;\n  font-size: 0.875rem;\n}\n\n.matero-breadcrumb-item {\n  line-height: 18px;\n  text-transform: capitalize;\n}\n\n.matero-breadcrumb-item>a {\n  color: currentColor;\n}\n\n.matero-breadcrumb-item>a:hover {\n  color: currentColor;\n  text-decoration: underline;\n}\n\n.matero-breadcrumb-item>.chevron {\n  height: 18px;\n  width: 18px;\n  font-size: 18px;\n  vertical-align: middle;\n  user-select: none;\n}\n\n.matero-breadcrumb-item>.link {\n  vertical-align: middle;\n}",
                    "styleUrl": "./breadcrumb.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "menu",
                        "type": "MenuService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menu",
                        "type": "MenuService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<nav aria-label=\"breadcrumb\">\n  <ol class=\"matero-breadcrumb\">\n    <li class=\"matero-breadcrumb-item\"\n        *ngFor=\"let navlink of nav; trackBy: trackByNavlink; first as isFirst;\">\n      <a href=\"#\" class=\"link\" *ngIf=\"isFirst\">{{navlink}}</a>\n      <ng-container *ngIf=\"!isFirst\">\n        <mat-icon class=\"chevron\">chevron_right</mat-icon>\n        <span class=\"link\">{{navlink | translate}}</span>\n      </ng-container>\n    </li>\n  </ol>\n</nav>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-fd8fc67a660a68a10ad3cc457de2cb89",
            "file": "src/app/components/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card",
            "styleUrls": [
                "./card.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "fxFlex",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "fxFlexMd",
                    "line": 19,
                    "type": "string"
                },
                {
                    "name": "fxFlexSm",
                    "line": 20,
                    "type": "string"
                },
                {
                    "name": "imgSrc",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "imgSrcAvatar",
                    "line": 17,
                    "type": "string"
                },
                {
                    "name": "routerLink",
                    "line": 21,
                    "type": "string"
                },
                {
                    "name": "subtitle",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "subtitle2",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "subtitleLabel",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "subtitleLabel1",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "title",
                    "line": 11,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, ViewEncapsulation, EventEmitter  } from '@angular/core';\n\n@Component({\n  selector: 'app-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.css'],\n})\n\nexport class CardComponent implements OnInit {\n\n  @Input() title: string;\n  @Input() subtitle: string;\n  @Input() subtitle2: string;\n  @Input() subtitleLabel: string;\n  @Input() subtitleLabel1: string;\n  @Input() imgSrc: string;\n  @Input() imgSrcAvatar: string;\n  @Input() fxFlex: string;\n  @Input() fxFlexMd: string;\n  @Input() fxFlexSm: string;\n  @Input() routerLink: string;\n  // @Input() state: any;\n  // @Input() routerUrl: string;\n\n  constructor(){}\n\n  ngOnInit(){\n\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-card {\n  margin-bottom: 16px;\n  cursor: pointer;\n  border-radius: 25px;\n  flex-basis: auto !important;\n}\n\n.mat-card-image {\n  height: 50%\n}",
                    "styleUrl": "./card.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 21
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card\n  [routerLink]='routerLink'\n  [fxFlex]='fxFlex' \n  [fxFlex.lt-md]='fxFlexMd'\n  [fxFlex.lt-sm]='fxFlexSm'>\n  <mat-card-header>\n    <img mat-card-avatar [src]=\"imgSrcAvatar\" alt=\"\">\n    <mat-card-title>{{title}}</mat-card-title>\n    <mat-card-subtitle><b *ngIf='subtitleLabel'>{{subtitleLabel}}: </b>{{subtitle}}</mat-card-subtitle>\n    <mat-card-subtitle><b *ngIf='subtitleLabel1'>{{subtitleLabel1}}:</b>{{subtitle2}}</mat-card-subtitle>\n  </mat-card-header>\n  <img *ngIf=\"imgSrc\" mat-card-image [src]=\"imgSrc\" alt=\"\">\n  <mat-card-content>\n    <ng-content></ng-content>\n  </mat-card-content>\n  <mat-card-actions align=\"end\">\n    <ng-content></ng-content>\n  </mat-card-actions>\n</mat-card>"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-fd8fc67a660a68a10ad3cc457de2cb89-1",
            "file": "src/app/shared/components/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card",
            "styleUrls": [
                "./card.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "fxFlex",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "fxFlexMd",
                    "line": 19,
                    "type": "string"
                },
                {
                    "name": "fxFlexSm",
                    "line": 20,
                    "type": "string"
                },
                {
                    "name": "imgSrc",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "imgSrcAvatar",
                    "line": 17,
                    "type": "string"
                },
                {
                    "name": "routerLink",
                    "line": 21,
                    "type": "string"
                },
                {
                    "name": "subtitle",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "subtitle2",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "subtitleLabel",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "subtitleLabel1",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "title",
                    "line": 11,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, ViewEncapsulation, EventEmitter  } from '@angular/core';\n\n@Component({\n  selector: 'app-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.css'],\n})\n\nexport class CardComponent implements OnInit {\n\n  @Input() title: string;\n  @Input() subtitle: string;\n  @Input() subtitle2: string;\n  @Input() subtitleLabel: string;\n  @Input() subtitleLabel1: string;\n  @Input() imgSrc: string;\n  @Input() imgSrcAvatar: string;\n  @Input() fxFlex: string;\n  @Input() fxFlexMd: string;\n  @Input() fxFlexSm: string;\n  @Input() routerLink: string;\n  // @Input() state: any;\n  // @Input() routerUrl: string;\n\n  constructor(){}\n\n  ngOnInit(){\n\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-card {\n  margin-bottom: 16px;\n  cursor: pointer;\n  border-radius: 25px;\n  flex-basis: auto !important;\n}\n\n.mat-card-image {\n  height: 50%\n}",
                    "styleUrl": "./card.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 21
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "CardComponent-1",
            "templateData": "<mat-card\n  [routerLink]='routerLink'\n  [fxFlex]='fxFlex' \n  [fxFlex.lt-md]='fxFlexMd'\n  [fxFlex.lt-sm]='fxFlexSm'>\n  <mat-card-header>\n    <img mat-card-avatar [src]=\"imgSrcAvatar\" alt=\"\">\n    <mat-card-title>{{title}}</mat-card-title>\n    <mat-card-subtitle><b *ngIf='subtitleLabel'>{{subtitleLabel}}: </b>{{subtitle}}</mat-card-subtitle>\n    <mat-card-subtitle><b *ngIf='subtitleLabel1'>{{subtitleLabel1}}:</b>{{subtitle2}}</mat-card-subtitle>\n  </mat-card-header>\n  <img *ngIf=\"imgSrc\" mat-card-image [src]=\"imgSrc\" alt=\"\">\n  <mat-card-content>\n    <ng-content></ng-content>\n  </mat-card-content>\n  <mat-card-actions align=\"end\">\n    <ng-content></ng-content>\n  </mat-card-actions>\n</mat-card>"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-f06c4bd7cff47d7c8ac89e97f57624a1",
            "file": "src/app/modules/dashboard/dashboard-home/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [
                "./dashboard.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_competition",
                    "type": "Observable<Competition>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "competition",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "comps",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "data",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "fixtures$",
                    "type": "Observable<Fixtures[]>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "gridColumns",
                    "defaultValue": "2",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "matchdays",
                    "defaultValue": "[\n    { id: 11, name: 'Matchday 11' },\n    { id: 12, name: 'Matchday 12' },\n    { id: 13, name: 'Matchday 13' },\n    { id: 14, name: 'Matchday 14' },\n    { id: 15, name: 'Matchday 15' },\n    { id: 16, name: 'Matchday 16' },\n    { id: 17, name: 'Matchday 17' },\n    { id: 18, name: 'Matchday 18' },\n    { id: 19, name: 'Matchday 19' },\n    { id: 20, name: 'Matchday 20' },\n    { id: 21, name: 'Matchday 21' },\n    { id: 22, name: 'Matchday 22' },\n    { id: 23, name: 'Matchday 23' },\n    { id: 24, name: 'Matchday 24' },\n    { id: 25, name: 'Matchday 25' },\n    { id: 26, name: 'Matchday 26' },\n    { id: 27, name: 'Matchday 27' },\n    { id: 28, name: 'Matchday 28' },\n    { id: 29, name: 'Matchday 29' },\n    { id: 30, name: 'Matchday 30' },\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "matches",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "matchweek",
                    "defaultValue": "'Matchweek '",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "router",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getGames",
                    "args": [
                        {
                            "name": "competionId",
                            "type": "number"
                        },
                        {
                            "name": "matchdayId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "jsdoctags": [
                        {
                            "name": "competionId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "matchdayId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53
                },
                {
                    "name": "toggleGridColumns",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { MatchService } from '@shared/services/match.service';\nimport { CompetitionService } from '@shared/services/competition.service';\nimport { Imatches, Fixtures, Competition } from '@core/models/matches.model';\n\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\n\nexport class DashboardComponent implements OnInit {\n  fixtures$: Observable<Fixtures[]>;\n  _competition: Observable<Competition>;\n  matches;\n  comps;\n  data;\n  competition;\n  matchweek = 'Matchweek ';\n  matchdays = [\n    { id: 11, name: 'Matchday 11' },\n    { id: 12, name: 'Matchday 12' },\n    { id: 13, name: 'Matchday 13' },\n    { id: 14, name: 'Matchday 14' },\n    { id: 15, name: 'Matchday 15' },\n    { id: 16, name: 'Matchday 16' },\n    { id: 17, name: 'Matchday 17' },\n    { id: 18, name: 'Matchday 18' },\n    { id: 19, name: 'Matchday 19' },\n    { id: 20, name: 'Matchday 20' },\n    { id: 21, name: 'Matchday 21' },\n    { id: 22, name: 'Matchday 22' },\n    { id: 23, name: 'Matchday 23' },\n    { id: 24, name: 'Matchday 24' },\n    { id: 25, name: 'Matchday 25' },\n    { id: 26, name: 'Matchday 26' },\n    { id: 27, name: 'Matchday 27' },\n    { id: 28, name: 'Matchday 28' },\n    { id: 29, name: 'Matchday 29' },\n    { id: 30, name: 'Matchday 30' },\n  ];\n  gridColumns = 2;\n  constructor(\n    private matchService: MatchService,\n    private compService: CompetitionService,\n    public router: Router\n  ) { }\n\n  ngOnInit() {\n    this._competition = this.compService.competition;\n    this.compService.loadAllCompetition();\n    this._competition.subscribe((item) => {\n      this.comps = item;\n      this.comps = this.comps.competitions;\n      if (this.comps !== undefined){\n        this.data = this.comps.filter(e => {\n          return (e.area.id === 2072 && e.plan === 'TIER_ONE' && e.code === 'PL') ||\n            (e.area.id === 2114 && e.plan === 'TIER_ONE') ||\n          (e.area.id === 2088 && e.plan === 'TIER_ONE') || (e.area.id === 2224 && e.plan === 'TIER_ONE');\n        });\n        console.log('this.matches', this.data);\n      }\n    });\n    // this.matchService.fetchMatches(2021, 11);\n    // this.fixtures$ = this.matchService.matches;\n    // this.fixtures$.subscribe((item) => {\n    //   this.matches = item;\n    //   console.log('this.matches', this.matches);\n    // });\n    // console.log('this.fixtures', this.fixtures$);\n\n    // this.fixtures.subscribe((item) => {\n    //   this.matches = item.matches;\n    //   this.competition = item.competition;\n    //   this.matchweek = 'matchweek ' + (item.filters ? item.filters.matchday : '');\n\n    // });\n    // this.getGames(2021, 11);\n  }\n\n\n  getGames(competionId: number, matchdayId: number): void {\n    this.matchService.fetchMatches(competionId, matchdayId);\n  }\n\n  toggleGridColumns() {\n    this.gridColumns = this.gridColumns === 3 ? 4 : 3;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".content {\n  position: relative;\n  padding: 16px;\n}\n.scores {\n  border: 1px solid #ccc;\n  width: 50px;\n  margin-top: 11px;\n  background: purple;\n  line-height: 1.8;\n  position: absolute;\n  text-align: center;\n  color: #fff;\n}\n.card-col {\n  padding-right: 8px;\n  padding-left: 8px;\n  flex: 1 1 25%;\n  box-sizing: border-box;\n  /* max-width: 100%; */\n}\n.mat-form{\n  display: block !important;\n}\n/* .card-row {\n  margin-right: -8px;\n  margin-left: -8px;\n  flex-flow: row wrap;\n  box-sizing: border-box;\n  display: flex;\n} */\n.mat-list {\n  cursor: pointer;\n}\n.mat-list-base {\n  position: relative;\n}\n\n.text-center {\n  text-align: center !important;\n}\n\n.mat-list-base {\n  padding-top: 8px;\n  display: block;\n  -webkit-tap-highlight-color: transparent;\n}\n\n.example-box.cdk-drag-animating {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n\n.example-chip .cdk-drop-list-dragging {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n.example-box {\n  margin: 12px !important;\n}\n.container {\n  text-align: center;\n}\n\n.score-card-list {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.score-card {\n  width: 550px;\n  display: flex !important;\n}\n\n.home {\n  flex: 1;\n  text-align: right;\n}\n\n.away {\n  flex: 1;\n  text-align: left;\n}\n\n.score {\n  width: 100px;\n}\n\nmat-toolbar {\n  justify-content: space-between;\n}\n\n/* .content {\n  padding: 16px;\n}\n\n.content>mat-card {\n  margin-bottom: 16px;\n} */\n\n.content {\n  position: relative;\n  padding: 16px;\n  padding-top: 0;\n}\n\n.mat-card {\n  margin-bottom: 16px;\n  cursor: pointer;\n  border-radius: 25px;\n}\n.mat-card-image {\n  height: 50%\n}",
                    "styleUrl": "./dashboard.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "matchService",
                        "type": "MatchService"
                    },
                    {
                        "name": "compService",
                        "type": "CompetitionService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "matchService",
                        "type": "MatchService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "compService",
                        "type": "CompetitionService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-breadcrumb></app-breadcrumb>\n<div class=\"card-row\" fxLayout=\"row wrap\" fxLayout.lt-sm=\"column\" fxLayoutGap=\"32px\" fxLayoutAlign=\"flex-start\">\n  <ng-container *ngFor=\"let competition of data\">\n    <!-- <app-card \n      fxFlex=\"0 1 calc(33.3% - 32px)\" \n      fxFlex.lt-md=\"0 1 calc(50% - 32px)\"\n      fxFlex.lt-sm=\"100%\"\n      [title]='competition.name'\n      [subtitle]='competition?.area.name' \n      [imgSrc]='competition?.area.ensignUrl'\n      [imgSrcAvatar]='competition?.area.ensignUrl'>\n      <button mat-button>Table</button>\n      <button mat-button [routerLink]=\"['/scores']\">Scores</button>\n      <button mat-button [routerLink]=\"['/teams']\" [state]=\"{ id:  competition.id }\">Teams</button>\n    </app-card> -->\n    <mat-card class=\"team-card\" fxFlex=\"0 1 calc(33.3% - 32px)\" fxFlex.lt-md=\"0 1 calc(50% - 32px)\"\n      fxFlex.lt-sm=\"100%\">\n      <mat-card-header>\n        <img mat-card-avatar [src]=\"competition?.area.ensignUrl\" alt=\"Photo of {{competition.name}}\">\n        <mat-card-title>{{competition.name}}</mat-card-title>\n        <mat-card-subtitle>{{competition?.area.name}}</mat-card-subtitle>\n      </mat-card-header>\n      <img mat-card-image [src]=\"competition?.area.ensignUrl\"\n        alt=\"Photo of {{competition.name}}\">\n      <mat-card-content>\n      </mat-card-content>\n      <mat-card-actions align=\"end\">\n        <button mat-button \n          [routerLink]=\"['/tables']\"\n          [state]=\"{ id: competition.code }\">\n          Table\n        </button>\n        <button mat-button \n          [routerLink]=\"['/scores']\" \n          [state]=\"{ id: competition.code, matchday: competition?.currentSeason.currentMatchday }\">\n          Scores\n        </button>\n        <button mat-button [routerLink]=\"['/teams']\" [state]=\"{ id:  competition.id }\">Teams</button>\n      </mat-card-actions>\n    </mat-card>\n  </ng-container>\n</div>\n"
        },
        {
            "name": "GithubButtonComponent",
            "id": "component-GithubButtonComponent-46a6758a648f89da14933b2d26381b25",
            "file": "src/app/components/header/widgets/github.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-github-button",
            "styleUrls": [],
            "styles": [],
            "template": "<a\n  mat-icon-button\n  class=\"matero-toolbar-button\"\n  href=\"https://github.com/bbayo4/soccer-space\"\n  target=\"_blank\"\n>\n  <svg viewBox=\"0 0 16 16\" class=\"mat-icon\">\n    <path\n      fill=\"currentColor\"\n      d=\"M7.999,0.431c-4.285,0-7.76,3.474-7.76,7.761 c0,3.428,2.223,6.337,5.307,7.363c0.388,\n      0.071,0.53-0.168,0.53-0.374c0-0.184-0.007-0.672-0.01-1.32 c-2.159,\n      0.469-2.614-1.04-2.614-1.04c-0.353-0.896-0.862-1.135-0.862-1.135c-0.705-0.481,\n      0.053-0.472,0.053-0.472 c0.779,0.055,1.189,0.8,1.189,0.8c0.692,1.186,1.816,0.843,2.258,\n      0.645c0.071-0.502,0.271-0.843,0.493-1.037 C4.86,11.425,3.049,10.76,3.049,7.786c0-0.847,\n      0.302-1.54,0.799-2.082C3.768,5.507,3.501,4.718,3.924,3.65 c0,0,0.652-0.209,\n      2.134,0.796C6.677,4.273,7.34,4.187,8,4.184c0.659,0.003,1.323,0.089,1.943,\n      0.261 c1.482-1.004,2.132-0.796,2.132-0.796c0.423,1.068,0.157,1.857,0.077,2.054c0.497,\n      0.542,0.798,1.235,0.798,2.082 c0,2.981-1.814,3.637-3.543,3.829c0.279,0.24,0.527,0.713,\n      0.527,1.437c0,1.037-0.01,1.874-0.01,2.129 c0,0.208,0.14,0.449,0.534,0.373c3.081-1.028,\n      5.302-3.935,5.302-7.362C15.76,3.906,12.285,0.431,7.999,0.431z\"\n    ></path>\n  </svg>\n</a>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-github-button',\n  template: `\n    <a\n      mat-icon-button\n      class=\"matero-toolbar-button\"\n      href=\"https://github.com/bbayo4/soccer-space\"\n      target=\"_blank\"\n    >\n      <svg viewBox=\"0 0 16 16\" class=\"mat-icon\">\n        <path\n          fill=\"currentColor\"\n          d=\"M7.999,0.431c-4.285,0-7.76,3.474-7.76,7.761 c0,3.428,2.223,6.337,5.307,7.363c0.388,\n          0.071,0.53-0.168,0.53-0.374c0-0.184-0.007-0.672-0.01-1.32 c-2.159,\n          0.469-2.614-1.04-2.614-1.04c-0.353-0.896-0.862-1.135-0.862-1.135c-0.705-0.481,\n          0.053-0.472,0.053-0.472 c0.779,0.055,1.189,0.8,1.189,0.8c0.692,1.186,1.816,0.843,2.258,\n          0.645c0.071-0.502,0.271-0.843,0.493-1.037 C4.86,11.425,3.049,10.76,3.049,7.786c0-0.847,\n          0.302-1.54,0.799-2.082C3.768,5.507,3.501,4.718,3.924,3.65 c0,0,0.652-0.209,\n          2.134,0.796C6.677,4.273,7.34,4.187,8,4.184c0.659,0.003,1.323,0.089,1.943,\n          0.261 c1.482-1.004,2.132-0.796,2.132-0.796c0.423,1.068,0.157,1.857,0.077,2.054c0.497,\n          0.542,0.798,1.235,0.798,2.082 c0,2.981-1.814,3.637-3.543,3.829c0.279,0.24,0.527,0.713,\n          0.527,1.437c0,1.037-0.01,1.874-0.01,2.129 c0,0.208,0.14,0.449,0.534,0.373c3.081-1.028,\n          5.302-3.935,5.302-7.362C15.76,3.906,12.285,0.431,7.999,0.431z\"\n        ></path>\n      </svg>\n    </a>\n  `,\n})\nexport class GithubButtonComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-da841f00fbcbadf38da830aa5a2a4129-1",
            "file": "src/app/core/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "a {\n  text-decoration: none;\n  color: white;\n}\n\na:hover,\na:active {\n  color: lightgray;\n}\n\n.navigation-items {\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n}\na {\n  text-decoration: none;\n  color: white;\n}\n\n\n.nav-caption {\n  display: inline-block;\n  padding-left: 6px;\n}\n\nmat-toolbar {\n  border-radius: 3px;\n}\n\n@media(max-width: 959px) {\n  mat-toolbar {\n    border-radius: 0px;\n  }\n}",
                    "styleUrl": "./header.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<p>\n  <!-- <mat-toolbar>\n    <span class=\"header-spacer\">\n      <button mat-icon-button class=\"example-icon\" aria-label=\"Example icon-button with menu icon\">\n        <mat-icon>menu</mat-icon>\n      </button>\n      <button>\n        <mat-icon>home</mat-icon>\n        <span>Home</span>\n      </button>\n    </span>\n    <span>EPL</span>\n  </mat-toolbar> -->\n  <!-- <mat-toolbar color=\"primary\">\n    <span class=\"fill-remaining-space\">\n      <button mat-icon-button [matMenuTriggerFor]=\"menu\">\n        <mat-icon>menu</mat-icon>\n      </button>\n      <mat-menu #menu=\"matMenu\" [overlapTrigger]=\"false\">\n        <button mat-menu-item routerLink=\"/\" >\n          <mat-icon>home</mat-icon>\n          <span>Home</span>\n        </button>\n        <button mat-menu-item [routerLink]=\"['/teams']\">\n          <mat-icon>people_outline</mat-icon>\n          <span>Teams</span>\n        </button>\n        <button mat-menu-item routerLink=\"/teams\">\n          <mat-icon>exit_to_app</mat-icon>\n          <span>Logout</span>\n        </button>\n      </mat-menu>\n    </span>\n    <span class=\"fill-remaining-space\">Soccer Space</span>\n  </mat-toolbar> -->\n  <mat-toolbar color=\"primary\">\n    <div fxHide.gt-xs>\n      <button mat-icon-button>\n        <mat-icon>menu</mat-icon>\n      </button>\n    </div>\n    <div>\n      <a routerLink=\"/\">Soccer-Space</a>\n    </div>\n    <div fxFlex fxLayout fxLayoutAlign=\"end\" fxHide.xs>\n      <ul fxLayout fxLayoutGap=\"15px\" class=\"navigation-items\">\n        <li>\n          <a  routerLink=\"/\">\n            <span class=\"nav-caption\">Dashboard</span>\n          </a>\n        </li>\n        <li>\n          <a  routerLink=\"/teams\" >\n            <span class=\"nav-caption\">Teams</span>\n          </a>\n        </li>\n      </ul>\n    </div>\n  </mat-toolbar>\n\n</p>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-2cb3f8e6ce32f0536f448237993f3294-2",
            "file": "src/app/components/header/header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "showBranding",
                    "defaultValue": "false",
                    "line": 22
                },
                {
                    "name": "showToggle",
                    "defaultValue": "true",
                    "line": 21
                }
            ],
            "outputsClass": [
                {
                    "name": "toggleSidenav",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 24,
                    "type": "EventEmitter"
                },
                {
                    "name": "toggleSidenavNotice",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 25,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "toggleFullscreen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Output,\n  EventEmitter,\n  Input,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  HostBinding\n} from '@angular/core';\nimport * as screenfull from 'screenfull';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HeaderComponent implements OnInit {\n  @Input() showToggle = true;\n  @Input() showBranding = false;\n  @HostBinding('class.matero-header')\n  @Output() toggleSidenav = new EventEmitter<void>();\n  @Output() toggleSidenavNotice = new EventEmitter<void>();\n\n  private get screenfull(): screenfull.Screenfull {\n    return screenfull as screenfull.Screenfull;\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n\n  toggleFullscreen() {\n    if (this.screenfull.isEnabled) {\n      this.screenfull.toggle();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".matero-header {\n  position: relative;\n  z-index: 200;\n  display: block;\n}\n\n.matero-header .matero-toolbar {\n  padding: 0 8px;\n}\n\n.matero-toolbar {\n  border-bottom: 1px solid rgba(0, 0, 0, .12);\n  border-bottom: unset;\n  box-shadow: 0 3px 1px -2px rgb(0 0 0 / 20%),\n  0 2px 2px 0 rgb(0 0 0 / 14%),\n  0 1px 5px 0 rgb(0 0 0 / 12%);\n}\n\n.matero-toolbar .badge {\n  position: absolute;\n  top: 0;\n  right: 0;\n  border-radius: 50rem;\n}\n\n.matero-toolbar-button.mat-button,\n.matero-toolbar-button.mat-icon-button {\n  margin: 0 4px;\n}\n\n.matero-toolbar-button.mat-button {\n  min-width: unset;\n  line-height: 40px;\n  border-radius: 50rem;\n}\n\n.matero-toolbar-button.matero-avatar-button .matero-avatar {\n  width: 32px;\n  height: 32px;\n  border-radius: 50rem;\n}\n\n.matero-toolbar-button.matero-avatar-button .matero-username {\n  margin: 0 8px;\n  font-size: 14px;\n}\n\n.matero-branding {\n  display: inline-block;\n  color: inherit;\n  font-size: 16px;\n  white-space: nowrap;\n}\n\n.matero-branding-logo-expanded {\n  width: 30px;\n  height: 30px;\n  margin-right: 10px;\n  vertical-align: middle;\n}\n\n[dir='rtl'] .matero-branding-logo-expanded {\n  margin-left: 10px;\n  margin-right: auto;\n}\n\n.matero-branding-name {\n  font-weight: normal;\n  vertical-align: middle;\n}",
                    "styleUrl": "./header.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 29
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "screenfull": {
                    "name": "screenfull",
                    "getSignature": {
                        "name": "screenfull",
                        "type": "",
                        "returnType": "screenfull.Screenfull",
                        "line": 27
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "HeaderComponent-2",
            "templateData": "<mat-toolbar class=\"matero-toolbar\">\n  <button mat-icon-button class=\"matero-toolbar-button\" *ngIf=\"showToggle\"\n          (click)=\"toggleSidenav.emit()\">\n    <mat-icon>menu</mat-icon>\n  </button>\n\n  <app-branding *ngIf=\"showBranding\"></app-branding>\n  <span fxFlex></span>\n\n  <app-github-button></app-github-button>\n\n  <!-- <button mat-icon-button class=\"matero-toolbar-button\">\n    <mat-icon>search</mat-icon>\n  </button> -->\n\n  <button mat-icon-button class=\"matero-toolbar-button\" fxHide.lt-sm\n    (click)=\"toggleFullscreen()\">\n    <mat-icon>fullscreen</mat-icon>\n  </button>\n\n  <app-user></app-user>\n  <button mat-icon-button class=\"matero-toolbar-button\" fxHide.lt-sm\n    (click)=\"toggleSidenavNotice.emit()\">\n    <mat-icon>list</mat-icon>\n  </button>\n</mat-toolbar>\n"
        },
        {
            "name": "LayoutComponent",
            "id": "component-LayoutComponent-eecadf230973a47fba19fdd5230c48de",
            "file": "src/app/shared/layout/layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-layout",
            "styleUrls": [
                "./layout.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_mobileQueryListener",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "buildRoute",
                    "defaultValue": "this.menuSrv.buildRoute",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "menu$",
                    "defaultValue": "this.menuSrv.getAll()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "mobileQuery",
                    "type": "MediaQueryList",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "spinnerService",
                    "type": "SpinnerService",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectorRef, OnDestroy, AfterViewInit } from '@angular/core';\nimport { MediaMatcher } from '@angular/cdk/layout';\nimport { Subscription } from 'rxjs';\n\nimport { SpinnerService } from '../../core/services/spinner.service';\nimport { MenuService } from '@core';\n\n@Component({\n    selector: 'app-layout',\n    templateUrl: './layout.component.html',\n    styleUrls: ['./layout.component.css']\n})\nexport class LayoutComponent implements OnInit, OnDestroy, AfterViewInit {\n\n    private _mobileQueryListener: () => void;\n    mobileQuery: MediaQueryList;\n    menu$ = this.menuSrv.getAll();\n    buildRoute = this.menuSrv.buildRoute;\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        public spinnerService: SpinnerService,\n        private media: MediaMatcher,\n        private menuSrv: MenuService\n    ) {\n\n        this.mobileQuery = this.media.matchMedia('(max-width: 1000px)');\n        this._mobileQueryListener = () => changeDetectorRef.detectChanges();\n        // tslint:disable-next-line: deprecation\n        this.mobileQuery.addListener(this._mobileQueryListener);\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngOnDestroy(): void {\n        // tslint:disable-next-line: deprecation\n        this.mobileQuery.removeListener(this._mobileQueryListener);\n        // this.autoLogoutSubscription.unsubscribe();\n    }\n\n    ngAfterViewInit(): void {\n        this.changeDetectorRef.detectChanges();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".navbar-spacer {\n  flex: 1 1 auto;\n}\n\n.navbar {\n  z-index: 2;\n}\n\n.navbar-color {\n  box-shadow: 0 3px 1px -2px rgb(0 0 0 / 20%),\n  0 2px 2px 0 rgb(0 0 0 / 14%),\n  0 1px 5px 0 rgb(0 0 0 / 12%) !important\n}\n\n.navbar-brand {\n  text-decoration: none;\n  color: white;\n}\n\n.navbar-container {\n  display: flex;\n  flex-direction: column;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n}\n\n.navbar-is-mobile .navbar {\n  position: fixed;\n  /* Make sure the toolbar will stay on top of the content as it scrolls past. */\n  z-index: 2;\n}\n\n.navbar-sidenav-container {\n  /* When the sidenav is not fixed, stretch the sidenav container to fill the available space. This\n           causes `<mat-sidenav-content>` to act as our scrolling element for desktop layouts. */\n  flex: 1;\n}\n\n.navbar-is-mobile .navbar-sidenav-container {\n  /* When the sidenav is fixed, don't constrain the height of the sidenav container. This allows the\n           `<body>` to be our scrolling element for mobile layouts. */\n  flex: 1 0 auto;\n}\n\n/*Set sidenav width*/\n\nmat-sidenav {\n  min-width: 180px !important;\n  border-right: 1px solid #eee;\n  box-shadow: 6px 0 6px rgba(0, 0, 0, .1);\n  /* background-color:rgb(63, 81, 181); */\n}\n\n/* Set height of wrapper to stop content from moving up & down */\n\n.progress-bar-container {\n  height: 5px;\n}\n\na.mat-list-item.active {\n  background: #414548;\n}\n\n#push-bottom {\n  position: absolute;\n  bottom: 0;\n}\n\n.router-link-active {\n  background-color: #414548;\n}",
                    "styleUrl": "./layout.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "spinnerService",
                        "type": "SpinnerService"
                    },
                    {
                        "name": "media",
                        "type": "MediaMatcher"
                    },
                    {
                        "name": "menuSrv",
                        "type": "MenuService"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spinnerService",
                        "type": "SpinnerService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "media",
                        "type": "MediaMatcher",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menuSrv",
                        "type": "MenuService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterViewInit"
            ],
            "templateData": "<div fxLayout=\"column\" fxFlexFill>\n  <mat-toolbar color=\"primary\" class=\"navbar-color mat-elevation-z8 p-0\" fxLayout=\"row\"\n    fxLayoutAlign=\"start center\">\n    <button mat-button (click)=\"snav.toggle()\">\n      <mat-icon>menu</mat-icon>\n    </button>\n    <button mat-button routerLink=\"/dashboard\" routerLinkActive=\"router-link-active\">\n      <mat-icon>home</mat-icon>\n      <span fxShow fxHide.xs>\n        Soccer Space\n      </span>\n    </button>\n    <span fxFlex></span>\n    <button mat-button [matMenuTriggerFor]=\"userMenu\">\n      <mat-icon>person</mat-icon>\n      <span fxShow fxHide.xs>\n        Buba Bayo\n      </span>\n    </button>\n    <mat-menu #userMenu=\"matMenu\" xPosition=\"before\" yPosition=\"above\" [overlapTrigger]=\"false\">\n      <a mat-menu-item [routerLink]=\"['/account/profile']\">\n        <mat-icon>person</mat-icon>\n        <span>Account</span>\n      </a>\n      <a mat-menu-item [routerLink]=\"['/auth/login']\">\n        <mat-icon>exit_to_app</mat-icon>\n        <span>Log out</span>\n      </a>\n    </mat-menu>\n  </mat-toolbar>\n  <mat-sidenav-container class=\"navbar-sidenav-container\">\n    <mat-sidenav #snav [opened]=\"!mobileQuery.matches\" [mode]=\"mobileQuery.matches ? 'over' : 'side'\"\n      [fixedInViewport]=\"mobileQuery.matches\" fixedTopGap=\"56\" class=\"sidenav\">\n      <mat-nav-list>\n        <h3 mat-subheader>Home</h3>\n        <a mat-list-item [routerLink]=\"['/dashboard']\" routerLinkActive=\"active\">\n          <mat-icon mat-list-icon>\n            dashboard\n          </mat-icon>\n          <p mat-line> Dashboard </p>\n        </a>\n        <a mat-list-item [routerLink]=\"['/teams']\" routerLinkActive=\"active\">\n          <mat-icon mat-list-icon>\n            people\n          </mat-icon>\n          <p mat-line> Teams </p>\n        </a>\n      </mat-nav-list>\n    </mat-sidenav>\n    <mat-sidenav-content class=\"sidenav-content\">\n      <div class=\"progress-bar-container\">\n        <mat-progress-bar color=\"accent\" mode=\"indeterminate\" *ngIf=\"spinnerService.visibility | async\">\n        </mat-progress-bar>\n      </div>\n      <router-outlet></router-outlet>\n    </mat-sidenav-content>\n  </mat-sidenav-container>\n</div>"
        },
        {
            "name": "NotificationComponent",
            "id": "component-NotificationComponent-99587f7ea0fe3daf323d471b90554a6e",
            "file": "src/app/components/header/widgets/notification.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-notification",
            "styleUrls": [],
            "styles": [],
            "template": "<button mat-icon-button class=\"matero-toolbar-button\" [matMenuTriggerFor]=\"menu\">\n  <mat-icon>notifications</mat-icon>\n  <span class=\"badge bg-red-500\">5</span>\n</button>\n\n<mat-menu #menu=\"matMenu\">\n  <mat-nav-list>\n    <mat-list-item *ngFor=\"let message of messages\">\n      <a matLine href=\"#\">{{ message }}</a>\n      <button mat-icon-button>\n        <mat-icon>info</mat-icon>\n      </button>\n    </mat-list-item>\n  </mat-nav-list>\n</mat-menu>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "messages",
                    "defaultValue": "['Server Error Reports', 'Server Error Reports', 'Server Error Reports']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-notification',\n  template: `\n    <button mat-icon-button class=\"matero-toolbar-button\" [matMenuTriggerFor]=\"menu\">\n      <mat-icon>notifications</mat-icon>\n      <span class=\"badge bg-red-500\">5</span>\n    </button>\n\n    <mat-menu #menu=\"matMenu\">\n      <mat-nav-list>\n        <mat-list-item *ngFor=\"let message of messages\">\n          <a matLine href=\"#\">{{ message }}</a>\n          <button mat-icon-button>\n            <mat-icon>info</mat-icon>\n          </button>\n        </mat-list-item>\n      </mat-nav-list>\n    </mat-menu>\n  `,\n})\nexport class NotificationComponent {\n  messages = ['Server Error Reports', 'Server Error Reports', 'Server Error Reports'];\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageHeaderComponent",
            "id": "component-PageHeaderComponent-a07df0212f7e75829fa20090351c83e3",
            "file": "src/app/shared/components/page-header/page-header.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-header",
            "styleUrls": [
                "./page-header.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "hideBreadcrumb",
                    "line": 18
                },
                {
                    "name": "nav",
                    "defaultValue": "[]",
                    "line": 15,
                    "type": "string[]"
                },
                {
                    "name": "subtitle",
                    "defaultValue": "''",
                    "line": 14
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "line": 13
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_hideBreadCrumb",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "genBreadcrumb",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewEncapsulation, Input, HostBinding } from '@angular/core';\nimport { MenuService } from '@core/services/menu.service';\nimport { Router } from '@angular/router';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n@Component({\n  selector: 'app-page-header',\n  templateUrl: './page-header.component.html',\n  styleUrls: ['./page-header.component.css'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class PageHeaderComponent implements OnInit {\n  @Input() title = '';\n  @Input() subtitle = '';\n  @Input() nav: string[] = [];\n  @HostBinding('class.matero-page-header')\n  @Input()\n  get hideBreadcrumb() {\n    return this._hideBreadCrumb;\n  }\n  set hideBreadcrumb(value: boolean) {\n    this._hideBreadCrumb = coerceBooleanProperty(value);\n  }\n  private _hideBreadCrumb = false;\n\n  constructor(private router: Router, private menu: MenuService) {}\n\n  ngOnInit() {\n    this.nav = Array.isArray(this.nav) ? this.nav : [];\n\n    if (this.nav.length === 0) {\n      this.genBreadcrumb();\n    }\n\n    this.title = this.title || this.nav[this.nav.length - 1];\n  }\n\n  genBreadcrumb() {\n    const routes = this.router.url.slice(1).split('/');\n    this.nav = this.menu.getMenuLevel(routes);\n    this.nav.unshift('home');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".matero-page-header {\n  display: block;\n  padding: 16px;\n  margin: -16px -16px 16px;\n  background-color: #3f51b5;\n  color: #fff;\n}\n\n.matero-page-header .matero-breadcrumb {\n  margin-top: 8px;\n  margin-bottom: 0;\n}\n\n.matero-page-title {\n  margin: 0;\n  font-size: 24px;\n  font-weight: 400;\n}",
                    "styleUrl": "./page-header.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "menu",
                        "type": "MenuService"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menu",
                        "type": "MenuService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "hideBreadcrumb": {
                    "name": "hideBreadcrumb",
                    "setSignature": {
                        "name": "hideBreadcrumb",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 21,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"matero-page-header-inner\">\n  <h1 class=\"matero-page-title\">{{title | translate}} <small>{{subtitle}}</small></h1>\n  <breadcrumb *ngIf=\"!hideBreadcrumb\" [nav]=\"nav\"></breadcrumb>\n</div>\n"
        },
        {
            "name": "PlayersComponent",
            "id": "component-PlayersComponent-b7013cfb258b84f80190149a6189e27e",
            "file": "src/app/modules/players/players.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-players",
            "styleUrls": [
                "./players.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./players.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "players",
                    "line": 17
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columnsToDisplay",
                    "defaultValue": "['name', 'position', 'nationality', 'role']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "expandedElement",
                    "type": "PlayerElement | null",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "getAge",
                    "args": [
                        {
                            "name": "dateString",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "dateString",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, OnChanges } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\n\n@Component({\n  selector: 'app-players',\n  templateUrl: './players.component.html',\n  styleUrls: ['./players.component.css'],\n  animations: [\n    trigger('detailExpand', [\n      state('collapsed', style({ height: '0px', minHeight: '0' })),\n      state('expanded', style({ height: '*' })),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\n    ]),\n  ],\n})\nexport class PlayersComponent implements OnInit, OnChanges {\n  @Input() players;\n  // doesDataExist = false;\n  columnsToDisplay = ['name', 'position', 'nationality', 'role'];\n  expandedElement: PlayerElement | null;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  ngOnChanges() {\n    // Check if the data exists before using it\n    // if (this.players) {\n    //   this.doesDataExist = true;\n    // }\n  }\n\n  getAge(dateString) {\n    const today = new Date();\n    const birthDate = new Date(dateString);\n    let age = today.getFullYear() - birthDate.getFullYear();\n    const m = today.getMonth() - birthDate.getMonth();\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n      age--;\n    }\n    return age;\n  }\n}\n\nexport interface PlayerElement {\n  name: string;\n  position: number;\n  nationality: number;\n  role: string;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "table {\n  width: 100%;\n}\n\ntr.example-detail-row {\n  height: 0;\n}\n\ntr.example-element-row:not(.example-expanded-row):hover {\n  background: whitesmoke;\n}\n\ntr.example-element-row:not(.example-expanded-row):active {\n  background: #efefef;\n}\n\n.example-element-row td {\n  border-bottom-width: 0;\n}\n\n.example-element-detail {\n  overflow: hidden;\n  display: flex;\n}\n\n.example-element-diagram {\n  min-width: 80px;\n  border: 2px solid black;\n  padding: 8px;\n  font-weight: lighter;\n  margin: 8px 0;\n  height: 104px;\n}\n\n.example-element-symbol {\n  font-weight: bold;\n  font-size: 40px;\n  line-height: normal;\n}\n\n.example-element-description {\n  padding: 16px;\n}\n\n.example-element-description-attribution {\n  opacity: 0.5;\n}\n",
                    "styleUrl": "./players.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 20
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<table  mat-table [dataSource]=\"players\" multiTemplateDataRows class=\"mat-elevation-z8\">\n  <ng-container matColumnDef=\"{{column}}\" *ngFor=\"let column of columnsToDisplay\">\n    <th mat-header-cell *matHeaderCellDef> {{column}} </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element[column]}} </td>\n  </ng-container>\n\n  <!-- Expanded Content Column - The detail row is made up of this one column that spans across all columns -->\n  <ng-container matColumnDef=\"expandedDetail\">\n    <td mat-cell *matCellDef=\"let element\" [attr.colspan]=\"columnsToDisplay.length\">\n      <div class=\"example-element-detail\" [@detailExpand]=\"element == expandedElement ? 'expanded' : 'collapsed'\">\n        <div class=\"example-element-diagram\">\n          <div class=\"example-element-position\"> Age </div>\n          <div class=\"example-element-symbol\"> {{getAge(element.dateOfBirth)}} </div>\n          <div class=\"example-element-name\"> {{element.name}} </div>\n        </div>\n        <div class=\"example-element-description\">\n          <p><span class=\"example-element-description-attribution\"> Country: </span> {{element.countryOfBirth}}</p>\n          <p><span class=\"example-element-description-attribution\"> Role: </span> {{element.role}}</p>\n        </div>\n      </div>\n    </td>\n  </ng-container>\n  <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\n  <tr mat-row *matRowDef=\"let element; columns: columnsToDisplay;\" class=\"example-element-row\"\n    [class.example-expanded-row]=\"expandedElement === element\"\n    (click)=\"expandedElement = expandedElement === element ? null : element\">\n  </tr>\n  <tr mat-row *matRowDef=\"let row; columns: ['expandedDetail']\" class=\"example-detail-row\"></tr>\n</table>"
        },
        {
            "name": "ScoreCardComponent",
            "id": "component-ScoreCardComponent-a7f7bafbeabb7d0cd7c86e9dbf05af37",
            "file": "src/app/modules/scores/scores-home/score-card/score-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-score-card",
            "styleUrls": [
                "./score-card.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./score-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "fixture",
                    "line": 10,
                    "type": "Fixtures"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { Fixtures } from '@core/models/matches.model';\n\n@Component({\n  selector: 'app-score-card',\n  templateUrl: './score-card.component.html',\n  styleUrls: ['./score-card.component.css']\n})\nexport class ScoreCardComponent implements OnInit {\n  @Input() fixture: Fixtures;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".score-card {\n  display: flex !important;\n  font-size: 8px;\n  padding: 5px;\n  font-weight: bold;\n  margin-bottom: 10px;\n}\n\n.home {\n  flex: 1;\n  text-align: left;\n}\n\n.away {\n  flex: 1;\n  text-align: left;\n}\n\n.score {\n  width: 30px;\n  /* text-align: center */\n}\n\n",
                    "styleUrl": "./score-card.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card class=\"score-card\">\n  <span class=\"home\">{{ fixture.homeTeam.name }}</span>\n  <span class=\"score\">{{ fixture.score.fullTime.homeTeam }} : {{ fixture.score.fullTime.awayTeam }}</span>\n  <span class=\"away\">{{ fixture.awayTeam.name }}</span>\n</mat-card>"
        },
        {
            "name": "ScoresComponent",
            "id": "component-ScoresComponent-b7fbdb3999abcec84205682706263f23",
            "file": "src/app/modules/scores/scores-home/scores.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "ScoreService"
                }
            ],
            "selector": "app-scores",
            "styleUrls": [
                "./scores.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./scores.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "type": "ActivatedRoute",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "[\n    'position',\n    'name',\n    'points',\n    'playedGames',\n    'won',\n    'draw',\n    'lost',\n    'goalsFor',\n    'goalsAgainst',\n    'goalDifference'\n  ]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "fixtures$",
                    "type": "Observable<Fixtures[]>",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "gameweek",
                    "type": "Imatches",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "panelOpenState",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "router",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "state",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "table",
                    "type": "IStanding",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "getFixtures",
                    "args": [
                        {
                            "name": "league",
                            "type": ""
                        },
                        {
                            "name": "matchday",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "jsdoctags": [
                        {
                            "name": "league",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "matchday",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { MatchService } from '@shared/services/match.service';\n\nimport { Imatches, Fixtures } from '@core/models/matches.model';\nimport { IStanding } from '@core/models/standings.model';\nimport { ScoreService } from '@shared/services/scores.service';\n\n\n@Component({\n  selector: 'app-scores',\n  templateUrl: './scores.component.html',\n  styleUrls: ['./scores.component.css'],\n  providers: [ScoreService]\n})\n\nexport class ScoresComponent implements OnInit {\n  displayedColumns: string[] = [\n    'position',\n    'name',\n    'points',\n    'playedGames',\n    'won',\n    'draw',\n    'lost',\n    'goalsFor',\n    'goalsAgainst',\n    'goalDifference'\n  ];\n  gameweek: Imatches;\n  table: IStanding;\n  state;\n  panelOpenState = true;\n  fixtures$: Observable<Fixtures[]>;\n  constructor(\n    private matchService: MatchService,\n    private scoreService: ScoreService,\n    public router: Router,\n    public activatedRoute: ActivatedRoute\n  ) { }\n\n  // ngOnInit(): void {\n  //   this.panelOpenState = true;\n  //   this.matchService.fetchMatches(2021, 11);\n  //   this.fixtures$ = this.matchService.matches;\n  //   this.fixtures$.subscribe((item) => {\n  //     this.data = item;\n  //     console.log('this.data', this.data);\n  //   });\n  //   console.log('this.fixtures', this.fixtures$);\n  // }\n  ngOnInit() {\n    this.state = this.activatedRoute.paramMap\n      .pipe(map(() => window.history.state))\n      .subscribe(state => {\n        const id = state && state.id;\n        const matchday = state && state.matchday;\n        if (id && matchday) {\n          this.getFixtures(id, matchday);\n        } else {\n          this.getFixtures(2021, 11);\n        }\n      });\n  }\n\n  getFixtures(league, matchday) {\n    this.scoreService.getFixtures(league, matchday)\n      .subscribe(\n        data => this.gameweek = data,\n        error => console.log(error)\n      );\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n.mat-card {\n  margin-bottom: 16px;\n  cursor: pointer\n}\n\n.card-col {\n  padding-right: 8px;\n  padding-left: 8px;\n}\n\n.w-full {\n  width: 100% !important;\n}\n",
                    "styleUrl": "./scores.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "matchService",
                        "type": "MatchService"
                    },
                    {
                        "name": "scoreService",
                        "type": "ScoreService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "matchService",
                        "type": "MatchService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scoreService",
                        "type": "ScoreService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<div class=\"content\">\n  <app-breadcrumb></app-breadcrumb>\n  <div fxLayout=\"row wrap\" class=\"card-row\">\n    <div class=\"card-col\" fxFlex=\"100\" fxFlex.gt-sm=\"35\">\n      <mat-accordion>\n        <mat-expansion-panel [expanded]=\"true\"  (opened)=\"panelOpenState = true\" (closed)=\"panelOpenState = false\">\n          <mat-expansion-panel-header>\n            <mat-panel-title>\n             Scores\n            </mat-panel-title>\n          </mat-expansion-panel-header>\n          <!-- score card component -->\n          <app-score-card *ngFor=\"let fixture of gameweek?.matches\" [fixture]=\"fixture\"></app-score-card>\n        </mat-expansion-panel>\n      </mat-accordion>\n    </div>\n    <div class=\"card-col\" fxFlex=\"100\" fxFlex.gt-sm=\"65\">\n      <mat-accordion>\n        <mat-expansion-panel [expanded]=\"true\" (opened)=\"panelOpenState = true\" (closed)=\"panelOpenState = false\">\n          <mat-expansion-panel-header>\n            <mat-panel-title>\n              Standings\n            </mat-panel-title>\n          </mat-expansion-panel-header>\n          <!-- table component -->\n          <app-tables></app-tables>\n        </mat-expansion-panel>\n      </mat-accordion>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-0d2c28914a8da9716bc6ff914f77841a",
            "file": "src/app/components/sidebar/sidebar.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sidebar",
            "styleUrls": [
                "./sidebar.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./sidebar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "showHeader",
                    "defaultValue": "true",
                    "line": 12
                },
                {
                    "name": "showToggle",
                    "defaultValue": "true",
                    "line": 10
                },
                {
                    "name": "showUser",
                    "defaultValue": "true",
                    "line": 11
                },
                {
                    "name": "toggleChecked",
                    "defaultValue": "false",
                    "line": 13
                }
            ],
            "outputsClass": [
                {
                    "name": "toggleCollapsed",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Output, EventEmitter, Input, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'app-sidebar',\n  templateUrl: './sidebar.component.html',\n  styleUrls: ['./sidebar.component.css'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class SidebarComponent {\n  @Input() showToggle = true;\n  @Input() showUser = true;\n  @Input() showHeader = true;\n  @Input() toggleChecked = false;\n\n  @Output() toggleCollapsed = new EventEmitter<void>();\n\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".matero-sidebar-header {\n  position: relative;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  display: flex;\n  align-items: center;\n  height: 64px;\n  padding: 0 10px;\n  overflow: hidden;\n  color: rgba(0, 0, 0, 0.87);\n  background: rgb(255, 255, 255);\n  border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n}\n.matero-header-white  {\n  background-color: white;\n}\n\n.matero-sidebar-main {\n  height: calc(100% - 64px);\n  overflow: auto;\n}\n",
                    "styleUrl": "./sidebar.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 15
            },
            "templateData": "<div class=\"matero-sidebar-header\" *ngIf=\"showHeader\">\n  <app-branding></app-branding>\n  <span fxFlex></span>\n  <!-- <mat-slide-toggle (change)=\"toggleCollapsed.emit()\" [checked]=\"toggleChecked\" *ngIf=\"showToggle\">\n  </mat-slide-toggle> -->\n</div>\n\n<div class=\"matero-sidebar-main scrollbar-none\">\n  <app-user-panel *ngIf=\"showUser\"></app-user-panel>\n  <app-sidemenu [ripple]=\"showToggle\"></app-sidemenu>\n</div>  "
        },
        {
            "name": "SidebarNoticeComponent",
            "id": "component-SidebarNoticeComponent-2cd6d38f4048c346687079bc32dba667",
            "file": "src/app/components/sidebar-notice/sidebar-notice.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sidebar-notice",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./sidebar-notice.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-sidebar-notice',\n  templateUrl: './sidebar-notice.component.html',\n})\nexport class SidebarNoticeComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<mat-tab-group>\n  <mat-tab label=\"Today\"> Content 1 </mat-tab>\n  <mat-tab label=\"Notifications\"> Content 2 </mat-tab>\n</mat-tab-group>\n"
        },
        {
            "name": "SidemenuComponent",
            "id": "component-SidemenuComponent-8a6e51640354a73082f04667088ae194",
            "file": "src/app/components/sidemenu/sidemenu.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sidemenu",
            "styleUrls": [
                "./sidemenu.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./sidemenu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ripple",
                    "defaultValue": "false",
                    "line": 12
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buildRoute",
                    "defaultValue": "this.menuSrv.buildRoute",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "menu$",
                    "defaultValue": "this.menuSrv.getAll()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\nimport { MenuService } from '@core';\n\n@Component({\n  selector: 'app-sidemenu',\n  templateUrl: './sidemenu.component.html',\n  styleUrls: ['./sidemenu.component.css'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class SidemenuComponent {\n  // NOTE: Ripple effect make page flashing on mobile\n  @Input() ripple = false;\n\n  menu$ = this.menuSrv.getAll();\n  buildRoute = this.menuSrv.buildRoute;\n\n  constructor(private menuSrv: MenuService) {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".matero-sidemenu {\n  width: 240px;\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\n.matero-sidemenu>.matero-sidemenu-item.active>a {\n  background-color: transparent;\n  color: rgb(255, 64, 129);\n}\n\n.matero-sidemenu>.matero-sidemenu-item>a {\n  color: rgba(0, 0, 0, 0.87);\n}\n\n.matero-sidemenu>.matero-sidemenu-item>a:hover {\n  background: rgba(0, 0, 0, 0.04);\n}\n\n.matero-sidemenu .matero-sidemenu-item {\n  display: block;\n  height: auto;\n  padding: 0;\n  font-size: 16px;\n}\n\n.matero-sidemenu .matero-sidemenu-item.open>.matero-sidemenu {\n  max-height: 2000px;\n}\n\n.matero-sidemenu .matero-sidemenu-item.open>.matero-sidemenu-toggle>.menu-caret {\n  transform: rotate(-180deg);\n}\n\n.matero-sidemenu.matero-sidemenu-sub {\n  max-height: 0;\n  padding-top: 0;\n  overflow: hidden;\n  transform: translateZ(0) !important;\n  transition: fast-out-slow(max-height);\n}\n\n.matero-sidemenu.matero-sidemenu-sub .matero-sidemenu-item {\n  border-left-width: 0;\n}\n\n.matero-sidemenu a {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  height: 48px;\n  padding: 0 16px;\n  text-decoration: none;\n  cursor: pointer;\n}\n\n.matero-sidemenu .mat-icon.menu-icon {\n  width: 18px;\n  height: 18px;\n  margin-right: 16px;\n  /* font-size: 18px; */\n  line-height: 18px;\n}\n\n[dir='rtl'] .matero-sidemenu .mat-icon.menu-icon {\n  margin-left: 16px;\n  margin-right: auto;\n}\n\n.matero-sidemenu .mat-icon.menu-caret {\n  display: block;\n  text-align: center;\n  transition: fast-out-slow(transform);\n}\n\n.matero-sidemenu .menu-name,\n.matero-sidemenu .menu-label,\n.matero-sidemenu .menu-badge {\n  transition: swift-ease-out(opacity);\n}\n\n.matero-sidemenu .menu-label,\n.matero-sidemenu .menu-badge {\n  display: inline-block;\n  min-width: 18px;\n}\n\n.matero-sidemenu .menu-badge {\n  border-radius: 50rem;\n}\n\n.matero-sidemenu.level-0>li>a>.menu-name {\n  margin-right: 5px;\n}\n\n[dir='rtl'] .matero-sidemenu.level-0>li>a>.menu-name {\n  margin-left: 5px;\n  margin-right: auto;\n}\n\n.matero-sidemenu.level-1>li>a {\n  padding-left: 50px;\n}\n\n[dir='rtl'] .matero-sidemenu.level-1>li>a {\n  padding-left: 16px;\n  padding-right: 50px;\n}\n\n.matero-sidemenu.level-2>li>a {\n  padding-left: 64px;\n}\n\n[dir='rtl'] .matero-sidemenu.level-2>li>a {\n  padding-left: 16px;\n  padding-right: 64px;\n}\n\n.matero-sidemenu.level-2 [class^='level-']>li>a {\n  padding-left: 80px;\n}\n\n[dir='rtl'] .matero-sidemenu.level-2 [class^='level-']>li>a {\n  padding-left: 16px;\n  padding-right: 80px;\n}",
                    "styleUrl": "./sidemenu.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "menuSrv",
                        "type": "MenuService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "menuSrv",
                        "type": "MenuService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<ng-container [ngTemplateOutlet]=\"menuListTpl\"\n              [ngTemplateOutletContext]=\"{menuList: menu$ | async, parentRoute: [], level: 0}\">\n</ng-container>\n\n<ng-template #menuListTpl let-menuList=\"menuList\" let-parentRoute=\"parentRoute\" let-level=\"level\">\n  <ul appNavAccordion class=\"matero-sidemenu {{level>0 ? 'matero-sidemenu-sub' : ''}} level-{{level}}\">\n    <li appNavAccordionItem class=\"matero-sidemenu-item\" routerLinkActive=\"active\"\n        *ngFor=\"let menuItem of menuList\" [group]=\"menuItem.route\" [type]=\"menuItem.type\">\n\n      <a class=\"matero-sidemenu-link\"\n         [routerLink]=\"buildRoute(parentRoute.concat([menuItem.route]))\"\n         *ngIf=\"menuItem.type==='link'\" matRipple [matRippleDisabled]=\"!ripple\">\n        <ng-container [ngTemplateOutlet]=\"linkTypeTpl\"\n                      [ngTemplateOutletContext]=\"{item: menuItem, level: level}\">\n        </ng-container>\n      </a>\n\n      <a class=\"matero-sidemenu-link\" [href]=\"menuItem.route\"\n         *ngIf=\"menuItem.type==='extLink'\" matRipple [matRippleDisabled]=\"!ripple\">\n        <ng-container [ngTemplateOutlet]=\"linkTypeTpl\"\n                      [ngTemplateOutletContext]=\"{item: menuItem, level: level}\">\n        </ng-container>\n      </a>\n\n      <a class=\"matero-sidemenu-link\" [href]=\"menuItem.route\" target=\"_blank\"\n         *ngIf=\"menuItem.type==='extTabLink'\" matRipple [matRippleDisabled]=\"!ripple\">\n        <ng-container [ngTemplateOutlet]=\"linkTypeTpl\"\n                      [ngTemplateOutletContext]=\"{item: menuItem, level: level}\">\n        </ng-container>\n      </a>\n\n      <a appNavAccordionToggle class=\"matero-sidemenu-toggle\"\n         *ngIf=\"menuItem.type==='sub'\" matRipple [matRippleDisabled]=\"!ripple\">\n        <ng-container [ngTemplateOutlet]=\"linkTypeTpl\"\n                      [ngTemplateOutletContext]=\"{item: menuItem, level: level}\">\n        </ng-container>\n      </a>\n\n      <ng-container [ngTemplateOutlet]=\"menuListTpl\"\n                    [ngTemplateOutletContext]=\"{\n                      menuList: menuItem.children,\n                      parentRoute: parentRoute.concat([menuItem.route]),\n                      level: level + 1\n                    }\">\n      </ng-container>\n    </li>\n  </ul>\n</ng-template>\n\n<ng-template #linkTypeTpl let-item=\"item\" let-level=\"level\">\n  <mat-icon class=\"menu-icon\" *ngIf=\"level===0\">{{item.icon}}</mat-icon>\n  <span class=\"menu-name\">{{item.name | translate}}</span>\n  <span class=\"menu-label bg-{{item.label.color}}\" *ngIf=\"item.label\">\n    {{item.label.value}}\n  </span>\n  <span fxFlex></span>\n  <span class=\"menu-badge bg-{{item.badge.color}}\" *ngIf=\"item.badge\">\n    {{item.badge.value}}\n  </span>\n  <mat-icon class=\"menu-caret\" *ngIf=\"item.type!=='link'\">\n    {{item.type==='sub' ? 'arrow_drop_down' : 'launch'}}\n  </mat-icon>\n</ng-template>\n"
        },
        {
            "name": "TablesComponent",
            "id": "component-TablesComponent-22586ae43094d93e23830c490a6eec62",
            "file": "src/app/modules/tables/tables-home/tables.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tables",
            "styleUrls": [
                "./tables.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./tables.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "type": "ActivatedRoute",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "data",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "[\n    'position',\n    'crestUrl',\n    'name',\n    'points',\n    'playedGames',\n    'won',\n    'draw',\n    'lost',\n    'goalsFor',\n    'goalsAgainst',\n    'goalDifference',\n    'form'\n  ]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "router",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "state",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "teams$",
                    "type": "Observable<Table[]>",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "getStandings",
                    "args": [
                        {
                            "name": "league",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "league",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { StandingService } from '@shared/services/standing.service';\n\nimport { Table } from '@core/models/standings.model';\n\n@Component({\n  selector: 'app-tables',\n  templateUrl: './tables.component.html',\n  styleUrls: ['./tables.component.css']\n})\nexport class TablesComponent implements OnInit {\n  displayedColumns: string[] = [\n    'position',\n    'crestUrl',\n    'name',\n    'points',\n    'playedGames',\n    'won',\n    'draw',\n    'lost',\n    'goalsFor',\n    'goalsAgainst',\n    'goalDifference',\n    'form'\n  ];\n  state;\n  data;\n  teams$: Observable<Table[]>;\n  constructor(\n    private standingService: StandingService,\n    public router: Router,\n    public activatedRoute: ActivatedRoute\n    ) { }\n\n  ngOnInit(): void {\n    this.state = this.activatedRoute.paramMap\n      .pipe(map(() => window.history.state))\n      .subscribe(state => {\n        const id = state && state.id;\n        if (id) {\n          this.getStandings(id);\n        } else {\n          this.getStandings('PL');\n        }\n      });\n  }\n\n  getStandings(league: string) {\n    this.standingService.fetchStandings(league);\n    this.teams$ = this.standingService.teams;\n    this.teams$.subscribe(team => {\n      this.data = team;\n      this.data.forEach((element, index) => {\n        this.data[index].form = element.form.split(',');\n      }, this.data);\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-card-avatar {\n  height: 24px;\n  width: 24px;\n  border-radius: 50%;\n  flex-shrink: 0;\n  object-fit: cover;\n  margin: -10px;\n}\n\ntable {\n  margin-top: 20px;\n  margin-bottom: 20px;\n  width: 100%;\n  opacity: 0.95;\n}\n\ntd {\n  width: 50px;\n}\n\ntd:nth-child(3) {\n  width: 200px;\n  font-weight: 500;\n}\nth.mat-header-cell:last-of-type {\n  text-align: center;\n}\n\n.mat-form-field {\n  background-color: white;\n  opacity: 0.95;\n  border-radius: 5px;\n}\n.team-form {\n  padding:0;\n  margin:0;\n  display: flex;\n  list-style: none;\n  justify-content:center;\n}\nspan.form-badge {\n  display: inline-block;\n  min-width: 1.5em;\n  min-height: 1.5em;\n  line-height: 1.6em;\n  margin: 0.1em;\n  border-radius: 50%;\n  text-align: center;\n  background: #76766f;\n  color: #fefefe; \n  cursor: pointer;\n  vertical-align: middle;\n  font-family: \"PremierSans-Bold\", Arial, \"Helvetica Neue\", Helvetica, sans-serif;\n  font-weight: 400;\n \n}\nspan.badge-win{\n  background: #13cf00;\n}\nspan.badge-lose {\n  background: #d81920;\n}\n",
                    "styleUrl": "./tables.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "standingService",
                        "type": "StandingService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "standingService",
                        "type": "StandingService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-form-field>\n  <mat-label>Leagues</mat-label>\n  <mat-select #select (selectionChange)=\"getStandings(select.value)\">\n    <mat-option value=\"BL1\">Bundesliga (GE)</mat-option>\n    <mat-option value=\"PL\">Premier League (EN)</mat-option>\n    <mat-option value=\"SA\">Serie A (IT)</mat-option>\n    <mat-option value=\"PD\">Primera Division (ES)</mat-option>\n  </mat-select>\n</mat-form-field>\n<mat-card>\n  <mat-card-content>\n    <table class=\"w-full\" mat-table [dataSource]=\"data\">\n      <ng-container matColumnDef=\"position\">\n        <th mat-header-cell *matHeaderCellDef> # </th>\n        <td mat-cell *matCellDef=\"let team\">\n          {{team.position}}\n        </td>\n      </ng-container>\n      <ng-container matColumnDef=\"crestUrl\">\n        <th mat-header-cell *matHeaderCellDef></th>\n        <td mat-cell *matCellDef=\"let team\">\n          <img mat-card-avatar [src]=\"team.team.crestUrl\">\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"name\">\n        <th mat-header-cell *matHeaderCellDef> Team </th>\n        <td mat-cell *matCellDef=\"let team\"> {{team.team.name}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"playedGames\">\n        <th mat-header-cell *matHeaderCellDef> PLD </th>\n        <td mat-cell *matCellDef=\"let team\"> {{team.playedGames}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"won\">\n        <th mat-header-cell *matHeaderCellDef> W </th>\n        <td mat-cell *matCellDef=\"let team\"> {{team.won}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"draw\">\n        <th mat-header-cell *matHeaderCellDef> D </th>\n        <td mat-cell *matCellDef=\"let team\"> {{team.draw}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"lost\">\n        <th mat-header-cell *matHeaderCellDef> L </th>\n        <td mat-cell *matCellDef=\"let team\"> {{team.lost}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"points\">\n        <th mat-header-cell *matHeaderCellDef> PTS </th>\n        <td mat-cell *matCellDef=\"let team\"> {{team.points}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"goalsFor\">\n        <th mat-header-cell *matHeaderCellDef> GF </th>\n        <td mat-cell *matCellDef=\"let team\"> {{team.goalsFor}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"goalsAgainst\">\n        <th mat-header-cell *matHeaderCellDef> GA </th>\n        <td mat-cell *matCellDef=\"let team\"> {{team.goalsAgainst}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"goalDifference\">\n        <th mat-header-cell *matHeaderCellDef> GD </th>\n        <td mat-cell *matCellDef=\"let team\"> {{team.goalDifference}} </td>\n      </ng-container>\n      <ng-container matColumnDef=\"form\">\n        <th mat-header-cell *matHeaderCellDef> FORM </th>\n        <td mat-cell *matCellDef=\"let team\"> \n          <ul class=\"team-form\">\n            <li *ngFor=\"let item of team.form\">\n              <span class=\"form-badge\"\n                [ngClass]=\"{'badge-win': item === 'W', 'badge-lose': item === 'L', 'badge-draw': item === 'D'}\">{{item}}</span>\n            </li>\n          </ul>\n        </td>\n      </ng-container>\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n    </table>\n  </mat-card-content>\n</mat-card>"
        },
        {
            "name": "TeamDetailsComponent",
            "id": "component-TeamDetailsComponent-89195d0ea88adf1ba1e52ff55605510e",
            "file": "src/app/modules/team-details/team-details-home/team-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-team-details",
            "styleUrls": [
                "./team-details.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./team-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "TeamDetails",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "players",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "getTeamDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { TeamService } from '@shared/services/teams.service';\nimport { TeamDetails } from '@core/models/api.model';\n\n@Component({\n  selector: 'app-team-details',\n  templateUrl: './team-details.component.html',\n  styleUrls: ['./team-details.component.css']\n})\nexport class TeamDetailsComponent implements OnInit {\n  data: TeamDetails;\n  players;\n  constructor(\n    private route: ActivatedRoute,\n    private teamService: TeamService\n  ) { }\n\n  ngOnInit(): void {\n    this.getTeamDetails();\n  }\n\n  getTeamDetails(): void {\n    const id = +this.route.snapshot.paramMap.get('id');\n    this.teamService.getTeam(id).subscribe((res: TeamDetails) => {\n      this.data = res;\n      this.players = this.data.squad;\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".content {\n  position: relative;\n  padding: 16px;\n  padding-top: 0;\n}\n.card-col {\n  padding-right: 8px;\n  padding-left: 8px;\n  flex: 1 1 25%;\n  box-sizing: border-box;\n  max-width: 25%;\n}\n.card-row {\n  margin-right: -8px;\n  margin-left: -8px;\n  flex-flow: row wrap;\n  box-sizing: border-box;\n  display: flex;\n}\n.page-header {\n  display: block;\n  padding: 16px;\n  margin: -16px -16px 16px;\n  color: #fff;\n  border-radius: 10px;\n}\n\n.page-title {\n  margin: 0;\n  font-size: 24px;\n  font-weight: 400;\n}\n\n.mat-list-base {\n  position: relative;\n}\n.text-center {\n  text-align: center !important;\n}\n.mat-list-base {\n  padding-top: 8px;\n  display: block;\n  -webkit-tap-highlight-color: transparent;\n}\n\n\n",
                    "styleUrl": "./team-details.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "teamService",
                        "type": "TeamService"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "teamService",
                        "type": "TeamService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"page-header p-t-32 p-b-48 m-b--24 bg-gray-900\">\n  <h1 class=\"page-title\">{{data?.name}} <small>{{data?.founded}}</small></h1>\n</div>\n<div fxLayout=\"row wrap\" class=\"card-row\" >\n  <div class=\"card-col\" fxFlex=\"100\" fxFlex.gt-xs=\"50\" fxFlex.gt-sm=\"33.33\" fxFlex.gt-md=\"25\">\n    <mat-card>\n      <div class=\"text-center\">\n        <img class=\"m-b-8 r-full\" [src]=\"data?.crestUrl\" alt=\"\" width=\"80\">\n        <h2 class=\"m-t-0 m-b-8 f-w-400\">{{data?.name}}</h2>\n        <p class=\"m-t-0 m-b-8\">{{data?.address}}</p>\n        <p class=\"m-t-0 text-grey-500\">{{data?.venue}}</p>\n\n        <a mat-raised-button color=\"primary\" href={{data?.website}} target=\"_blank\">Website</a>\n        <button mat-raised-button color=\"accent\" class=\"m-l-8\">Email Us</button>\n      </div>\n      <mat-nav-list class=\"mat-nav-list mat-list-base m-x--16 m-b--16 m-t-16\">\n        <mat-divider inset></mat-divider>\n        <a mat-list-item >\n          <mat-icon class=\"icon-20 m-r-8\">account_circle</mat-icon> Overview\n        </a>\n        <mat-divider inset></mat-divider>\n        <a mat-list-item >\n          <mat-icon class=\"icon-20 m-r-8\">settings</mat-icon> Players\n        </a>\n      </mat-nav-list>\n    </mat-card>\n  </div>\n  <div class=\"card-col\" fxFlex=\"100\" fxFlex.gt-xs=\"50\" fxFlex.gt-sm=\"66.67\" fxFlex.gt-md=\"75\">\n    <mat-card>\n      <mat-tab-group class=\"m--16\">\n        <mat-tab label=\"Squad\">\n          <div class=\"m-16\" *ngIf=\"data\">\n            <app-players [players]=\"players\"></app-players>\n          </div>\n        </mat-tab>\n        <mat-tab label=\"Fixtures\">\n          <div class=\"m-16\">\n            content 2\n          </div>\n        </mat-tab>\n        <mat-tab label=\"Standings\">\n          <div class=\"m-16\">\n            content 3\n          </div>\n        </mat-tab>\n      </mat-tab-group>\n    </mat-card>\n  </div>\n</div>\n\n"
        },
        {
            "name": "TeamsComponent",
            "id": "component-TeamsComponent-1f123f3c75a8584e834631387fd35dbd",
            "file": "src/app/modules/teams/teams-home/teams.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-teams",
            "styleUrls": [
                "./teams.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./teams.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "type": "ActivatedRoute",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "data",
                    "type": "Teams",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "router",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "state",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "teams",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "title",
                    "defaultValue": "'EPL'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "getTeams",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { TeamService } from '@shared/services/teams.service';\nimport { Teams } from '@core/models/api.model';\n\n@Component({\n  selector: 'app-teams',\n  templateUrl: './teams.component.html',\n  styleUrls: ['./teams.component.css']\n})\nexport class TeamsComponent implements OnInit {\n  title = 'EPL';\n  data: Teams;\n  teams;\n  state;\n  constructor(\n    private teamService: TeamService,\n    public router: Router,\n    public activatedRoute: ActivatedRoute\n  ) {\n  }\n\n  ngOnInit() {\n    this.state = this.activatedRoute.paramMap\n      .pipe(map(() => window.history.state))\n      .subscribe(state => {\n        const id = state && state.id;\n        if (id){\n          this.getTeams(id);\n        } else {\n          this.getTeams(2021);\n        }\n      });\n  }\n\n  getTeams(id: number): void {\n    this.teamService.getTeams(id).subscribe((res: Teams) => {\n      this.data = res;\n      this.teams = this.data.teams;\n      console.log('teams', this.teams);\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".content {\n  position: relative;\n  padding: 16px;\n  padding-top: 0;\n}\n\n.mat-card {\n  margin-bottom: 16px;\n  cursor: pointer\n}\n",
                    "styleUrl": "./teams.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "teamService",
                        "type": "TeamService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "teamService",
                        "type": "TeamService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<app-breadcrumb></app-breadcrumb>\n<mat-form-field>\n  <mat-label>Leagues</mat-label>\n  <mat-select #select (selectionChange)=\"getTeams(select.value)\">\n    <mat-option value=\"2002\">Bundesliga (GERMANY)</mat-option>\n    <mat-option value=\"2021\">Premier League (ENGLAND)</mat-option>\n    <mat-option value=\"2019\">Serie A (ITALY)</mat-option>\n    <mat-option value=\"2014\">Primera Division (SPAIN)</mat-option>\n  </mat-select>\n</mat-form-field>\n<div class=\"card-row\" fxLayout=\"row wrap\" fxLayout.lt-sm=\"column\" fxLayoutGap=\"32px\" fxLayoutAlign=\"flex-start\">\n  <!-- <div *ngFor=\"let team of teams\" fxFlex=\"0 1 calc(33.3% - 32px)\" fxFlex.lt-md=\"0 1 calc(50% - 32px)\"\n    fxFlex.lt-sm=\"100%\">\n    <app-card\n      [title]='team.name'\n      routerLink='/teams/{{team.id}}'\n      [subtitle]='team.founded'\n      [subtitle2]='team.venue'\n      [subtitleLabel]='\"Founded\"'\n      [subtitleLabel1]='\"Stadium\"'\n      [imgSrcAvatar]='team.crestUrl'>\n    </app-card>\n  </div> -->\n  <!-- use without custom component -->\n  <ng-container *ngFor=\"let team of teams\">\n    <mat-card routerLink='/teams/{{team.id}}'  class=\"team-card\" fxFlex=\"0 1 calc(33.3% - 32px)\"\n      fxFlex.lt-md=\"0 1 calc(50% - 32px)\" fxFlex.lt-sm=\"100%\">\n      <mat-card-header>\n        <img mat-card-avatar [src]=\"team.crestUrl\" alt=\"Photo of {{team.name}}\">\n        <mat-card-title>{{team.name}}</mat-card-title>\n        <mat-card-subtitle><b>Founded:</b> {{team.founded}}</mat-card-subtitle>\n        <mat-card-subtitle><b>Stadium:</b> {{team.venue}}</mat-card-subtitle>\n      </mat-card-header>\n    </mat-card>\n  </ng-container>\n</div>\n\n"
        },
        {
            "name": "UserComponent",
            "id": "component-UserComponent-1e5d7abc525ee33c723e5804ac971e6f",
            "file": "src/app/components/header/widgets/user.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user",
            "styleUrls": [],
            "styles": [],
            "template": "<button\n  class=\"matero-toolbar-button matero-avatar-button\"\n  mat-button\n  [matMenuTriggerFor]=\"menu\"\n>\n  <img class=\"matero-avatar\" src=\"https://github.com/bbayo4.png\" width=\"32\" alt=\"avatar\" />\n  <span class=\"matero-username\" fxHide.lt-sm>Buba Bayo</span>\n</button>\n\n<mat-menu #menu=\"matMenu\">\n  <button routerLink=\"/profile/overview\" mat-menu-item>\n    <mat-icon>account_circle</mat-icon>\n    <span>{{ 'profile' | translate }}</span>\n  </button>\n  <button routerLink=\"/profile/settings\" mat-menu-item>\n    <mat-icon>settings</mat-icon>\n    <span>{{ 'settings' | translate }}</span>\n  </button>\n  <button mat-menu-item (click)=\"logout()\">\n    <mat-icon>exit_to_app</mat-icon>\n    <span>{{ 'logout' | translate }}</span>\n  </button>\n</mat-menu>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { MenuService } from '@core';\n\n@Component({\n  selector: 'app-user',\n  template: `\n    <button\n      class=\"matero-toolbar-button matero-avatar-button\"\n      mat-button\n      [matMenuTriggerFor]=\"menu\"\n    >\n      <img class=\"matero-avatar\" src=\"https://github.com/bbayo4.png\" width=\"32\" alt=\"avatar\" />\n      <span class=\"matero-username\" fxHide.lt-sm>Buba Bayo</span>\n    </button>\n\n    <mat-menu #menu=\"matMenu\">\n      <button routerLink=\"/profile/overview\" mat-menu-item>\n        <mat-icon>account_circle</mat-icon>\n        <span>{{ 'profile' | translate }}</span>\n      </button>\n      <button routerLink=\"/profile/settings\" mat-menu-item>\n        <mat-icon>settings</mat-icon>\n        <span>{{ 'settings' | translate }}</span>\n      </button>\n      <button mat-menu-item (click)=\"logout()\">\n        <mat-icon>exit_to_app</mat-icon>\n        <span>{{ 'logout' | translate }}</span>\n      </button>\n    </mat-menu>\n  `,\n})\nexport class UserComponent {\n\n  constructor(\n    private router: Router,\n    private menu: MenuService\n  ) {\n  }\n\n  logout() {\n    this.menu.reset();\n    this.router.navigateByUrl('/');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "menu",
                        "type": "MenuService"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menu",
                        "type": "MenuService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "UserPanelComponent",
            "id": "component-UserPanelComponent-bb35a50c4ede559bc024782bfbc8b5c8",
            "file": "src/app/components/sidebar/user-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-panel",
            "styleUrls": [
                "./user-panel.component.css"
            ],
            "styles": [],
            "template": "<div class=\"matero-user-panel\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n  <img class=\"matero-user-panel-avatar\" src=\"https://github.com/bbayo4.png\" alt=\"avatar\" width=\"64\" />\n  <h4 class=\"matero-user-panel-name\">Buba</h4>\n  <h5 class=\"matero-user-panel-email\">test@test.com</h5>\n  <div class=\"matero-user-panel-icons\">\n    <a routerLink=\"/profile/overview\" mat-icon-button>\n      <mat-icon class=\"icon-20\">account_circle</mat-icon>\n    </a>\n    <a routerLink=\"/profile/settings\" mat-icon-button>\n      <mat-icon class=\"icon-20\">settings</mat-icon>\n    </a>\n    <a routerLink=\"/auth/login\" mat-icon-button>\n      <mat-icon class=\"icon-20\">exit_to_app</mat-icon>\n    </a>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-user-panel',\n  template: `\n    <div class=\"matero-user-panel\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n      <img class=\"matero-user-panel-avatar\" src=\"https://github.com/bbayo4.png\" alt=\"avatar\" width=\"64\" />\n      <h4 class=\"matero-user-panel-name\">Buba</h4>\n      <h5 class=\"matero-user-panel-email\">test@test.com</h5>\n      <div class=\"matero-user-panel-icons\">\n        <a routerLink=\"/profile/overview\" mat-icon-button>\n          <mat-icon class=\"icon-20\">account_circle</mat-icon>\n        </a>\n        <a routerLink=\"/profile/settings\" mat-icon-button>\n          <mat-icon class=\"icon-20\">settings</mat-icon>\n        </a>\n        <a routerLink=\"/auth/login\" mat-icon-button>\n          <mat-icon class=\"icon-20\">exit_to_app</mat-icon>\n        </a>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./user-panel.component.css'],\n})\nexport class UserPanelComponent {\n\n  constructor() {\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".matero-user-panel {\n  padding: 16px 0;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n}\n\n.matero-user-panel-avatar {\n  width: 64px;\n  height: 64px;\n  margin-bottom: 8px;\n  border-radius: 50rem;\n  transition: swift-ease-out(transform);\n}\n\n.matero-user-panel-name,\n.matero-user-panel-email {\n  margin-top: 0;\n  margin-bottom: 8px;\n  font-weight: normal;\n}\n\n.matero-user-panel-name,\n.matero-user-panel-email,\n.matero-user-panel-icons {\n  opacity: 1;\n  transition: swift-ease-out(opacity);\n}\n\n.matero-user-panel-icons {\n  white-space: nowrap;\n}\n\n.matero-user-panel-icons .mat-icon-button {\n  width: 24px;\n  height: 24px;\n  line-height: 24px;\n}",
                    "styleUrl": "./user-panel.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 25
            }
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CardModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CardComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CardModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CardComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DashboardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CardModule"
                        },
                        {
                            "name": "DashboardRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MaterialModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ScoresModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ScoreCardComponent"
                        },
                        {
                            "name": "ScoresComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ScoresRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "TablesModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ScoresRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionAnchorDirective"
                        },
                        {
                            "name": "AccordionDirective"
                        },
                        {
                            "name": "AccordionItemDirective"
                        },
                        {
                            "name": "AdminLayoutComponent"
                        },
                        {
                            "name": "BrandingComponent"
                        },
                        {
                            "name": "BreadcrumbComponent"
                        },
                        {
                            "name": "GithubButtonComponent"
                        },
                        {
                            "name": "LayoutComponent"
                        },
                        {
                            "name": "NotificationComponent"
                        },
                        {
                            "name": "SidebarComponent"
                        },
                        {
                            "name": "SidebarNoticeComponent"
                        },
                        {
                            "name": "SidemenuComponent"
                        },
                        {
                            "name": "UserComponent"
                        },
                        {
                            "name": "UserPanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionAnchorDirective"
                        },
                        {
                            "name": "AccordionDirective"
                        },
                        {
                            "name": "AccordionItemDirective"
                        },
                        {
                            "name": "AdminLayoutComponent"
                        },
                        {
                            "name": "BrandingComponent"
                        },
                        {
                            "name": "BreadcrumbComponent"
                        },
                        {
                            "name": "GithubButtonComponent"
                        },
                        {
                            "name": "LayoutComponent"
                        },
                        {
                            "name": "MaterialModule"
                        },
                        {
                            "name": "NotificationComponent"
                        },
                        {
                            "name": "SidebarComponent"
                        },
                        {
                            "name": "SidebarNoticeComponent"
                        },
                        {
                            "name": "SidemenuComponent"
                        },
                        {
                            "name": "UserComponent"
                        },
                        {
                            "name": "UserPanelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TablesModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TablesComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "TablesRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TablesComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TablesRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TeamDetailsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PlayersComponent"
                        },
                        {
                            "name": "TeamDetailsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "TeamDetailsRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TeamDetailsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TeamDetailsRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TeamsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TeamsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CardModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "TeamsRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TeamsRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "appInitializerProviders",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/initializers.ts",
                "type": "[]",
                "defaultValue": "[\n  {\n    provide: APP_INITIALIZER,\n    useFactory: StartupServiceFactory,\n    deps: [StartupService],\n    multi: true,\n  },\n]"
            },
            {
                "name": "COMPONENTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/shared.module.ts",
                "type": "[]",
                "defaultValue": "[\n  LayoutComponent,\n  AdminLayoutComponent,\n  BreadcrumbComponent,\n  SidebarComponent,\n  UserPanelComponent,\n  SidemenuComponent,\n  AccordionDirective,\n  AccordionItemDirective,\n  AccordionAnchorDirective,\n  SidebarNoticeComponent,\n  HeaderComponent,\n  BrandingComponent,\n  GithubButtonComponent,\n  NotificationComponent,\n  UserComponent\n]"
            },
            {
                "name": "COMPONENTS_DYNAMIC",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/shared.module.ts",
                "type": "[]",
                "defaultValue": "[]"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "defaults",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/settings.ts",
                "type": "AppSettings",
                "defaultValue": "{\n  navPos: 'side',\n  dir: 'ltr',\n  theme: 'light',\n  showHeader: true,\n  headerPos: 'fixed',\n  showUserPanel: true,\n  sidenavOpened: true,\n  sidenavCollapsed: false,\n  language: 'en-US',\n}"
            },
            {
                "name": "DIRECTIVES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/shared.module.ts",
                "type": "[]",
                "defaultValue": "[]"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  token: 'd988ae5b444746c8bbe893e7a4f3a23a',\n  apiURL: 'http://api.football-data.org/v2/competitions'\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  title: 'Local Environment Running',\n  token: 'd988ae5b444746c8bbe893e7a4f3a23a',\n  apiURL: 'http://api.football-data.org/v2/'\n}"
            },
            {
                "name": "httpInterceptorProviders",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/interceptors/index.ts",
                "type": "[]",
                "defaultValue": "[\n  { provide: HTTP_INTERCEPTORS, useClass: HttpTokenInterceptor, multi: true }\n]",
                "description": "<p>Http interceptor providers in outside-in order </p>\n"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MAT_COLORS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utils/colors.ts",
                "type": "object",
                "defaultValue": "{\n  red: {\n    50: '#FFEBEE',\n    100: '#FFCDD2',\n    200: '#EF9A9A',\n    300: '#E57373',\n    400: '#EF5350',\n    500: '#F44336',\n    600: '#E53935',\n    700: '#D32F2F',\n    800: '#C62828',\n    900: '#B71C1C',\n    A100: '#FF8A80',\n    A200: '#FF5252',\n    A400: '#FF1744',\n    A700: '#D50000',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'dark',\n      400: 'light',\n      500: 'light',\n      600: 'light',\n      700: 'light',\n      800: 'light',\n      900: 'light',\n      A100: 'dark',\n      A200: 'light',\n      A400: 'light',\n      A700: 'light',\n    },\n  },\n  pink: {\n    50: '#FCE4EC',\n    100: '#F8BBD0',\n    200: '#F48FB1',\n    300: '#F06292',\n    400: '#EC407A',\n    500: '#E91E63',\n    600: '#D81B60',\n    700: '#C2185B',\n    800: '#AD1457',\n    900: '#880E4F',\n    A100: '#FF80AB',\n    A200: '#FF4081',\n    A400: '#F50057',\n    A700: '#C51162',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'dark',\n      400: 'light',\n      500: 'light',\n      600: 'light',\n      700: 'light',\n      800: 'light',\n      900: 'light',\n      A100: 'dark',\n      A200: 'light',\n      A400: 'light',\n      A700: 'light',\n    },\n  },\n  purple: {\n    50: '#F3E5F5',\n    100: '#E1BEE7',\n    200: '#CE93D8',\n    300: '#BA68C8',\n    400: '#AB47BC',\n    500: '#9C27B0',\n    600: '#8E24AA',\n    700: '#7B1FA2',\n    800: '#6A1B9A',\n    900: '#4A148C',\n    A100: '#EA80FC',\n    A200: '#E040FB',\n    A400: '#D500F9',\n    A700: '#AA00FF',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'light',\n      400: 'light',\n      500: 'light',\n      600: 'light',\n      700: 'light',\n      800: 'light',\n      900: 'light',\n      A100: 'dark',\n      A200: 'light',\n      A400: 'light',\n      A700: 'light',\n    },\n  },\n  'deep-purple': {\n    50: '#EDE7F6',\n    100: '#D1C4E9',\n    200: '#B39DDB',\n    300: '#9575CD',\n    400: '#7E57C2',\n    500: '#673AB7',\n    600: '#5E35B1',\n    700: '#512DA8',\n    800: '#4527A0',\n    900: '#311B92',\n    A100: '#B388FF',\n    A200: '#7C4DFF',\n    A400: '#651FFF',\n    A700: '#6200EA',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'light',\n      400: 'light',\n      500: 'light',\n      600: 'light',\n      700: 'light',\n      800: 'light',\n      900: 'light',\n      A100: 'dark',\n      A200: 'light',\n      A400: 'light',\n      A700: 'light',\n    },\n  },\n  indigo: {\n    50: '#E8EAF6',\n    100: '#C5CAE9',\n    200: '#9FA8DA',\n    300: '#7986CB',\n    400: '#5C6BC0',\n    500: '#3F51B5',\n    600: '#3949AB',\n    700: '#303F9F',\n    800: '#283593',\n    900: '#1A237E',\n    A100: '#8C9EFF',\n    A200: '#536DFE',\n    A400: '#3D5AFE',\n    A700: '#304FFE',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'light',\n      400: 'light',\n      500: 'light',\n      600: 'light',\n      700: 'light',\n      800: 'light',\n      900: 'light',\n      A100: 'dark',\n      A200: 'light',\n      A400: 'light',\n      A700: 'light',\n    },\n  },\n  blue: {\n    50: '#E3F2FD',\n    100: '#BBDEFB',\n    200: '#90CAF9',\n    300: '#64B5F6',\n    400: '#42A5F5',\n    500: '#2196F3',\n    600: '#1E88E5',\n    700: '#1976D2',\n    800: '#1565C0',\n    900: '#0D47A1',\n    A100: '#82B1FF',\n    A200: '#448AFF',\n    A400: '#2979FF',\n    A700: '#2962FF',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'dark',\n      400: 'dark',\n      500: 'dark',\n      600: 'light',\n      700: 'light',\n      800: 'light',\n      900: 'light',\n      A100: 'dark',\n      A200: 'light',\n      A400: 'light',\n      A700: 'light',\n    },\n  },\n  'light-blue': {\n    50: '#E1F5FE',\n    100: '#B3E5FC',\n    200: '#81D4FA',\n    300: '#4FC3F7',\n    400: '#29B6F6',\n    500: '#03A9F4',\n    600: '#039BE5',\n    700: '#0288D1',\n    800: '#0277BD',\n    900: '#01579B',\n    A100: '#80D8FF',\n    A200: '#40C4FF',\n    A400: '#00B0FF',\n    A700: '#0091EA',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'dark',\n      400: 'dark',\n      500: 'dark',\n      600: 'dark',\n      700: 'light',\n      800: 'light',\n      900: 'light',\n      A100: 'dark',\n      A200: 'dark',\n      A400: 'dark',\n      A700: 'light',\n    },\n  },\n  cyan: {\n    50: '#E0F7FA',\n    100: '#B2EBF2',\n    200: '#80DEEA',\n    300: '#4DD0E1',\n    400: '#26C6DA',\n    500: '#00BCD4',\n    600: '#00ACC1',\n    700: '#0097A7',\n    800: '#00838F',\n    900: '#006064',\n    A100: '#84FFFF',\n    A200: '#18FFFF',\n    A400: '#00E5FF',\n    A700: '#00B8D4',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'dark',\n      400: 'dark',\n      500: 'dark',\n      600: 'dark',\n      700: 'light',\n      800: 'light',\n      900: 'light',\n      A100: 'dark',\n      A200: 'dark',\n      A400: 'dark',\n      A700: 'dark',\n    },\n  },\n  teal: {\n    50: '#E0F2F1',\n    100: '#B2DFDB',\n    200: '#80CBC4',\n    300: '#4DB6AC',\n    400: '#26A69A',\n    500: '#009688',\n    600: '#00897B',\n    700: '#00796B',\n    800: '#00695C',\n    900: '#004D40',\n    A100: '#A7FFEB',\n    A200: '#64FFDA',\n    A400: '#1DE9B6',\n    A700: '#00BFA5',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'dark',\n      400: 'dark',\n      500: 'light',\n      600: 'light',\n      700: 'light',\n      800: 'light',\n      900: 'light',\n      A100: 'dark',\n      A200: 'dark',\n      A400: 'dark',\n      A700: 'dark',\n    },\n  },\n  green: {\n    50: '#E8F5E9',\n    100: '#C8E6C9',\n    200: '#A5D6A7',\n    300: '#81C784',\n    400: '#66BB6A',\n    500: '#4CAF50',\n    600: '#43A047',\n    700: '#388E3C',\n    800: '#2E7D32',\n    900: '#1B5E20',\n    A100: '#B9F6CA',\n    A200: '#69F0AE',\n    A400: '#00E676',\n    A700: '#00C853',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'dark',\n      400: 'dark',\n      500: 'dark',\n      600: 'light',\n      700: 'light',\n      800: 'light',\n      900: 'light',\n      A100: 'dark',\n      A200: 'dark',\n      A400: 'dark',\n      A700: 'dark',\n    },\n  },\n  'light-green': {\n    50: '#F1F8E9',\n    100: '#DCEDC8',\n    200: '#C5E1A5',\n    300: '#AED581',\n    400: '#9CCC65',\n    500: '#8BC34A',\n    600: '#7CB342',\n    700: '#689F38',\n    800: '#558B2F',\n    900: '#33691E',\n    A100: '#CCFF90',\n    A200: '#B2FF59',\n    A400: '#76FF03',\n    A700: '#64DD17',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'dark',\n      400: 'dark',\n      500: 'dark',\n      600: 'dark',\n      700: 'dark',\n      800: 'light',\n      900: 'light',\n      A100: 'dark',\n      A200: 'dark',\n      A400: 'dark',\n      A700: 'dark',\n    },\n  },\n  lime: {\n    50: '#F9FBE7',\n    100: '#F0F4C3',\n    200: '#E6EE9C',\n    300: '#DCE775',\n    400: '#D4E157',\n    500: '#CDDC39',\n    600: '#C0CA33',\n    700: '#AFB42B',\n    800: '#9E9D24',\n    900: '#827717',\n    A100: '#F4FF81',\n    A200: '#EEFF41',\n    A400: '#C6FF00',\n    A700: '#AEEA00',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'dark',\n      400: 'dark',\n      500: 'dark',\n      600: 'dark',\n      700: 'dark',\n      800: 'dark',\n      900: 'light',\n      A100: 'dark',\n      A200: 'dark',\n      A400: 'dark',\n      A700: 'dark',\n    },\n  },\n  yellow: {\n    50: '#FFFDE7',\n    100: '#FFF9C4',\n    200: '#FFF59D',\n    300: '#FFF176',\n    400: '#FFEE58',\n    500: '#FFEB3B',\n    600: '#FDD835',\n    700: '#FBC02D',\n    800: '#F9A825',\n    900: '#F57F17',\n    A100: '#FFFF8D',\n    A200: '#FFFF00',\n    A400: '#FFEA00',\n    A700: '#FFD600',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'dark',\n      400: 'dark',\n      500: 'dark',\n      600: 'dark',\n      700: 'dark',\n      800: 'dark',\n      900: 'dark',\n      A100: 'dark',\n      A200: 'dark',\n      A400: 'dark',\n      A700: 'dark',\n    },\n  },\n  amber: {\n    50: '#FFF8E1',\n    100: '#FFECB3',\n    200: '#FFE082',\n    300: '#FFD54F',\n    400: '#FFCA28',\n    500: '#FFC107',\n    600: '#FFB300',\n    700: '#FFA000',\n    800: '#FF8F00',\n    900: '#FF6F00',\n    A100: '#FFE57F',\n    A200: '#FFD740',\n    A400: '#FFC400',\n    A700: '#FFAB00',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'dark',\n      400: 'dark',\n      500: 'dark',\n      600: 'dark',\n      700: 'dark',\n      800: 'dark',\n      900: 'dark',\n      A100: 'dark',\n      A200: 'dark',\n      A400: 'dark',\n      A700: 'dark',\n    },\n  },\n  orange: {\n    50: '#FFF3E0',\n    100: '#FFE0B2',\n    200: '#FFCC80',\n    300: '#FFB74D',\n    400: '#FFA726',\n    500: '#FF9800',\n    600: '#FB8C00',\n    700: '#F57C00',\n    800: '#EF6C00',\n    900: '#E65100',\n    A100: '#FFD180',\n    A200: '#FFAB40',\n    A400: '#FF9100',\n    A700: '#FF6D00',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'dark',\n      400: 'dark',\n      500: 'dark',\n      600: 'dark',\n      700: 'dark',\n      800: 'dark',\n      900: 'light',\n      A100: 'dark',\n      A200: 'dark',\n      A400: 'dark',\n      A700: 'dark',\n    },\n  },\n  'deep-orange': {\n    50: '#FBE9E7',\n    100: '#FFCCBC',\n    200: '#FFAB91',\n    300: '#FF8A65',\n    400: '#FF7043',\n    500: '#FF5722',\n    600: '#F4511E',\n    700: '#E64A19',\n    800: '#D84315',\n    900: '#BF360C',\n    A100: '#FF9E80',\n    A200: '#FF6E40',\n    A400: '#FF3D00',\n    A700: '#DD2C00',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'dark',\n      400: 'dark',\n      500: 'dark',\n      600: 'dark',\n      700: 'dark',\n      800: 'dark',\n      900: 'light',\n      A100: 'dark',\n      A200: 'dark',\n      A400: 'dark',\n      A700: 'dark',\n    },\n  },\n  brown: {\n    50: '#EFEBE9',\n    100: '#D7CCC8',\n    200: '#BCAAA4',\n    300: '#A1887F',\n    400: '#8D6E63',\n    500: '#795548',\n    600: '#6D4C41',\n    700: '#5D4037',\n    800: '#4E342E',\n    900: '#3E2723',\n    A100: '#D7CCC8',\n    A200: '#BCAAA4',\n    A400: '#8D6E63',\n    A700: '#5D4037',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'light',\n      400: 'light',\n      500: 'light',\n      600: 'light',\n      700: 'light',\n      800: 'light',\n      900: 'light',\n      A100: 'dark',\n      A200: 'dark',\n      A400: 'light',\n      A700: 'light',\n    },\n  },\n  gray: {\n    50: '#FAFAFA',\n    100: '#F5F5F5',\n    200: '#EEEEEE',\n    300: '#E0E0E0',\n    400: '#BDBDBD',\n    500: '#9E9E9E',\n    600: '#757575',\n    700: '#616161',\n    800: '#424242',\n    900: '#212121',\n    A100: '#FFFFFF',\n    A200: ' #EEEEEE',\n    A400: '#BDBDBD',\n    A700: '#616161',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'dark',\n      400: 'dark',\n      500: 'dark',\n      600: 'light',\n      700: 'light',\n      800: 'light',\n      900: 'light',\n      A100: 'dark',\n      A200: 'dark',\n      A400: 'dark',\n      A700: 'light',\n    },\n  },\n  'blue-gray': {\n    50: '#ECEFF1',\n    100: '#CFD8DC',\n    200: '#B0BEC5',\n    300: '#90A4AE',\n    400: '#78909C',\n    500: '#607D8B',\n    600: '#546E7A',\n    700: '#455A64',\n    800: '#37474F',\n    900: '#263238',\n    A100: '#CFD8DC',\n    A200: '#B0BEC5',\n    A400: '#78909C',\n    A700: '#455A64',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'dark',\n      400: 'light',\n      500: 'light',\n      600: 'light',\n      700: 'light',\n      800: 'light',\n      900: 'light',\n      A100: 'dark',\n      A200: 'dark',\n      A400: 'light',\n      A700: 'light',\n    },\n  },\n}"
            },
            {
                "name": "MAT_ICONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utils/icons.ts",
                "type": "object",
                "defaultValue": "{\n  action: [\n    '3d_rotation',\n    'accessibility',\n    'accessibility_new',\n    'accessible',\n    'accessible_forward',\n    'account_balance',\n    'account_balance_wallet',\n    'account_box',\n    'account_circle',\n    'add_shopping_cart',\n    'alarm',\n    'alarm_add',\n    'alarm_off',\n    'alarm_on',\n    'all_inbox',\n    'all_out',\n    'android',\n    'announcement',\n    'arrow_right_alt',\n    'aspect_ratio',\n    'assessment',\n    'assignment',\n    'assignment_ind',\n    'assignment_late',\n    'assignment_return',\n    'assignment_returned',\n    'assignment_turned_in',\n    'autorenew',\n    'backup',\n    'book',\n    'bookmark',\n    'bookmark_border',\n    'bookmarks',\n    'bug_report',\n    'build',\n    'cached',\n    'calendar_today',\n    'calendar_view_day',\n    'camera_enhance',\n    'card_giftcard',\n    'card_membership',\n    'card_travel',\n    'change_history',\n    'check_circle',\n    'check_circle_outline',\n    'chrome_reader_mode',\n    'class',\n    'code',\n    'commute',\n    'compare_arrows',\n    'contact_support',\n    'copyright',\n    'credit_card',\n    'dashboard',\n    'date_range',\n    'delete',\n    'delete_forever',\n    'delete_outline',\n    'description',\n    'dns',\n    'done',\n    'done_all',\n    'done_outline',\n    'donut_large',\n    'donut_small',\n    'drag_indicator',\n    'eject',\n    'euro_symbol',\n    'event',\n    'event_seat',\n    'exit_to_app',\n    'explore',\n    'explore_off',\n    'extension',\n    'face',\n    'favorite',\n    'favorite_border',\n    'feedback',\n    'find_in_page',\n    'find_replace',\n    'fingerprint',\n    'flight_land',\n    'flight_takeoff',\n    'flip_to_back',\n    'flip_to_front',\n    'g_translate',\n    'gavel',\n    'get_app',\n    'gif',\n    'grade',\n    'group_work',\n    'help',\n    'help_outline',\n    'highlight_off',\n    'history',\n    'home',\n    'horizontal_split',\n    'hourglass_empty',\n    'hourglass_full',\n    'http',\n    'https',\n    'important_devices',\n    'info',\n    'input',\n    'invert_colors',\n    'label',\n    'label_important',\n    'label_off',\n    'language',\n    'launch',\n    'line_style',\n    'line_weight',\n    'list',\n    'lock',\n    'lock_open',\n    'loyalty',\n    'markunread_mailbox',\n    'maximize',\n    'minimize',\n    'motorcycle',\n    'note_add',\n    'offline_bolt',\n    'offline_pin',\n    'opacity',\n    'open_in_browser',\n    'open_in_new',\n    'open_with',\n    'pageview',\n    'pan_tool',\n    'payment',\n    'perm_camera_mic',\n    'perm_contact_calendar',\n    'perm_data_setting',\n    'perm_device_information',\n    'perm_identity',\n    'perm_media',\n    'perm_phone_msg',\n    'perm_scan_wifi',\n    'pets',\n    'picture_in_picture',\n    'picture_in_picture_alt',\n    'play_for_work',\n    'polymer',\n    'power_settings_new',\n    'pregnant_woman',\n    'print',\n    'query_builder',\n    'question_answer',\n    'receipt',\n    'record_voice_over',\n    'redeem',\n    'remove_shopping_cart',\n    'reorder',\n    'report_problem',\n    'restore',\n    'restore_from_trash',\n    'restore_page',\n    'room',\n    'rounded_corner',\n    'rowing',\n    'schedule',\n    'search',\n    'settings',\n    'settings_applications',\n    'settings_backup_restore',\n    'settings_bluetooth',\n    'settings_brightness',\n    'settings_cell',\n    'settings_ethernet',\n    'settings_input_antenna',\n    'settings_input_component',\n    'settings_input_composite',\n    'settings_input_hdmi',\n    'settings_input_svideo',\n    'settings_overscan',\n    'settings_phone',\n    'settings_power',\n    'settings_remote',\n    'settings_voice',\n    'shop',\n    'shop_two',\n    'shopping_basket',\n    'shopping_cart',\n    'speaker_notes',\n    'speaker_notes_off',\n    'spellcheck',\n    'star_rate',\n    'stars',\n    'store',\n    'subject',\n    'supervised_user_circle',\n    'supervisor_account',\n    'swap_horiz',\n    'swap_horizontal_circle',\n    'swap_vert',\n    'swap_vertical_circle',\n    'tab',\n    'tab_unselected',\n    'text_rotate_up',\n    'text_rotate_vertical',\n    'text_rotation_down',\n    'text_rotation_none',\n    'theaters',\n    'thumb_down',\n    'thumb_up',\n    'thumbs_up_down',\n    'timeline',\n    'toc',\n    'today',\n    'toll',\n    'touch_app',\n    'track_changes',\n    'translate',\n    'trending_down',\n    'trending_flat',\n    'trending_up',\n    'turned_in',\n    'turned_in_not',\n    'update',\n    'verified_user',\n    'vertical_split',\n    'view_agenda',\n    'view_array',\n    'view_carousel',\n    'view_column',\n    'view_day',\n    'view_headline',\n    'view_list',\n    'view_module',\n    'view_quilt',\n    'view_stream',\n    'view_week',\n    'visibility',\n    'visibility_off',\n    'voice_over_off',\n    'watch_later',\n    'work',\n    'work_off',\n    'work_outline',\n    'youtube_searched_for',\n    'zoom_in',\n    'zoom_out',\n  ],\n  alert: ['add_alert', 'error', 'error_outline', 'notification_important', 'warning'],\n  av: [\n    '4k',\n    'add_to_queue',\n    'airplay',\n    'album',\n    'art_track',\n    'av_timer',\n    'branding_watermark',\n    'call_to_action',\n    'closed_caption',\n    'control_camera',\n    'equalizer',\n    'explicit',\n    'fast_forward',\n    'fast_rewind',\n    'featured_play_list',\n    'featured_video',\n    'fiber_dvr',\n    'fiber_manual_record',\n    'fiber_new',\n    'fiber_pin',\n    'fiber_smart_record',\n    'forward_10',\n    'forward_30',\n    'forward_5',\n    'games',\n    'hd',\n    'hearing',\n    'high_quality',\n    'library_add',\n    'library_books',\n    'library_music',\n    'loop',\n    'mic',\n    'mic_none',\n    'mic_off',\n    'missed_video_call',\n    'movie',\n    'music_video',\n    'new_releases',\n    'not_interested',\n    'note',\n    'pause',\n    'pause_circle_filled',\n    'pause_circle_outline',\n    'play_arrow',\n    'play_circle_filled',\n    'play_circle_filled_white',\n    'play_circle_outline',\n    'playlist_add',\n    'playlist_add_check',\n    'playlist_play',\n    'queue',\n    'queue_music',\n    'queue_play_next',\n    'radio',\n    'recent_actors',\n    'remove_from_queue',\n    'repeat',\n    'repeat_one',\n    'replay',\n    'replay_10',\n    'replay_30',\n    'replay_5',\n    'shuffle',\n    'skip_next',\n    'skip_previous',\n    'slow_motion_video',\n    'snooze',\n    'sort_by_alpha',\n    'stop',\n    'subscriptions',\n    'subtitles',\n    'surround_sound',\n    'video_call',\n    'video_label',\n    'video_library',\n    'videocam',\n    'videocam_off',\n    'volume_down',\n    'volume_mute',\n    'volume_off',\n    'volume_up',\n    'web',\n    'web_asset',\n  ],\n  communication: [\n    'alternate_email',\n    'business',\n    'call',\n    'call_end',\n    'call_made',\n    'call_merge',\n    'call_missed',\n    'call_missed_outgoing',\n    'call_received',\n    'call_split',\n    'cancel_presentation',\n    'cell_wifi',\n    'chat',\n    'chat_bubble',\n    'chat_bubble_outline',\n    'clear_all',\n    'comment',\n    'contact_mail',\n    'contact_phone',\n    'contacts',\n    'desktop_access_disabled',\n    'dialer_sip',\n    'dialpad',\n    'domain_disabled',\n    'duo',\n    'email',\n    'forum',\n    'import_contacts',\n    'import_export',\n    'invert_colors_off',\n    'list_alt',\n    'live_help',\n    'location_off',\n    'location_on',\n    'mail_outline',\n    'message',\n    'mobile_screen_share',\n    'no_sim',\n    'pause_presentation',\n    'person_add_disabled',\n    'phone',\n    'phonelink_erase',\n    'phonelink_lock',\n    'phonelink_ring',\n    'phonelink_setup',\n    'portable_wifi_off',\n    'present_to_all',\n    'print_disabled',\n    'ring_volume',\n    'rss_feed',\n    'screen_share',\n    'sentiment_satisfied_alt',\n    'speaker_phone',\n    'stay_current_landscape',\n    'stay_current_portrait',\n    'stay_primary_landscape',\n    'stay_primary_portrait',\n    'stop_screen_share',\n    'swap_calls',\n    'textsms',\n    'unsubscribe',\n    'voicemail',\n    'vpn_key',\n  ],\n  content: [\n    'add',\n    'add_box',\n    'add_circle',\n    'add_circle_outline',\n    'archive',\n    'backspace',\n    'ballot',\n    'block',\n    'clear',\n    'create',\n    'delete_sweep',\n    'drafts',\n    'file_copy',\n    'filter_list',\n    'flag',\n    'font_download',\n    'forward',\n    'gesture',\n    'how_to_reg',\n    'how_to_vote',\n    'inbox',\n    'link',\n    'link_off',\n    'low_priority',\n    'mail',\n    'markunread',\n    'move_to_inbox',\n    'next_week',\n    'outlined_flag',\n    'redo',\n    'remove',\n    'remove_circle',\n    'remove_circle_outline',\n    'reply',\n    'reply_all',\n    'report',\n    'report_off',\n    'save',\n    'save_alt',\n    'select_all',\n    'send',\n    'sort',\n    'text_format',\n    'unarchive',\n    'undo',\n    'waves',\n    'weekend',\n    'where_to_vote',\n  ],\n  device: [\n    'access_alarm',\n    'access_alarms',\n    'access_time',\n    'add_alarm',\n    'add_to_home_screen',\n    'airplanemode_active',\n    'airplanemode_inactive',\n    // 'battery_20',\n    // 'battery_30',\n    // 'battery_50',\n    // 'battery_60',\n    // 'battery_80',\n    // 'battery_90',\n    'battery_alert',\n    // 'battery_charging_20',\n    // 'battery_charging_30',\n    // 'battery_charging_50',\n    // 'battery_charging_60',\n    // 'battery_charging_80',\n    // 'battery_charging_90',\n    'battery_charging_full',\n    'battery_full',\n    'battery_std',\n    'battery_unknown',\n    'bluetooth',\n    'bluetooth_connected',\n    'bluetooth_disabled',\n    'bluetooth_searching',\n    'brightness_auto',\n    'brightness_high',\n    'brightness_low',\n    'brightness_medium',\n    'data_usage',\n    'developer_mode',\n    'devices',\n    'dvr',\n    'gps_fixed',\n    'gps_not_fixed',\n    'gps_off',\n    'graphic_eq',\n    'location_disabled',\n    'location_searching',\n    'mobile_friendly',\n    'mobile_off',\n    // 'network_cell',\n    // 'network_wifi',\n    'nfc',\n    'screen_lock_landscape',\n    'screen_lock_portrait',\n    'screen_lock_rotation',\n    'screen_rotation',\n    'sd_storage',\n    'settings_system_daydream',\n    // 'signal_cellular_0_bar',\n    // 'signal_cellular_1_bar',\n    // 'signal_cellular_2_bar',\n    // 'signal_cellular_3_bar',\n    // 'signal_cellular_4_bar',\n    'signal_cellular_alt',\n    // 'signal_cellular_connected_no_internet_0_bar',\n    // 'signal_cellular_connected_no_internet_1_bar',\n    // 'signal_cellular_connected_no_internet_2_bar',\n    // 'signal_cellular_connected_no_internet_3_bar',\n    'signal_cellular_connected_no_internet_4_bar',\n    'signal_cellular_no_sim',\n    'signal_cellular_null',\n    'signal_cellular_off',\n    // 'signal_wifi_0_bar',\n    // 'signal_wifi_1_bar',\n    // 'signal_wifi_1_bar_lock',\n    // 'signal_wifi_2_bar',\n    // 'signal_wifi_2_bar_lock',\n    // 'signal_wifi_3_bar',\n    // 'signal_wifi_3_bar_lock',\n    'signal_wifi_4_bar',\n    'signal_wifi_4_bar_lock',\n    'signal_wifi_off',\n    'storage',\n    'usb',\n    'wallpaper',\n    'widgets',\n    'wifi_lock',\n    'wifi_tethering',\n  ],\n  editor: [\n    'add_comment',\n    'attach_file',\n    'attach_money',\n    'bar_chart',\n    'border_all',\n    'border_bottom',\n    'border_clear',\n    'border_color',\n    'border_horizontal',\n    'border_inner',\n    'border_left',\n    'border_outer',\n    'border_right',\n    'border_style',\n    'border_top',\n    'border_vertical',\n    'bubble_chart',\n    'drag_handle',\n    'format_align_center',\n    'format_align_justify',\n    'format_align_left',\n    'format_align_right',\n    'format_bold',\n    'format_clear',\n    'format_color_fill',\n    'format_color_reset',\n    'format_color_text',\n    'format_indent_decrease',\n    'format_indent_increase',\n    'format_italic',\n    'format_line_spacing',\n    'format_list_bulleted',\n    'format_list_numbered',\n    'format_list_numbered_rtl',\n    'format_paint',\n    'format_quote',\n    'format_shapes',\n    'format_size',\n    'format_strikethrough',\n    'format_textdirection_l_to_r',\n    'format_textdirection_r_to_l',\n    'format_underlined',\n    'functions',\n    'highlight',\n    'insert_chart',\n    'insert_chart_outlined',\n    'insert_comment',\n    'insert_drive_file',\n    'insert_emoticon',\n    'insert_invitation',\n    'insert_link',\n    'insert_photo',\n    'linear_scale',\n    'merge_type',\n    'mode_comment',\n    'monetization_on',\n    'money_off',\n    'multiline_chart',\n    'notes',\n    'pie_chart',\n    'publish',\n    'scatter_plot',\n    'score',\n    'short_text',\n    'show_chart',\n    'space_bar',\n    'strikethrough_s',\n    'table_chart',\n    'text_fields',\n    'title',\n    'vertical_align_bottom',\n    'vertical_align_center',\n    'vertical_align_top',\n    'wrap_text',\n  ],\n  file: [\n    'attachment',\n    'cloud',\n    'cloud_circle',\n    'cloud_done',\n    'cloud_download',\n    'cloud_off',\n    'cloud_queue',\n    'cloud_upload',\n    'create_new_folder',\n    'folder',\n    'folder_open',\n    'folder_shared',\n  ],\n  hardware: [\n    'cast',\n    'cast_connected',\n    'cast_for_education',\n    'computer',\n    'desktop_mac',\n    'desktop_windows',\n    'developer_board',\n    'device_hub',\n    'device_unknown',\n    'devices_other',\n    'dock',\n    'gamepad',\n    'headset',\n    'headset_mic',\n    'keyboard',\n    'keyboard_arrow_down',\n    'keyboard_arrow_left',\n    'keyboard_arrow_right',\n    'keyboard_arrow_up',\n    'keyboard_backspace',\n    'keyboard_capslock',\n    'keyboard_hide',\n    'keyboard_return',\n    'keyboard_tab',\n    'keyboard_voice',\n    'laptop',\n    'laptop_chromebook',\n    'laptop_mac',\n    'laptop_windows',\n    'memory',\n    'mouse',\n    'phone_android',\n    'phone_iphone',\n    'phonelink',\n    'phonelink_off',\n    'power_input',\n    'router',\n    'scanner',\n    'security',\n    'sim_card',\n    'smartphone',\n    'speaker',\n    'speaker_group',\n    'tablet',\n    'tablet_android',\n    'tablet_mac',\n    'toys',\n    'tv',\n    'videogame_asset',\n    'watch',\n  ],\n  image: [\n    'add_a_photo',\n    'add_photo_alternate',\n    'add_to_photos',\n    'adjust',\n    'assistant',\n    'assistant_photo',\n    'audiotrack',\n    'blur_circular',\n    'blur_linear',\n    'blur_off',\n    'blur_on',\n    'brightness_1',\n    'brightness_2',\n    'brightness_3',\n    'brightness_4',\n    'brightness_5',\n    'brightness_6',\n    'brightness_7',\n    'broken_image',\n    'brush',\n    'burst_mode',\n    'camera',\n    'camera_alt',\n    'camera_front',\n    'camera_rear',\n    'camera_roll',\n    'center_focus_strong',\n    'center_focus_weak',\n    'collections',\n    'collections_bookmark',\n    'color_lens',\n    'colorize',\n    'compare',\n    'control_point',\n    'control_point_duplicate',\n    'crop',\n    'crop_16_9',\n    'crop_3_2',\n    'crop_5_4',\n    'crop_7_5',\n    'crop_din',\n    'crop_free',\n    'crop_landscape',\n    'crop_original',\n    'crop_portrait',\n    'crop_rotate',\n    'crop_square',\n    'dehaze',\n    'details',\n    'edit',\n    'exposure',\n    'exposure_neg_1',\n    'exposure_neg_2',\n    'exposure_plus_1',\n    'exposure_plus_2',\n    'exposure_zero',\n    'filter',\n    'filter_1',\n    'filter_2',\n    'filter_3',\n    'filter_4',\n    'filter_5',\n    'filter_6',\n    'filter_7',\n    'filter_8',\n    'filter_9',\n    'filter_9_plus',\n    'filter_b_and_w',\n    'filter_center_focus',\n    'filter_drama',\n    'filter_frames',\n    'filter_hdr',\n    'filter_none',\n    'filter_tilt_shift',\n    'filter_vintage',\n    'flare',\n    'flash_auto',\n    'flash_off',\n    'flash_on',\n    'flip',\n    'gradient',\n    'grain',\n    'grid_off',\n    'grid_on',\n    'hdr_off',\n    'hdr_on',\n    'hdr_strong',\n    'hdr_weak',\n    'healing',\n    'image',\n    'image_aspect_ratio',\n    'image_search',\n    'iso',\n    'landscape',\n    'leak_add',\n    'leak_remove',\n    'lens',\n    'linked_camera',\n    'looks',\n    'looks_3',\n    'looks_4',\n    'looks_5',\n    'looks_6',\n    'looks_one',\n    'looks_two',\n    'loupe',\n    'monochrome_photos',\n    'movie_creation',\n    'movie_filter',\n    'music_note',\n    'music_off',\n    'nature',\n    'nature_people',\n    'navigate_before',\n    'navigate_next',\n    'palette',\n    'panorama',\n    'panorama_fish_eye',\n    'panorama_horizontal',\n    'panorama_vertical',\n    'panorama_wide_angle',\n    'photo',\n    'photo_album',\n    'photo_camera',\n    'photo_filter',\n    'photo_library',\n    'photo_size_select_actual',\n    'photo_size_select_large',\n    'photo_size_select_small',\n    'picture_as_pdf',\n    'portrait',\n    'remove_red_eye',\n    'rotate_90_degrees_ccw',\n    'rotate_left',\n    'rotate_right',\n    'shutter_speed',\n    'slideshow',\n    'straighten',\n    'style',\n    'switch_camera',\n    'switch_video',\n    'tag_faces',\n    'texture',\n    'timelapse',\n    'timer',\n    'timer_10',\n    'timer_3',\n    'timer_off',\n    'tonality',\n    'transform',\n    'tune',\n    'view_comfy',\n    'view_compact',\n    'vignette',\n    'wb_auto',\n    'wb_cloudy',\n    'wb_incandescent',\n    'wb_iridescent',\n    'wb_sunny',\n  ],\n  maps: [\n    '360',\n    'add_location',\n    'atm',\n    'beenhere',\n    'category',\n    'compass_calibration',\n    'departure_board',\n    'directions',\n    'directions_bike',\n    'directions_boat',\n    'directions_bus',\n    'directions_car',\n    'directions_railway',\n    'directions_run',\n    'directions_subway',\n    'directions_transit',\n    'directions_walk',\n    'edit_attributes',\n    'edit_location',\n    'ev_station',\n    'fastfood',\n    'flight',\n    'hotel',\n    'layers',\n    'layers_clear',\n    'local_activity',\n    'local_airport',\n    'local_atm',\n    'local_bar',\n    'local_cafe',\n    'local_car_wash',\n    'local_convenience_store',\n    'local_dining',\n    'local_drink',\n    'local_florist',\n    'local_gas_station',\n    'local_grocery_store',\n    'local_hospital',\n    'local_hotel',\n    'local_laundry_service',\n    'local_library',\n    'local_mall',\n    'local_movies',\n    'local_offer',\n    'local_parking',\n    'local_pharmacy',\n    'local_phone',\n    'local_pizza',\n    'local_play',\n    'local_post_office',\n    'local_printshop',\n    'local_see',\n    'local_shipping',\n    'local_taxi',\n    'map',\n    'money',\n    'my_location',\n    'navigation',\n    'near_me',\n    'not_listed_location',\n    'person_pin',\n    'person_pin_circle',\n    'pin_drop',\n    'place',\n    'rate_review',\n    'restaurant',\n    'restaurant_menu',\n    'satellite',\n    'store_mall_directory',\n    'streetview',\n    'subway',\n    'terrain',\n    'traffic',\n    'train',\n    'tram',\n    'transfer_within_a_station',\n    'transit_enterexit',\n    'trip_origin',\n    'zoom_out_map',\n  ],\n  navigation: [\n    'apps',\n    'arrow_back',\n    'arrow_back_ios',\n    'arrow_downward',\n    'arrow_drop_down',\n    'arrow_drop_down_circle',\n    'arrow_drop_up',\n    'arrow_forward',\n    'arrow_forward_ios',\n    'arrow_left',\n    'arrow_right',\n    'arrow_upward',\n    'cancel',\n    'check',\n    'chevron_left',\n    'chevron_right',\n    'close',\n    'expand_less',\n    'expand_more',\n    'first_page',\n    'fullscreen',\n    'fullscreen_exit',\n    'last_page',\n    'menu',\n    'more_horiz',\n    'more_vert',\n    'refresh',\n    'subdirectory_arrow_left',\n    'subdirectory_arrow_right',\n    'unfold_less',\n    'unfold_more',\n  ],\n  notification: [\n    'adb',\n    'airline_seat_flat',\n    'airline_seat_flat_angled',\n    'airline_seat_individual_suite',\n    'airline_seat_legroom_extra',\n    'airline_seat_legroom_normal',\n    'airline_seat_legroom_reduced',\n    'airline_seat_recline_extra',\n    'airline_seat_recline_normal',\n    'bluetooth_audio',\n    'confirmation_number',\n    'disc_full',\n    'drive_eta',\n    'enhanced_encryption',\n    'event_available',\n    'event_busy',\n    'event_note',\n    'folder_special',\n    'live_tv',\n    'mms',\n    'more',\n    'network_check',\n    'network_locked',\n    'no_encryption',\n    'ondemand_video',\n    'personal_video',\n    'phone_bluetooth_speaker',\n    'phone_callback',\n    'phone_forwarded',\n    'phone_in_talk',\n    'phone_locked',\n    'phone_missed',\n    'phone_paused',\n    'power',\n    'power_off',\n    'priority_high',\n    'sd_card',\n    'sms',\n    'sms_failed',\n    'sync',\n    'sync_disabled',\n    'sync_problem',\n    'system_update',\n    'tap_and_play',\n    'time_to_leave',\n    'tv_off',\n    'vibration',\n    'voice_chat',\n    'vpn_lock',\n    'wc',\n    'wifi',\n    'wifi_off',\n  ],\n  places: [\n    'ac_unit',\n    'airport_shuttle',\n    'all_inclusive',\n    'beach_access',\n    'business_center',\n    'casino',\n    'child_care',\n    'child_friendly',\n    'fitness_center',\n    'free_breakfast',\n    'golf_course',\n    'hot_tub',\n    'kitchen',\n    'meeting_room',\n    'no_meeting_room',\n    'pool',\n    'room_service',\n    'rv_hookup',\n    'smoke_free',\n    'smoking_rooms',\n    'spa',\n  ],\n  social: [\n    'cake',\n    'domain',\n    'group',\n    'group_add',\n    'location_city',\n    'mood',\n    'mood_bad',\n    'notifications',\n    'notifications_active',\n    'notifications_none',\n    'notifications_off',\n    'notifications_paused',\n    'pages',\n    'party_mode',\n    'people',\n    'people_outline',\n    'person',\n    'person_add',\n    'person_outline',\n    'plus_one',\n    'poll',\n    'public',\n    'school',\n    'sentiment_dissatisfied',\n    'sentiment_satisfied',\n    'sentiment_very_dissatisfied',\n    'sentiment_very_satisfied',\n    'share',\n    'thumb_down_alt',\n    'thumb_up_alt',\n    'whatshot',\n  ],\n  toggle: [\n    'check_box',\n    'check_box_outline_blank',\n    'indeterminate_check_box',\n    'radio_button_checked',\n    'radio_button_unchecked',\n    'star',\n    'star_border',\n    'star_half',\n    'toggle_off',\n    'toggle_on',\n  ],\n}"
            },
            {
                "name": "MOBILE_MEDIAQUERY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/layout/admin-layout.component.ts",
                "type": "string",
                "defaultValue": "'screen and (max-width: 599px)'"
            },
            {
                "name": "MODULES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/shared.module.ts",
                "type": "[]",
                "defaultValue": "[\n  MaterialModule,\n  FlexLayoutModule,\n  TranslateModule,\n  NgProgressModule\n]"
            },
            {
                "name": "MONITOR_MEDIAQUERY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/layout/admin-layout.component.ts",
                "type": "string",
                "defaultValue": "'screen and (min-width: 960px)'"
            },
            {
                "name": "PIPES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/shared.module.ts",
                "type": "[]",
                "defaultValue": "[]"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "TABLET_MEDIAQUERY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/layout/admin-layout.component.ts",
                "type": "string",
                "defaultValue": "'screen and (min-width: 600px) and (max-width: 959px)'"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
            },
            {
                "name": "USER_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/services/settings.service.ts",
                "type": "string",
                "defaultValue": "'usr'"
            }
        ],
        "functions": [
            {
                "name": "StartupServiceFactory",
                "file": "src/app/core/initializers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "startupService"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "startupService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "throwIfAlreadyLoaded",
                "file": "src/app/core/module-import-guard.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "parentModule",
                        "type": "any"
                    },
                    {
                        "name": "moduleName"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "parentModule",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "moduleName",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/core/initializers.ts": [
                {
                    "name": "appInitializerProviders",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/initializers.ts",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    provide: APP_INITIALIZER,\n    useFactory: StartupServiceFactory,\n    deps: [StartupService],\n    multi: true,\n  },\n]"
                }
            ],
            "src/app/shared/shared.module.ts": [
                {
                    "name": "COMPONENTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/shared.module.ts",
                    "type": "[]",
                    "defaultValue": "[\n  LayoutComponent,\n  AdminLayoutComponent,\n  BreadcrumbComponent,\n  SidebarComponent,\n  UserPanelComponent,\n  SidemenuComponent,\n  AccordionDirective,\n  AccordionItemDirective,\n  AccordionAnchorDirective,\n  SidebarNoticeComponent,\n  HeaderComponent,\n  BrandingComponent,\n  GithubButtonComponent,\n  NotificationComponent,\n  UserComponent\n]"
                },
                {
                    "name": "COMPONENTS_DYNAMIC",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/shared.module.ts",
                    "type": "[]",
                    "defaultValue": "[]"
                },
                {
                    "name": "DIRECTIVES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/shared.module.ts",
                    "type": "[]",
                    "defaultValue": "[]"
                },
                {
                    "name": "MODULES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/shared.module.ts",
                    "type": "[]",
                    "defaultValue": "[\n  MaterialModule,\n  FlexLayoutModule,\n  TranslateModule,\n  NgProgressModule\n]"
                },
                {
                    "name": "PIPES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/shared.module.ts",
                    "type": "[]",
                    "defaultValue": "[]"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/app/core/settings.ts": [
                {
                    "name": "defaults",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/settings.ts",
                    "type": "AppSettings",
                    "defaultValue": "{\n  navPos: 'side',\n  dir: 'ltr',\n  theme: 'light',\n  showHeader: true,\n  headerPos: 'fixed',\n  showUserPanel: true,\n  sidenavOpened: true,\n  sidenavCollapsed: false,\n  language: 'en-US',\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  token: 'd988ae5b444746c8bbe893e7a4f3a23a',\n  apiURL: 'http://api.football-data.org/v2/competitions'\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  title: 'Local Environment Running',\n  token: 'd988ae5b444746c8bbe893e7a4f3a23a',\n  apiURL: 'http://api.football-data.org/v2/'\n}"
                }
            ],
            "src/app/core/interceptors/index.ts": [
                {
                    "name": "httpInterceptorProviders",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/interceptors/index.ts",
                    "type": "[]",
                    "defaultValue": "[\n  { provide: HTTP_INTERCEPTORS, useClass: HttpTokenInterceptor, multi: true }\n]",
                    "description": "<p>Http interceptor providers in outside-in order </p>\n"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
                }
            ],
            "src/app/shared/utils/colors.ts": [
                {
                    "name": "MAT_COLORS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utils/colors.ts",
                    "type": "object",
                    "defaultValue": "{\n  red: {\n    50: '#FFEBEE',\n    100: '#FFCDD2',\n    200: '#EF9A9A',\n    300: '#E57373',\n    400: '#EF5350',\n    500: '#F44336',\n    600: '#E53935',\n    700: '#D32F2F',\n    800: '#C62828',\n    900: '#B71C1C',\n    A100: '#FF8A80',\n    A200: '#FF5252',\n    A400: '#FF1744',\n    A700: '#D50000',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'dark',\n      400: 'light',\n      500: 'light',\n      600: 'light',\n      700: 'light',\n      800: 'light',\n      900: 'light',\n      A100: 'dark',\n      A200: 'light',\n      A400: 'light',\n      A700: 'light',\n    },\n  },\n  pink: {\n    50: '#FCE4EC',\n    100: '#F8BBD0',\n    200: '#F48FB1',\n    300: '#F06292',\n    400: '#EC407A',\n    500: '#E91E63',\n    600: '#D81B60',\n    700: '#C2185B',\n    800: '#AD1457',\n    900: '#880E4F',\n    A100: '#FF80AB',\n    A200: '#FF4081',\n    A400: '#F50057',\n    A700: '#C51162',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'dark',\n      400: 'light',\n      500: 'light',\n      600: 'light',\n      700: 'light',\n      800: 'light',\n      900: 'light',\n      A100: 'dark',\n      A200: 'light',\n      A400: 'light',\n      A700: 'light',\n    },\n  },\n  purple: {\n    50: '#F3E5F5',\n    100: '#E1BEE7',\n    200: '#CE93D8',\n    300: '#BA68C8',\n    400: '#AB47BC',\n    500: '#9C27B0',\n    600: '#8E24AA',\n    700: '#7B1FA2',\n    800: '#6A1B9A',\n    900: '#4A148C',\n    A100: '#EA80FC',\n    A200: '#E040FB',\n    A400: '#D500F9',\n    A700: '#AA00FF',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'light',\n      400: 'light',\n      500: 'light',\n      600: 'light',\n      700: 'light',\n      800: 'light',\n      900: 'light',\n      A100: 'dark',\n      A200: 'light',\n      A400: 'light',\n      A700: 'light',\n    },\n  },\n  'deep-purple': {\n    50: '#EDE7F6',\n    100: '#D1C4E9',\n    200: '#B39DDB',\n    300: '#9575CD',\n    400: '#7E57C2',\n    500: '#673AB7',\n    600: '#5E35B1',\n    700: '#512DA8',\n    800: '#4527A0',\n    900: '#311B92',\n    A100: '#B388FF',\n    A200: '#7C4DFF',\n    A400: '#651FFF',\n    A700: '#6200EA',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'light',\n      400: 'light',\n      500: 'light',\n      600: 'light',\n      700: 'light',\n      800: 'light',\n      900: 'light',\n      A100: 'dark',\n      A200: 'light',\n      A400: 'light',\n      A700: 'light',\n    },\n  },\n  indigo: {\n    50: '#E8EAF6',\n    100: '#C5CAE9',\n    200: '#9FA8DA',\n    300: '#7986CB',\n    400: '#5C6BC0',\n    500: '#3F51B5',\n    600: '#3949AB',\n    700: '#303F9F',\n    800: '#283593',\n    900: '#1A237E',\n    A100: '#8C9EFF',\n    A200: '#536DFE',\n    A400: '#3D5AFE',\n    A700: '#304FFE',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'light',\n      400: 'light',\n      500: 'light',\n      600: 'light',\n      700: 'light',\n      800: 'light',\n      900: 'light',\n      A100: 'dark',\n      A200: 'light',\n      A400: 'light',\n      A700: 'light',\n    },\n  },\n  blue: {\n    50: '#E3F2FD',\n    100: '#BBDEFB',\n    200: '#90CAF9',\n    300: '#64B5F6',\n    400: '#42A5F5',\n    500: '#2196F3',\n    600: '#1E88E5',\n    700: '#1976D2',\n    800: '#1565C0',\n    900: '#0D47A1',\n    A100: '#82B1FF',\n    A200: '#448AFF',\n    A400: '#2979FF',\n    A700: '#2962FF',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'dark',\n      400: 'dark',\n      500: 'dark',\n      600: 'light',\n      700: 'light',\n      800: 'light',\n      900: 'light',\n      A100: 'dark',\n      A200: 'light',\n      A400: 'light',\n      A700: 'light',\n    },\n  },\n  'light-blue': {\n    50: '#E1F5FE',\n    100: '#B3E5FC',\n    200: '#81D4FA',\n    300: '#4FC3F7',\n    400: '#29B6F6',\n    500: '#03A9F4',\n    600: '#039BE5',\n    700: '#0288D1',\n    800: '#0277BD',\n    900: '#01579B',\n    A100: '#80D8FF',\n    A200: '#40C4FF',\n    A400: '#00B0FF',\n    A700: '#0091EA',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'dark',\n      400: 'dark',\n      500: 'dark',\n      600: 'dark',\n      700: 'light',\n      800: 'light',\n      900: 'light',\n      A100: 'dark',\n      A200: 'dark',\n      A400: 'dark',\n      A700: 'light',\n    },\n  },\n  cyan: {\n    50: '#E0F7FA',\n    100: '#B2EBF2',\n    200: '#80DEEA',\n    300: '#4DD0E1',\n    400: '#26C6DA',\n    500: '#00BCD4',\n    600: '#00ACC1',\n    700: '#0097A7',\n    800: '#00838F',\n    900: '#006064',\n    A100: '#84FFFF',\n    A200: '#18FFFF',\n    A400: '#00E5FF',\n    A700: '#00B8D4',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'dark',\n      400: 'dark',\n      500: 'dark',\n      600: 'dark',\n      700: 'light',\n      800: 'light',\n      900: 'light',\n      A100: 'dark',\n      A200: 'dark',\n      A400: 'dark',\n      A700: 'dark',\n    },\n  },\n  teal: {\n    50: '#E0F2F1',\n    100: '#B2DFDB',\n    200: '#80CBC4',\n    300: '#4DB6AC',\n    400: '#26A69A',\n    500: '#009688',\n    600: '#00897B',\n    700: '#00796B',\n    800: '#00695C',\n    900: '#004D40',\n    A100: '#A7FFEB',\n    A200: '#64FFDA',\n    A400: '#1DE9B6',\n    A700: '#00BFA5',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'dark',\n      400: 'dark',\n      500: 'light',\n      600: 'light',\n      700: 'light',\n      800: 'light',\n      900: 'light',\n      A100: 'dark',\n      A200: 'dark',\n      A400: 'dark',\n      A700: 'dark',\n    },\n  },\n  green: {\n    50: '#E8F5E9',\n    100: '#C8E6C9',\n    200: '#A5D6A7',\n    300: '#81C784',\n    400: '#66BB6A',\n    500: '#4CAF50',\n    600: '#43A047',\n    700: '#388E3C',\n    800: '#2E7D32',\n    900: '#1B5E20',\n    A100: '#B9F6CA',\n    A200: '#69F0AE',\n    A400: '#00E676',\n    A700: '#00C853',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'dark',\n      400: 'dark',\n      500: 'dark',\n      600: 'light',\n      700: 'light',\n      800: 'light',\n      900: 'light',\n      A100: 'dark',\n      A200: 'dark',\n      A400: 'dark',\n      A700: 'dark',\n    },\n  },\n  'light-green': {\n    50: '#F1F8E9',\n    100: '#DCEDC8',\n    200: '#C5E1A5',\n    300: '#AED581',\n    400: '#9CCC65',\n    500: '#8BC34A',\n    600: '#7CB342',\n    700: '#689F38',\n    800: '#558B2F',\n    900: '#33691E',\n    A100: '#CCFF90',\n    A200: '#B2FF59',\n    A400: '#76FF03',\n    A700: '#64DD17',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'dark',\n      400: 'dark',\n      500: 'dark',\n      600: 'dark',\n      700: 'dark',\n      800: 'light',\n      900: 'light',\n      A100: 'dark',\n      A200: 'dark',\n      A400: 'dark',\n      A700: 'dark',\n    },\n  },\n  lime: {\n    50: '#F9FBE7',\n    100: '#F0F4C3',\n    200: '#E6EE9C',\n    300: '#DCE775',\n    400: '#D4E157',\n    500: '#CDDC39',\n    600: '#C0CA33',\n    700: '#AFB42B',\n    800: '#9E9D24',\n    900: '#827717',\n    A100: '#F4FF81',\n    A200: '#EEFF41',\n    A400: '#C6FF00',\n    A700: '#AEEA00',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'dark',\n      400: 'dark',\n      500: 'dark',\n      600: 'dark',\n      700: 'dark',\n      800: 'dark',\n      900: 'light',\n      A100: 'dark',\n      A200: 'dark',\n      A400: 'dark',\n      A700: 'dark',\n    },\n  },\n  yellow: {\n    50: '#FFFDE7',\n    100: '#FFF9C4',\n    200: '#FFF59D',\n    300: '#FFF176',\n    400: '#FFEE58',\n    500: '#FFEB3B',\n    600: '#FDD835',\n    700: '#FBC02D',\n    800: '#F9A825',\n    900: '#F57F17',\n    A100: '#FFFF8D',\n    A200: '#FFFF00',\n    A400: '#FFEA00',\n    A700: '#FFD600',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'dark',\n      400: 'dark',\n      500: 'dark',\n      600: 'dark',\n      700: 'dark',\n      800: 'dark',\n      900: 'dark',\n      A100: 'dark',\n      A200: 'dark',\n      A400: 'dark',\n      A700: 'dark',\n    },\n  },\n  amber: {\n    50: '#FFF8E1',\n    100: '#FFECB3',\n    200: '#FFE082',\n    300: '#FFD54F',\n    400: '#FFCA28',\n    500: '#FFC107',\n    600: '#FFB300',\n    700: '#FFA000',\n    800: '#FF8F00',\n    900: '#FF6F00',\n    A100: '#FFE57F',\n    A200: '#FFD740',\n    A400: '#FFC400',\n    A700: '#FFAB00',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'dark',\n      400: 'dark',\n      500: 'dark',\n      600: 'dark',\n      700: 'dark',\n      800: 'dark',\n      900: 'dark',\n      A100: 'dark',\n      A200: 'dark',\n      A400: 'dark',\n      A700: 'dark',\n    },\n  },\n  orange: {\n    50: '#FFF3E0',\n    100: '#FFE0B2',\n    200: '#FFCC80',\n    300: '#FFB74D',\n    400: '#FFA726',\n    500: '#FF9800',\n    600: '#FB8C00',\n    700: '#F57C00',\n    800: '#EF6C00',\n    900: '#E65100',\n    A100: '#FFD180',\n    A200: '#FFAB40',\n    A400: '#FF9100',\n    A700: '#FF6D00',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'dark',\n      400: 'dark',\n      500: 'dark',\n      600: 'dark',\n      700: 'dark',\n      800: 'dark',\n      900: 'light',\n      A100: 'dark',\n      A200: 'dark',\n      A400: 'dark',\n      A700: 'dark',\n    },\n  },\n  'deep-orange': {\n    50: '#FBE9E7',\n    100: '#FFCCBC',\n    200: '#FFAB91',\n    300: '#FF8A65',\n    400: '#FF7043',\n    500: '#FF5722',\n    600: '#F4511E',\n    700: '#E64A19',\n    800: '#D84315',\n    900: '#BF360C',\n    A100: '#FF9E80',\n    A200: '#FF6E40',\n    A400: '#FF3D00',\n    A700: '#DD2C00',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'dark',\n      400: 'dark',\n      500: 'dark',\n      600: 'dark',\n      700: 'dark',\n      800: 'dark',\n      900: 'light',\n      A100: 'dark',\n      A200: 'dark',\n      A400: 'dark',\n      A700: 'dark',\n    },\n  },\n  brown: {\n    50: '#EFEBE9',\n    100: '#D7CCC8',\n    200: '#BCAAA4',\n    300: '#A1887F',\n    400: '#8D6E63',\n    500: '#795548',\n    600: '#6D4C41',\n    700: '#5D4037',\n    800: '#4E342E',\n    900: '#3E2723',\n    A100: '#D7CCC8',\n    A200: '#BCAAA4',\n    A400: '#8D6E63',\n    A700: '#5D4037',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'light',\n      400: 'light',\n      500: 'light',\n      600: 'light',\n      700: 'light',\n      800: 'light',\n      900: 'light',\n      A100: 'dark',\n      A200: 'dark',\n      A400: 'light',\n      A700: 'light',\n    },\n  },\n  gray: {\n    50: '#FAFAFA',\n    100: '#F5F5F5',\n    200: '#EEEEEE',\n    300: '#E0E0E0',\n    400: '#BDBDBD',\n    500: '#9E9E9E',\n    600: '#757575',\n    700: '#616161',\n    800: '#424242',\n    900: '#212121',\n    A100: '#FFFFFF',\n    A200: ' #EEEEEE',\n    A400: '#BDBDBD',\n    A700: '#616161',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'dark',\n      400: 'dark',\n      500: 'dark',\n      600: 'light',\n      700: 'light',\n      800: 'light',\n      900: 'light',\n      A100: 'dark',\n      A200: 'dark',\n      A400: 'dark',\n      A700: 'light',\n    },\n  },\n  'blue-gray': {\n    50: '#ECEFF1',\n    100: '#CFD8DC',\n    200: '#B0BEC5',\n    300: '#90A4AE',\n    400: '#78909C',\n    500: '#607D8B',\n    600: '#546E7A',\n    700: '#455A64',\n    800: '#37474F',\n    900: '#263238',\n    A100: '#CFD8DC',\n    A200: '#B0BEC5',\n    A400: '#78909C',\n    A700: '#455A64',\n    contrast: {\n      50: 'dark',\n      100: 'dark',\n      200: 'dark',\n      300: 'dark',\n      400: 'light',\n      500: 'light',\n      600: 'light',\n      700: 'light',\n      800: 'light',\n      900: 'light',\n      A100: 'dark',\n      A200: 'dark',\n      A400: 'light',\n      A700: 'light',\n    },\n  },\n}"
                }
            ],
            "src/app/shared/utils/icons.ts": [
                {
                    "name": "MAT_ICONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utils/icons.ts",
                    "type": "object",
                    "defaultValue": "{\n  action: [\n    '3d_rotation',\n    'accessibility',\n    'accessibility_new',\n    'accessible',\n    'accessible_forward',\n    'account_balance',\n    'account_balance_wallet',\n    'account_box',\n    'account_circle',\n    'add_shopping_cart',\n    'alarm',\n    'alarm_add',\n    'alarm_off',\n    'alarm_on',\n    'all_inbox',\n    'all_out',\n    'android',\n    'announcement',\n    'arrow_right_alt',\n    'aspect_ratio',\n    'assessment',\n    'assignment',\n    'assignment_ind',\n    'assignment_late',\n    'assignment_return',\n    'assignment_returned',\n    'assignment_turned_in',\n    'autorenew',\n    'backup',\n    'book',\n    'bookmark',\n    'bookmark_border',\n    'bookmarks',\n    'bug_report',\n    'build',\n    'cached',\n    'calendar_today',\n    'calendar_view_day',\n    'camera_enhance',\n    'card_giftcard',\n    'card_membership',\n    'card_travel',\n    'change_history',\n    'check_circle',\n    'check_circle_outline',\n    'chrome_reader_mode',\n    'class',\n    'code',\n    'commute',\n    'compare_arrows',\n    'contact_support',\n    'copyright',\n    'credit_card',\n    'dashboard',\n    'date_range',\n    'delete',\n    'delete_forever',\n    'delete_outline',\n    'description',\n    'dns',\n    'done',\n    'done_all',\n    'done_outline',\n    'donut_large',\n    'donut_small',\n    'drag_indicator',\n    'eject',\n    'euro_symbol',\n    'event',\n    'event_seat',\n    'exit_to_app',\n    'explore',\n    'explore_off',\n    'extension',\n    'face',\n    'favorite',\n    'favorite_border',\n    'feedback',\n    'find_in_page',\n    'find_replace',\n    'fingerprint',\n    'flight_land',\n    'flight_takeoff',\n    'flip_to_back',\n    'flip_to_front',\n    'g_translate',\n    'gavel',\n    'get_app',\n    'gif',\n    'grade',\n    'group_work',\n    'help',\n    'help_outline',\n    'highlight_off',\n    'history',\n    'home',\n    'horizontal_split',\n    'hourglass_empty',\n    'hourglass_full',\n    'http',\n    'https',\n    'important_devices',\n    'info',\n    'input',\n    'invert_colors',\n    'label',\n    'label_important',\n    'label_off',\n    'language',\n    'launch',\n    'line_style',\n    'line_weight',\n    'list',\n    'lock',\n    'lock_open',\n    'loyalty',\n    'markunread_mailbox',\n    'maximize',\n    'minimize',\n    'motorcycle',\n    'note_add',\n    'offline_bolt',\n    'offline_pin',\n    'opacity',\n    'open_in_browser',\n    'open_in_new',\n    'open_with',\n    'pageview',\n    'pan_tool',\n    'payment',\n    'perm_camera_mic',\n    'perm_contact_calendar',\n    'perm_data_setting',\n    'perm_device_information',\n    'perm_identity',\n    'perm_media',\n    'perm_phone_msg',\n    'perm_scan_wifi',\n    'pets',\n    'picture_in_picture',\n    'picture_in_picture_alt',\n    'play_for_work',\n    'polymer',\n    'power_settings_new',\n    'pregnant_woman',\n    'print',\n    'query_builder',\n    'question_answer',\n    'receipt',\n    'record_voice_over',\n    'redeem',\n    'remove_shopping_cart',\n    'reorder',\n    'report_problem',\n    'restore',\n    'restore_from_trash',\n    'restore_page',\n    'room',\n    'rounded_corner',\n    'rowing',\n    'schedule',\n    'search',\n    'settings',\n    'settings_applications',\n    'settings_backup_restore',\n    'settings_bluetooth',\n    'settings_brightness',\n    'settings_cell',\n    'settings_ethernet',\n    'settings_input_antenna',\n    'settings_input_component',\n    'settings_input_composite',\n    'settings_input_hdmi',\n    'settings_input_svideo',\n    'settings_overscan',\n    'settings_phone',\n    'settings_power',\n    'settings_remote',\n    'settings_voice',\n    'shop',\n    'shop_two',\n    'shopping_basket',\n    'shopping_cart',\n    'speaker_notes',\n    'speaker_notes_off',\n    'spellcheck',\n    'star_rate',\n    'stars',\n    'store',\n    'subject',\n    'supervised_user_circle',\n    'supervisor_account',\n    'swap_horiz',\n    'swap_horizontal_circle',\n    'swap_vert',\n    'swap_vertical_circle',\n    'tab',\n    'tab_unselected',\n    'text_rotate_up',\n    'text_rotate_vertical',\n    'text_rotation_down',\n    'text_rotation_none',\n    'theaters',\n    'thumb_down',\n    'thumb_up',\n    'thumbs_up_down',\n    'timeline',\n    'toc',\n    'today',\n    'toll',\n    'touch_app',\n    'track_changes',\n    'translate',\n    'trending_down',\n    'trending_flat',\n    'trending_up',\n    'turned_in',\n    'turned_in_not',\n    'update',\n    'verified_user',\n    'vertical_split',\n    'view_agenda',\n    'view_array',\n    'view_carousel',\n    'view_column',\n    'view_day',\n    'view_headline',\n    'view_list',\n    'view_module',\n    'view_quilt',\n    'view_stream',\n    'view_week',\n    'visibility',\n    'visibility_off',\n    'voice_over_off',\n    'watch_later',\n    'work',\n    'work_off',\n    'work_outline',\n    'youtube_searched_for',\n    'zoom_in',\n    'zoom_out',\n  ],\n  alert: ['add_alert', 'error', 'error_outline', 'notification_important', 'warning'],\n  av: [\n    '4k',\n    'add_to_queue',\n    'airplay',\n    'album',\n    'art_track',\n    'av_timer',\n    'branding_watermark',\n    'call_to_action',\n    'closed_caption',\n    'control_camera',\n    'equalizer',\n    'explicit',\n    'fast_forward',\n    'fast_rewind',\n    'featured_play_list',\n    'featured_video',\n    'fiber_dvr',\n    'fiber_manual_record',\n    'fiber_new',\n    'fiber_pin',\n    'fiber_smart_record',\n    'forward_10',\n    'forward_30',\n    'forward_5',\n    'games',\n    'hd',\n    'hearing',\n    'high_quality',\n    'library_add',\n    'library_books',\n    'library_music',\n    'loop',\n    'mic',\n    'mic_none',\n    'mic_off',\n    'missed_video_call',\n    'movie',\n    'music_video',\n    'new_releases',\n    'not_interested',\n    'note',\n    'pause',\n    'pause_circle_filled',\n    'pause_circle_outline',\n    'play_arrow',\n    'play_circle_filled',\n    'play_circle_filled_white',\n    'play_circle_outline',\n    'playlist_add',\n    'playlist_add_check',\n    'playlist_play',\n    'queue',\n    'queue_music',\n    'queue_play_next',\n    'radio',\n    'recent_actors',\n    'remove_from_queue',\n    'repeat',\n    'repeat_one',\n    'replay',\n    'replay_10',\n    'replay_30',\n    'replay_5',\n    'shuffle',\n    'skip_next',\n    'skip_previous',\n    'slow_motion_video',\n    'snooze',\n    'sort_by_alpha',\n    'stop',\n    'subscriptions',\n    'subtitles',\n    'surround_sound',\n    'video_call',\n    'video_label',\n    'video_library',\n    'videocam',\n    'videocam_off',\n    'volume_down',\n    'volume_mute',\n    'volume_off',\n    'volume_up',\n    'web',\n    'web_asset',\n  ],\n  communication: [\n    'alternate_email',\n    'business',\n    'call',\n    'call_end',\n    'call_made',\n    'call_merge',\n    'call_missed',\n    'call_missed_outgoing',\n    'call_received',\n    'call_split',\n    'cancel_presentation',\n    'cell_wifi',\n    'chat',\n    'chat_bubble',\n    'chat_bubble_outline',\n    'clear_all',\n    'comment',\n    'contact_mail',\n    'contact_phone',\n    'contacts',\n    'desktop_access_disabled',\n    'dialer_sip',\n    'dialpad',\n    'domain_disabled',\n    'duo',\n    'email',\n    'forum',\n    'import_contacts',\n    'import_export',\n    'invert_colors_off',\n    'list_alt',\n    'live_help',\n    'location_off',\n    'location_on',\n    'mail_outline',\n    'message',\n    'mobile_screen_share',\n    'no_sim',\n    'pause_presentation',\n    'person_add_disabled',\n    'phone',\n    'phonelink_erase',\n    'phonelink_lock',\n    'phonelink_ring',\n    'phonelink_setup',\n    'portable_wifi_off',\n    'present_to_all',\n    'print_disabled',\n    'ring_volume',\n    'rss_feed',\n    'screen_share',\n    'sentiment_satisfied_alt',\n    'speaker_phone',\n    'stay_current_landscape',\n    'stay_current_portrait',\n    'stay_primary_landscape',\n    'stay_primary_portrait',\n    'stop_screen_share',\n    'swap_calls',\n    'textsms',\n    'unsubscribe',\n    'voicemail',\n    'vpn_key',\n  ],\n  content: [\n    'add',\n    'add_box',\n    'add_circle',\n    'add_circle_outline',\n    'archive',\n    'backspace',\n    'ballot',\n    'block',\n    'clear',\n    'create',\n    'delete_sweep',\n    'drafts',\n    'file_copy',\n    'filter_list',\n    'flag',\n    'font_download',\n    'forward',\n    'gesture',\n    'how_to_reg',\n    'how_to_vote',\n    'inbox',\n    'link',\n    'link_off',\n    'low_priority',\n    'mail',\n    'markunread',\n    'move_to_inbox',\n    'next_week',\n    'outlined_flag',\n    'redo',\n    'remove',\n    'remove_circle',\n    'remove_circle_outline',\n    'reply',\n    'reply_all',\n    'report',\n    'report_off',\n    'save',\n    'save_alt',\n    'select_all',\n    'send',\n    'sort',\n    'text_format',\n    'unarchive',\n    'undo',\n    'waves',\n    'weekend',\n    'where_to_vote',\n  ],\n  device: [\n    'access_alarm',\n    'access_alarms',\n    'access_time',\n    'add_alarm',\n    'add_to_home_screen',\n    'airplanemode_active',\n    'airplanemode_inactive',\n    // 'battery_20',\n    // 'battery_30',\n    // 'battery_50',\n    // 'battery_60',\n    // 'battery_80',\n    // 'battery_90',\n    'battery_alert',\n    // 'battery_charging_20',\n    // 'battery_charging_30',\n    // 'battery_charging_50',\n    // 'battery_charging_60',\n    // 'battery_charging_80',\n    // 'battery_charging_90',\n    'battery_charging_full',\n    'battery_full',\n    'battery_std',\n    'battery_unknown',\n    'bluetooth',\n    'bluetooth_connected',\n    'bluetooth_disabled',\n    'bluetooth_searching',\n    'brightness_auto',\n    'brightness_high',\n    'brightness_low',\n    'brightness_medium',\n    'data_usage',\n    'developer_mode',\n    'devices',\n    'dvr',\n    'gps_fixed',\n    'gps_not_fixed',\n    'gps_off',\n    'graphic_eq',\n    'location_disabled',\n    'location_searching',\n    'mobile_friendly',\n    'mobile_off',\n    // 'network_cell',\n    // 'network_wifi',\n    'nfc',\n    'screen_lock_landscape',\n    'screen_lock_portrait',\n    'screen_lock_rotation',\n    'screen_rotation',\n    'sd_storage',\n    'settings_system_daydream',\n    // 'signal_cellular_0_bar',\n    // 'signal_cellular_1_bar',\n    // 'signal_cellular_2_bar',\n    // 'signal_cellular_3_bar',\n    // 'signal_cellular_4_bar',\n    'signal_cellular_alt',\n    // 'signal_cellular_connected_no_internet_0_bar',\n    // 'signal_cellular_connected_no_internet_1_bar',\n    // 'signal_cellular_connected_no_internet_2_bar',\n    // 'signal_cellular_connected_no_internet_3_bar',\n    'signal_cellular_connected_no_internet_4_bar',\n    'signal_cellular_no_sim',\n    'signal_cellular_null',\n    'signal_cellular_off',\n    // 'signal_wifi_0_bar',\n    // 'signal_wifi_1_bar',\n    // 'signal_wifi_1_bar_lock',\n    // 'signal_wifi_2_bar',\n    // 'signal_wifi_2_bar_lock',\n    // 'signal_wifi_3_bar',\n    // 'signal_wifi_3_bar_lock',\n    'signal_wifi_4_bar',\n    'signal_wifi_4_bar_lock',\n    'signal_wifi_off',\n    'storage',\n    'usb',\n    'wallpaper',\n    'widgets',\n    'wifi_lock',\n    'wifi_tethering',\n  ],\n  editor: [\n    'add_comment',\n    'attach_file',\n    'attach_money',\n    'bar_chart',\n    'border_all',\n    'border_bottom',\n    'border_clear',\n    'border_color',\n    'border_horizontal',\n    'border_inner',\n    'border_left',\n    'border_outer',\n    'border_right',\n    'border_style',\n    'border_top',\n    'border_vertical',\n    'bubble_chart',\n    'drag_handle',\n    'format_align_center',\n    'format_align_justify',\n    'format_align_left',\n    'format_align_right',\n    'format_bold',\n    'format_clear',\n    'format_color_fill',\n    'format_color_reset',\n    'format_color_text',\n    'format_indent_decrease',\n    'format_indent_increase',\n    'format_italic',\n    'format_line_spacing',\n    'format_list_bulleted',\n    'format_list_numbered',\n    'format_list_numbered_rtl',\n    'format_paint',\n    'format_quote',\n    'format_shapes',\n    'format_size',\n    'format_strikethrough',\n    'format_textdirection_l_to_r',\n    'format_textdirection_r_to_l',\n    'format_underlined',\n    'functions',\n    'highlight',\n    'insert_chart',\n    'insert_chart_outlined',\n    'insert_comment',\n    'insert_drive_file',\n    'insert_emoticon',\n    'insert_invitation',\n    'insert_link',\n    'insert_photo',\n    'linear_scale',\n    'merge_type',\n    'mode_comment',\n    'monetization_on',\n    'money_off',\n    'multiline_chart',\n    'notes',\n    'pie_chart',\n    'publish',\n    'scatter_plot',\n    'score',\n    'short_text',\n    'show_chart',\n    'space_bar',\n    'strikethrough_s',\n    'table_chart',\n    'text_fields',\n    'title',\n    'vertical_align_bottom',\n    'vertical_align_center',\n    'vertical_align_top',\n    'wrap_text',\n  ],\n  file: [\n    'attachment',\n    'cloud',\n    'cloud_circle',\n    'cloud_done',\n    'cloud_download',\n    'cloud_off',\n    'cloud_queue',\n    'cloud_upload',\n    'create_new_folder',\n    'folder',\n    'folder_open',\n    'folder_shared',\n  ],\n  hardware: [\n    'cast',\n    'cast_connected',\n    'cast_for_education',\n    'computer',\n    'desktop_mac',\n    'desktop_windows',\n    'developer_board',\n    'device_hub',\n    'device_unknown',\n    'devices_other',\n    'dock',\n    'gamepad',\n    'headset',\n    'headset_mic',\n    'keyboard',\n    'keyboard_arrow_down',\n    'keyboard_arrow_left',\n    'keyboard_arrow_right',\n    'keyboard_arrow_up',\n    'keyboard_backspace',\n    'keyboard_capslock',\n    'keyboard_hide',\n    'keyboard_return',\n    'keyboard_tab',\n    'keyboard_voice',\n    'laptop',\n    'laptop_chromebook',\n    'laptop_mac',\n    'laptop_windows',\n    'memory',\n    'mouse',\n    'phone_android',\n    'phone_iphone',\n    'phonelink',\n    'phonelink_off',\n    'power_input',\n    'router',\n    'scanner',\n    'security',\n    'sim_card',\n    'smartphone',\n    'speaker',\n    'speaker_group',\n    'tablet',\n    'tablet_android',\n    'tablet_mac',\n    'toys',\n    'tv',\n    'videogame_asset',\n    'watch',\n  ],\n  image: [\n    'add_a_photo',\n    'add_photo_alternate',\n    'add_to_photos',\n    'adjust',\n    'assistant',\n    'assistant_photo',\n    'audiotrack',\n    'blur_circular',\n    'blur_linear',\n    'blur_off',\n    'blur_on',\n    'brightness_1',\n    'brightness_2',\n    'brightness_3',\n    'brightness_4',\n    'brightness_5',\n    'brightness_6',\n    'brightness_7',\n    'broken_image',\n    'brush',\n    'burst_mode',\n    'camera',\n    'camera_alt',\n    'camera_front',\n    'camera_rear',\n    'camera_roll',\n    'center_focus_strong',\n    'center_focus_weak',\n    'collections',\n    'collections_bookmark',\n    'color_lens',\n    'colorize',\n    'compare',\n    'control_point',\n    'control_point_duplicate',\n    'crop',\n    'crop_16_9',\n    'crop_3_2',\n    'crop_5_4',\n    'crop_7_5',\n    'crop_din',\n    'crop_free',\n    'crop_landscape',\n    'crop_original',\n    'crop_portrait',\n    'crop_rotate',\n    'crop_square',\n    'dehaze',\n    'details',\n    'edit',\n    'exposure',\n    'exposure_neg_1',\n    'exposure_neg_2',\n    'exposure_plus_1',\n    'exposure_plus_2',\n    'exposure_zero',\n    'filter',\n    'filter_1',\n    'filter_2',\n    'filter_3',\n    'filter_4',\n    'filter_5',\n    'filter_6',\n    'filter_7',\n    'filter_8',\n    'filter_9',\n    'filter_9_plus',\n    'filter_b_and_w',\n    'filter_center_focus',\n    'filter_drama',\n    'filter_frames',\n    'filter_hdr',\n    'filter_none',\n    'filter_tilt_shift',\n    'filter_vintage',\n    'flare',\n    'flash_auto',\n    'flash_off',\n    'flash_on',\n    'flip',\n    'gradient',\n    'grain',\n    'grid_off',\n    'grid_on',\n    'hdr_off',\n    'hdr_on',\n    'hdr_strong',\n    'hdr_weak',\n    'healing',\n    'image',\n    'image_aspect_ratio',\n    'image_search',\n    'iso',\n    'landscape',\n    'leak_add',\n    'leak_remove',\n    'lens',\n    'linked_camera',\n    'looks',\n    'looks_3',\n    'looks_4',\n    'looks_5',\n    'looks_6',\n    'looks_one',\n    'looks_two',\n    'loupe',\n    'monochrome_photos',\n    'movie_creation',\n    'movie_filter',\n    'music_note',\n    'music_off',\n    'nature',\n    'nature_people',\n    'navigate_before',\n    'navigate_next',\n    'palette',\n    'panorama',\n    'panorama_fish_eye',\n    'panorama_horizontal',\n    'panorama_vertical',\n    'panorama_wide_angle',\n    'photo',\n    'photo_album',\n    'photo_camera',\n    'photo_filter',\n    'photo_library',\n    'photo_size_select_actual',\n    'photo_size_select_large',\n    'photo_size_select_small',\n    'picture_as_pdf',\n    'portrait',\n    'remove_red_eye',\n    'rotate_90_degrees_ccw',\n    'rotate_left',\n    'rotate_right',\n    'shutter_speed',\n    'slideshow',\n    'straighten',\n    'style',\n    'switch_camera',\n    'switch_video',\n    'tag_faces',\n    'texture',\n    'timelapse',\n    'timer',\n    'timer_10',\n    'timer_3',\n    'timer_off',\n    'tonality',\n    'transform',\n    'tune',\n    'view_comfy',\n    'view_compact',\n    'vignette',\n    'wb_auto',\n    'wb_cloudy',\n    'wb_incandescent',\n    'wb_iridescent',\n    'wb_sunny',\n  ],\n  maps: [\n    '360',\n    'add_location',\n    'atm',\n    'beenhere',\n    'category',\n    'compass_calibration',\n    'departure_board',\n    'directions',\n    'directions_bike',\n    'directions_boat',\n    'directions_bus',\n    'directions_car',\n    'directions_railway',\n    'directions_run',\n    'directions_subway',\n    'directions_transit',\n    'directions_walk',\n    'edit_attributes',\n    'edit_location',\n    'ev_station',\n    'fastfood',\n    'flight',\n    'hotel',\n    'layers',\n    'layers_clear',\n    'local_activity',\n    'local_airport',\n    'local_atm',\n    'local_bar',\n    'local_cafe',\n    'local_car_wash',\n    'local_convenience_store',\n    'local_dining',\n    'local_drink',\n    'local_florist',\n    'local_gas_station',\n    'local_grocery_store',\n    'local_hospital',\n    'local_hotel',\n    'local_laundry_service',\n    'local_library',\n    'local_mall',\n    'local_movies',\n    'local_offer',\n    'local_parking',\n    'local_pharmacy',\n    'local_phone',\n    'local_pizza',\n    'local_play',\n    'local_post_office',\n    'local_printshop',\n    'local_see',\n    'local_shipping',\n    'local_taxi',\n    'map',\n    'money',\n    'my_location',\n    'navigation',\n    'near_me',\n    'not_listed_location',\n    'person_pin',\n    'person_pin_circle',\n    'pin_drop',\n    'place',\n    'rate_review',\n    'restaurant',\n    'restaurant_menu',\n    'satellite',\n    'store_mall_directory',\n    'streetview',\n    'subway',\n    'terrain',\n    'traffic',\n    'train',\n    'tram',\n    'transfer_within_a_station',\n    'transit_enterexit',\n    'trip_origin',\n    'zoom_out_map',\n  ],\n  navigation: [\n    'apps',\n    'arrow_back',\n    'arrow_back_ios',\n    'arrow_downward',\n    'arrow_drop_down',\n    'arrow_drop_down_circle',\n    'arrow_drop_up',\n    'arrow_forward',\n    'arrow_forward_ios',\n    'arrow_left',\n    'arrow_right',\n    'arrow_upward',\n    'cancel',\n    'check',\n    'chevron_left',\n    'chevron_right',\n    'close',\n    'expand_less',\n    'expand_more',\n    'first_page',\n    'fullscreen',\n    'fullscreen_exit',\n    'last_page',\n    'menu',\n    'more_horiz',\n    'more_vert',\n    'refresh',\n    'subdirectory_arrow_left',\n    'subdirectory_arrow_right',\n    'unfold_less',\n    'unfold_more',\n  ],\n  notification: [\n    'adb',\n    'airline_seat_flat',\n    'airline_seat_flat_angled',\n    'airline_seat_individual_suite',\n    'airline_seat_legroom_extra',\n    'airline_seat_legroom_normal',\n    'airline_seat_legroom_reduced',\n    'airline_seat_recline_extra',\n    'airline_seat_recline_normal',\n    'bluetooth_audio',\n    'confirmation_number',\n    'disc_full',\n    'drive_eta',\n    'enhanced_encryption',\n    'event_available',\n    'event_busy',\n    'event_note',\n    'folder_special',\n    'live_tv',\n    'mms',\n    'more',\n    'network_check',\n    'network_locked',\n    'no_encryption',\n    'ondemand_video',\n    'personal_video',\n    'phone_bluetooth_speaker',\n    'phone_callback',\n    'phone_forwarded',\n    'phone_in_talk',\n    'phone_locked',\n    'phone_missed',\n    'phone_paused',\n    'power',\n    'power_off',\n    'priority_high',\n    'sd_card',\n    'sms',\n    'sms_failed',\n    'sync',\n    'sync_disabled',\n    'sync_problem',\n    'system_update',\n    'tap_and_play',\n    'time_to_leave',\n    'tv_off',\n    'vibration',\n    'voice_chat',\n    'vpn_lock',\n    'wc',\n    'wifi',\n    'wifi_off',\n  ],\n  places: [\n    'ac_unit',\n    'airport_shuttle',\n    'all_inclusive',\n    'beach_access',\n    'business_center',\n    'casino',\n    'child_care',\n    'child_friendly',\n    'fitness_center',\n    'free_breakfast',\n    'golf_course',\n    'hot_tub',\n    'kitchen',\n    'meeting_room',\n    'no_meeting_room',\n    'pool',\n    'room_service',\n    'rv_hookup',\n    'smoke_free',\n    'smoking_rooms',\n    'spa',\n  ],\n  social: [\n    'cake',\n    'domain',\n    'group',\n    'group_add',\n    'location_city',\n    'mood',\n    'mood_bad',\n    'notifications',\n    'notifications_active',\n    'notifications_none',\n    'notifications_off',\n    'notifications_paused',\n    'pages',\n    'party_mode',\n    'people',\n    'people_outline',\n    'person',\n    'person_add',\n    'person_outline',\n    'plus_one',\n    'poll',\n    'public',\n    'school',\n    'sentiment_dissatisfied',\n    'sentiment_satisfied',\n    'sentiment_very_dissatisfied',\n    'sentiment_very_satisfied',\n    'share',\n    'thumb_down_alt',\n    'thumb_up_alt',\n    'whatshot',\n  ],\n  toggle: [\n    'check_box',\n    'check_box_outline_blank',\n    'indeterminate_check_box',\n    'radio_button_checked',\n    'radio_button_unchecked',\n    'star',\n    'star_border',\n    'star_half',\n    'toggle_off',\n    'toggle_on',\n  ],\n}"
                }
            ],
            "src/app/shared/layout/admin-layout.component.ts": [
                {
                    "name": "MOBILE_MEDIAQUERY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/layout/admin-layout.component.ts",
                    "type": "string",
                    "defaultValue": "'screen and (max-width: 599px)'"
                },
                {
                    "name": "MONITOR_MEDIAQUERY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/layout/admin-layout.component.ts",
                    "type": "string",
                    "defaultValue": "'screen and (min-width: 960px)'"
                },
                {
                    "name": "TABLET_MEDIAQUERY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/layout/admin-layout.component.ts",
                    "type": "string",
                    "defaultValue": "'screen and (min-width: 600px) and (max-width: 959px)'"
                }
            ],
            "src/app/core/services/settings.service.ts": [
                {
                    "name": "USER_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/services/settings.service.ts",
                    "type": "string",
                    "defaultValue": "'usr'"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/core/initializers.ts": [
                {
                    "name": "StartupServiceFactory",
                    "file": "src/app/core/initializers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "startupService"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "startupService",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/module-import-guard.ts": [
                {
                    "name": "throwIfAlreadyLoaded",
                    "file": "src/app/core/module-import-guard.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "parentModule",
                            "type": "any"
                        },
                        {
                            "name": "moduleName"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "parentModule",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "moduleName",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "appRoutes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "dashboard",
                        "pathMatch": "full"
                    },
                    {
                        "path": "dashboard",
                        "loadChildren": "./modules/dashboard/dashboard.module#DashboardModule",
                        "data": {
                            "title": "Dashboard",
                            "titleI18n": "dashboard"
                        },
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/modules/dashboard/dashboard-routing.module.ts",
                                        "module": "DashboardRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "AdminLayoutComponent",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "component": "DashboardComponent"
                                                    }
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "DashboardModule"
                            }
                        ]
                    },
                    {
                        "path": "teams",
                        "loadChildren": "./modules/teams/teams.module#TeamsModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/modules/teams/teams-routing.module.ts",
                                        "module": "TeamsRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "AdminLayoutComponent",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "component": "TeamsComponent"
                                                    }
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "TeamsModule"
                            }
                        ]
                    },
                    {
                        "path": "teams/:id",
                        "loadChildren": "./modules/team-details/team-details.module#TeamDetailsModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/modules/team-details/team-details-routing.module.ts",
                                        "module": "TeamDetailsRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "AdminLayoutComponent",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "component": "TeamDetailsComponent"
                                                    }
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "TeamDetailsModule"
                            }
                        ]
                    },
                    {
                        "path": "scores",
                        "loadChildren": "./modules/scores/scores.module#ScoresModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/modules/scores/scores-routing.module.ts",
                                        "module": "ScoresRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "AdminLayoutComponent",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "component": "ScoresComponent"
                                                    }
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "ScoresModule"
                            }
                        ]
                    },
                    {
                        "path": "tables",
                        "loadChildren": "./modules/tables/tables.module#TablesModule"
                    },
                    {
                        "path": "**",
                        "redirectTo": "dashboard",
                        "pathMatch": "full"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/widgets/branding.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BrandingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/widgets/github.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GithubButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/widgets/notification.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotificationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/widgets/user.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/sidebar-notice/sidebar-notice.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarNoticeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/sidebar/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/sidebar/user-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/sidemenu/accordion.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AccordionDirective",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/sidemenu/accordionItem.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AccordionItemDirective",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/sidemenu/accordionanchor.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AccordionAnchorDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/sidemenu/sidemenu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidemenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/initializers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "StartupServiceFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/initializers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appInitializerProviders",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/error-handler.interceptor.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HttpErrorInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/http.token.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "HttpTokenInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "httpInterceptorProviders",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/models/api.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ApiRespone",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/api.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Clubs",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/api.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TeamDetails",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/api.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Teams",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/matches.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Imatches",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/matches.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Competition",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/matches.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Fixtures",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/squad.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Squad",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/standings.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IStanding",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/standings.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Standing",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/standings.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Table",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/team.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Team",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/core/module-import-guard.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "throwIfAlreadyLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/menu.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MenuService",
                "coveragePercent": 7,
                "coverageCount": "1/13",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/menu.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Menu",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/menu.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MenuChildrenItem",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/menu.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MenuTag",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/preloader.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PreloaderService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/settings.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SettingsService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/settings.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/settings.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "USER_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/spinner.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SpinnerService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/startup.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StartupService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/settings.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppSettings",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/core/settings.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaults",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dashboard/dashboard-home/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/players/players.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlayersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/players/players.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PlayerElement",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/scores/scores-home/score-card/score-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScoreCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/scores/scores-home/scores.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScoresComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/tables/tables-home/tables.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TablesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/team-details/team-details-home/team-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/teams/teams-home/teams.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/breadcrumb/breadcrumb.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/page-header/page-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/layout/admin-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/layout/admin-layout.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MOBILE_MEDIAQUERY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/layout/admin-layout.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MONITOR_MEDIAQUERY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/layout/admin-layout.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TABLET_MEDIAQUERY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/layout/layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/competition.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CompetitionService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/data-transfer.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DataTransferService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/match.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MatchService",
                "coveragePercent": 8,
                "coverageCount": "1/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/scores.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ScoreService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/standing.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StandingService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/teams.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TeamService",
                "coveragePercent": 40,
                "coverageCount": "2/5",
                "status": "medium"
            },
            {
                "filePath": "src/app/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COMPONENTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COMPONENTS_DYNAMIC",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIRECTIVES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MODULES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PIPES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/colors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAT_COLORS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/icons.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAT_ICONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}